üîß [config.ts] Creating new Config instance.
üîß [config.ts] Config constructor starting...
üîß [config.ts] process.env.GOOGLE_PLACES_API_KEY at constructor start: SET (len: 39)
üîß [config.ts] process.env.GEMINI_API_KEY at constructor start: SET (len: 39)
üîß [config.ts] loadApiKeys() starting...
üîß [config.ts] Loading GEMINI_API_KEY from process.env: SET (length: 39)
üîß [config.ts] Stored GEMINI_API_KEY in this.apiKeys: SET (length: 39)
üîß [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: SET (length: 39)
üîß [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: SET (length: 39)
üîß [config.ts] Loading WEATHER_API_KEY from process.env: NOT SET
üîß [config.ts] Stored WEATHER_API_KEY in this.apiKeys: NOT SET (stored as empty string)
üîß [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
üîß [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
üîß [config.ts] loadApiKeys() finished.
üîß [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
‚ú® [config.ts] AI_PROCESSING feature flag ENABLED.
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
‚ú® [config.ts] USE_GEMINI feature flag ENABLED.
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: false, Valid (has length): false
üö´ [config.ts] WEATHER_AWARE feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: true, Valid (has length): true
‚ú® [config.ts] PLACES_API feature flag ENABLED.
üîß [config.ts] initializeFeatureFlags() finished.
üîß [config.ts] Config constructor finished.
AI_PROCESSING feature flag status: true
GEMINI_API_KEY validation: true
Initializing Gemini API with valid API key
Gemini API successfully initialized
AI_PROCESSING feature flag status: true
GEMINI_API_KEY validation: true
Initializing Gemini API with valid API key
Gemini API successfully initialized
üîß [config.ts] Config initialize() called.
üîß [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: false,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: false,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
üöÄ Running Comprehensive Multi-Step Query Tests

================================================================================

üìã Test: Simple sequential activities
üìù Query: "Coffee in SoHo at 9am, shopping in Greenwich Village, lunch at noon, then Central Park"
üéØ Expected: 4 activities with specific times, multiple locations, sequential flow
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Coffee",
      "location": "SoHo"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village"
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Coffee","location":"SoHo","time":"09:00"},{"activity":"Lunch","location":"Midtown","time":"12:00"}],"flexibleTimeEntries":[{"activity":"Shopping","location":"Greenwich Village","time":"14:00"},{"activity":"Visit Central Park","location":"Central Park","time":"15:00"}]},"processingTimeMs":3271,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Coffee in SoHo at 9am, shopping in Greenwich Village, lunch at noon, then Central Park\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"SoHo\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Shopping\",\n      \"location\": \"Greenwich Village\"\n    },\n    {\n      \"time\": \"15:00\",\n      \"activity\": \"Visit Central Park\",\n      \"location\": \"Central Park\"\n    }\n  ],\n  \"searchParameters\": {}\n}\n```","service":"ai-interaction-logger","sessionId":"0eeae34d-ba02-41f9-ae86-3fd6effe4a4e","status":"success","timestamp":"2025-05-25T21:47:55.764Z","userQuery":"Coffee in SoHo at 9am, shopping in Greenwich Village, lunch at noon, then Central Park"}
üóÑÔ∏è  Initializing database instance with Neon driver...
‚úÖ Database instance initialized successfully with Neon.
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Coffee",
      "location": "SoHo"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village"
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park"
    }
  ]
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Coffee at SoHo, 09:00
Added fixed time entry: Lunch at Midtown, 12:00
Found 2 flexible time entries to process
Added flexible time entry to fixedTimes: Shopping at Greenwich Village, 14:00
Added flexible time entry to fixedTimes: Visit Central Park at Central Park, 15:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Coffee",
      "location": "SoHo",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village",
      "searchParameters": {}
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village"
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Coffee",
      "location": "SoHo",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village",
      "searchParameters": {}
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village"
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Coffee",
      "location": "SoHo",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village",
      "searchParameters": {}
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "Greenwich Village"
    },
    {
      "time": "15:00",
      "activity": "Visit Central Park",
      "location": "Central Park"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Coffee",
    "location": "SoHo",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Shopping",
    "location": "Greenwich Village",
    "searchParameters": {}
  },
  {
    "time": "15:00",
    "activity": "Visit Central Park",
    "location": "Central Park",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Coffee at SoHo, time: 2025-05-25T23:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Lunch at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Shopping at Greenwich Village, time: 2025-05-26T04:00:00.000Z, type: shopping_mall
Fixed time entry: Normalized time from "15:00" to "15:00"
Correctly interpreted time "15:00" as NYC time: 6:00 PM (2025-05-26T05:00:00.000Z)
Processed fixed time entry: Visit Central Park at Central Park, time: 2025-05-26T05:00:00.000Z, type: park
Raw flexible time entries from Gemini: [
  {
    "time": "14:00",
    "activity": "Shopping",
    "location": "Greenwich Village"
  },
  {
    "time": "15:00",
    "activity": "Visit Central Park",
    "location": "Central Park"
  }
]
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "15:00" to "15:00"
Correctly interpreted time "15:00" as NYC time: 6:00 PM (2025-05-26T05:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo",
    "Greenwich Village",
    "Central Park"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Greenwich Village",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Central Park",
      "time": "2025-05-26T05:00:00.000Z",
      "type": "park",
      "searchTerm": "Visit Central Park",
      "minRating": 4,
      "displayTime": "6:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "SoHo" with Google Maps Geocoding API
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "Greenwich Village" with Google Maps Geocoding API
Validated "Greenwich Village" as neighborhood: "Greenwich Village"
Validated "Greenwich Village" as neighborhood: "Greenwich Village"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "SoHo" with Google Maps Geocoding API
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Greenwich Village" with Google Maps Geocoding API
Validated "Greenwich Village" as neighborhood: "Greenwich Village"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo",
    "Greenwich Village",
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Greenwich Village",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Manhattan",
      "time": "2025-05-26T05:00:00.000Z",
      "type": "park",
      "searchTerm": "Visit Central Park",
      "minRating": 4,
      "displayTime": "6:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 5692ms

  1. Coffee
     üìç Location: SoHo
     üïê Time: 12:00 PM
     üè∑Ô∏è  Type: cafe
     ‚≠ê Min Rating: 4

  2. Lunch
     üìç Location: Midtown Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  3. Shopping
     üìç Location: Greenwich Village
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: shopping_mall
     ‚≠ê Min Rating: 4

  4. Visit Central Park
     üìç Location: Manhattan
     üïê Time: 6:00 PM
     üè∑Ô∏è  Type: park
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Detailed venue preferences
üìù Query: "Start with breakfast at a trendy brunch spot with outdoor seating in Williamsburg around 10am, then vintage shopping in Brooklyn, grab coffee at a hipster cafe with good wifi, and dinner at an upscale Italian place with a view"
üéØ Expected: 4 activities with venue preferences, ambiance requirements, specific amenities
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Breakfast at a trendy brunch spot with outdoor seating",
      "location": "Williamsburg"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn"
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn"
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Breakfast at a trendy brunch spot with outdoor seating","location":"Williamsburg","time":"10:00"}],"flexibleTimeEntries":[{"activity":"Vintage shopping","location":"Brooklyn","time":"14:00"},{"activity":"Coffee at a hipster cafe with good wifi","location":"Brooklyn","time":"16:00"},{"activity":"Dinner at an upscale Italian place with a view","location":"Midtown","time":"19:00"}]},"processingTimeMs":4091,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Start with breakfast at a trendy brunch spot with outdoor seating in Williamsburg around 10am, then vintage shopping in Brooklyn, grab coffee at a hipster cafe with good wifi, and dinner at an upscale Italian place with a view\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Breakfast at a trendy brunch spot with outdoor seating\",\n      \"location\": \"Williamsburg\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Vintage shopping\",\n      \"location\": \"Brooklyn\"\n    },\n    {\n      \"time\": \"16:00\",\n      \"activity\": \"Coffee at a hipster cafe with good wifi\",\n      \"location\": \"Brooklyn\"\n    },\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"Dinner at an upscale Italian place with a view\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"searchParameters\": {\n    \"venueType\": [\n      \"restaurant\",\n      \"cafe\"\n    ],\n    \"venuePreference\": [\n      \"trendy brunch spot with outdoor seating\",\n      \"hipster cafe with good wifi\",\n      \"upscale Italian place with a view\"\n    ],\n    \"locationPreference\": [],\n    \"otherPreferences\": []\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"f777e82d-372a-49ae-a95a-165e1caa586d","status":"success","timestamp":"2025-05-25T21:48:02.300Z","userQuery":"Start with breakfast at a trendy brunch spot with outdoor seating in Williamsburg around 10am, then vintage shopping in Brooklyn, grab coffee at a hipster cafe with good wifi, and dinner at an upscale Italian place with a view"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Breakfast at a trendy brunch spot with outdoor seating",
      "location": "Williamsburg"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn"
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn"
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown"
    }
  ]
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Breakfast at a trendy brunch spot with outdoor seating at Williamsburg, 10:00
Found 3 flexible time entries to process
Added flexible time entry to fixedTimes: Vintage shopping at Brooklyn, 14:00
Added flexible time entry to fixedTimes: Coffee at a hipster cafe with good wifi at Brooklyn, 16:00
Added flexible time entry to fixedTimes: Dinner at an upscale Italian place with a view at Midtown, 19:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Breakfast at a trendy brunch spot with outdoor seating",
      "location": "Williamsburg",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn"
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn"
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Breakfast at a trendy brunch spot with outdoor seating",
      "location": "Williamsburg",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn"
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn"
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Breakfast at a trendy brunch spot with outdoor seating",
      "location": "Williamsburg",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Vintage shopping",
      "location": "Brooklyn"
    },
    {
      "time": "16:00",
      "activity": "Coffee at a hipster cafe with good wifi",
      "location": "Brooklyn"
    },
    {
      "time": "19:00",
      "activity": "Dinner at an upscale Italian place with a view",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Breakfast at a trendy brunch spot with outdoor seating",
    "location": "Williamsburg",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Vintage shopping",
    "location": "Brooklyn",
    "searchParameters": {}
  },
  {
    "time": "16:00",
    "activity": "Coffee at a hipster cafe with good wifi",
    "location": "Brooklyn",
    "searchParameters": {}
  },
  {
    "time": "19:00",
    "activity": "Dinner at an upscale Italian place with a view",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Breakfast at a trendy brunch spot with outdoor seating at Williamsburg, time: 2025-05-26T00:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Vintage shopping at Brooklyn, time: 2025-05-26T04:00:00.000Z, type: shopping_mall
Fixed time entry: Normalized time from "16:00" to "16:00"
Correctly interpreted time "16:00" as NYC time: 7:00 PM (2025-05-26T06:00:00.000Z)
Processed fixed time entry: Coffee at a hipster cafe with good wifi at Brooklyn, time: 2025-05-26T06:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as NYC time: 10:00 PM (2025-05-26T09:00:00.000Z)
Processed fixed time entry: Dinner at an upscale Italian place with a view at Midtown, time: 2025-05-26T09:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "14:00",
    "activity": "Vintage shopping",
    "location": "Brooklyn"
  },
  {
    "time": "16:00",
    "activity": "Coffee at a hipster cafe with good wifi",
    "location": "Brooklyn"
  },
  {
    "time": "19:00",
    "activity": "Dinner at an upscale Italian place with a view",
    "location": "Midtown"
  }
]
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "16:00" to "16:00"
Correctly interpreted time "16:00" as NYC time: 7:00 PM (2025-05-26T06:00:00.000Z)
Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as NYC time: 10:00 PM (2025-05-26T09:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Williamsburg",
    "Brooklyn"
  ],
  "fixedTimes": [
    {
      "location": "Williamsburg",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Breakfast at a trendy brunch spot with outdoor seating",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Brooklyn",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Vintage shopping",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Brooklyn",
      "time": "2025-05-26T06:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee at a hipster cafe with good wifi",
      "minRating": 4,
      "displayTime": "7:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T09:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner at an upscale Italian place with a view",
      "minRating": 4,
      "displayTime": "10:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Williamsburg" with Google Maps Geocoding API
Validated "Williamsburg" as neighborhood: "Williamsburg"
Validated "Williamsburg" as neighborhood: "Williamsburg"
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "Williamsburg" with Google Maps Geocoding API
Validated "Williamsburg" as neighborhood: "Williamsburg"
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Williamsburg",
    "Brooklyn"
  ],
  "fixedTimes": [
    {
      "location": "Williamsburg",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Breakfast at a trendy brunch spot with outdoor seating",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Brooklyn",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Vintage shopping",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Brooklyn",
      "time": "2025-05-26T06:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee at a hipster cafe with good wifi",
      "minRating": 4,
      "displayTime": "7:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T09:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner at an upscale Italian place with a view",
      "minRating": 4,
      "displayTime": "10:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 5712ms

  1. Breakfast at a trendy brunch spot with outdoor seating
     üìç Location: Williamsburg
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Vintage shopping
     üìç Location: Brooklyn
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: shopping_mall
     ‚≠ê Min Rating: 4

  3. Coffee at a hipster cafe with good wifi
     üìç Location: Brooklyn
     üïê Time: 7:00 PM
     üè∑Ô∏è  Type: cafe
     ‚≠ê Min Rating: 4

  4. Dinner at an upscale Italian place with a view
     üìç Location: Midtown Manhattan
     üïê Time: 10:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Mixed time formats
üìù Query: "Morning yoga at 7, breakfast after that, meetings until 2pm, late lunch at a sushi place, evening walk in High Line at sunset, dinner at 8:30"
üéØ Expected: 6 activities with relative times, absolute times, time ranges
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "07:00",
      "activity": "Yoga",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "20:30",
      "activity": "Dinner",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Yoga","location":"Midtown","time":"07:00"},{"activity":"Lunch","location":"Midtown","time":"14:00"},{"activity":"Dinner","location":"Midtown","time":"20:30"}],"flexibleTimeEntries":[{"activity":"Breakfast","location":"Midtown","time":"08:00"},{"activity":"Meetings","location":"Midtown","time":"10:00"},{"activity":"Walk","location":"High Line","time":"18:00"}]},"processingTimeMs":3870,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Morning yoga at 7, breakfast after that, meetings until 2pm, late lunch at a sushi place, evening walk in High Line at sunset, dinner at 8:30\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"interests\": [],\n  \"searchParameters\": {\n    \"venuePreference\": \"sushi place\"\n  },\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"07:00\",\n      \"activity\": \"Yoga\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"20:30\",\n      \"activity\": \"Dinner\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"08:00\",\n      \"activity\": \"Breakfast\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Meetings\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"Walk\",\n      \"location\": \"High Line\"\n    }\n  ]\n}\n```","service":"ai-interaction-logger","sessionId":"79e52502-9e14-4c12-b3d2-ab6398e7d400","status":"success","timestamp":"2025-05-25T21:48:07.781Z","userQuery":"Morning yoga at 7, breakfast after that, meetings until 2pm, late lunch at a sushi place, evening walk in High Line at sunset, dinner at 8:30"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "07:00",
      "activity": "Yoga",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "20:30",
      "activity": "Dinner",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line"
    }
  ]
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Yoga at Midtown, 07:00
Added fixed time entry: Lunch at Midtown, 14:00
Added fixed time entry: Dinner at Midtown, 20:30
Found 3 flexible time entries to process
Added flexible time entry to fixedTimes: Breakfast at Midtown, 08:00
Added flexible time entry to fixedTimes: Meetings at Midtown, 10:00
Added flexible time entry to fixedTimes: Walk at High Line, 18:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "07:00",
      "activity": "Yoga",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line",
      "searchParameters": {}
    },
    {
      "time": "20:30",
      "activity": "Dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "07:00",
      "activity": "Yoga",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line",
      "searchParameters": {}
    },
    {
      "time": "20:30",
      "activity": "Dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "07:00",
      "activity": "Yoga",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line",
      "searchParameters": {}
    },
    {
      "time": "20:30",
      "activity": "Dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Meetings",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Walk",
      "location": "High Line"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "07:00",
    "activity": "Yoga",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "08:00",
    "activity": "Breakfast",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "10:00",
    "activity": "Meetings",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Lunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "18:00",
    "activity": "Walk",
    "location": "High Line",
    "searchParameters": {}
  },
  {
    "time": "20:30",
    "activity": "Dinner",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "07:00" to "07:00"
Correctly interpreted time "07:00" as NYC time: 10:00 AM (2025-05-25T21:00:00.000Z)
Processed fixed time entry: Yoga at Midtown, time: 2025-05-25T21:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "08:00" to "08:00"
Correctly interpreted time "08:00" as NYC time: 11:00 AM (2025-05-25T22:00:00.000Z)
Processed fixed time entry: Breakfast at Midtown, time: 2025-05-25T22:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Meetings at Midtown, time: 2025-05-26T00:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Lunch at Midtown, time: 2025-05-26T04:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Processed fixed time entry: Walk at High Line, time: 2025-05-26T08:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "20:30" to "20:30"
Correctly interpreted time "20:30" as NYC time: 11:30 PM (2025-05-26T10:30:00.000Z)
Processed fixed time entry: Dinner at Midtown, time: 2025-05-26T10:30:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "08:00",
    "activity": "Breakfast",
    "location": "Midtown"
  },
  {
    "time": "10:00",
    "activity": "Meetings",
    "location": "Midtown"
  },
  {
    "time": "18:00",
    "activity": "Walk",
    "location": "High Line"
  }
]
Normalized time from "08:00" to "08:00"
Correctly interpreted time "08:00" as NYC time: 11:00 AM (2025-05-25T22:00:00.000Z)
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "High Line"
  ],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Meetings",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "High Line",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Walk",
      "minRating": 4,
      "displayTime": "9:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T10:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "11:30 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "High Line" with Google Maps Geocoding API
Validated "High Line" as neighborhood: "Manhattan"
Validated "High Line" as neighborhood: "Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "High Line" with Google Maps Geocoding API
Validated "High Line" as neighborhood: "Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Meetings",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Manhattan",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Walk",
      "minRating": 4,
      "displayTime": "9:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T10:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "11:30 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 3 activities in 4621ms

  1. Meetings
     üìç Location: Midtown Manhattan
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Walk
     üìç Location: Manhattan
     üïê Time: 9:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  3. Dinner
     üìç Location: Midtown Manhattan
     üïê Time: 11:30 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Vague location handling
üìù Query: "Start somewhere nice for coffee, then go to that famous museum everyone talks about, lunch wherever is good nearby, and end up at a rooftop bar with a view"
üéØ Expected: 4 activities with vague locations, relative positioning, landmark references
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown"
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[],"flexibleTimeEntries":[{"activity":"Coffee","location":"Midtown","time":"10:00"},{"activity":"Visit The Metropolitan Museum of Art","location":"The Metropolitan Museum of Art","time":"11:00"},{"activity":"Lunch","location":"Midtown","time":"12:00"},{"activity":"Drinks at rooftop bar","location":"Midtown","time":"18:00"}]},"processingTimeMs":3081,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Start somewhere nice for coffee, then go to that famous museum everyone talks about, lunch wherever is good nearby, and end up at a rooftop bar with a view\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"searchParameters\": {\n    \"venuePreference\": \"rooftop bar with a view\"\n  },\n  \"fixedTimeEntries\": [],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"11:00\",\n      \"activity\": \"Visit The Metropolitan Museum of Art\",\n      \"location\": \"The Metropolitan Museum of Art\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"Drinks at rooftop bar\",\n      \"location\": \"Midtown\"\n    }\n  ]\n}\n```","service":"ai-interaction-logger","sessionId":"9d11c000-4756-469c-b8e6-5b8c7a8f16f8","status":"success","timestamp":"2025-05-25T21:48:11.603Z","userQuery":"Start somewhere nice for coffee, then go to that famous museum everyone talks about, lunch wherever is good nearby, and end up at a rooftop bar with a view"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown"
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown"
    }
  ]
}
Found 4 flexible time entries to process
Added flexible time entry to fixedTimes: Coffee at Midtown, 10:00
Added flexible time entry to fixedTimes: Visit The Metropolitan Museum of Art at The Metropolitan Museum of Art, 11:00
Added flexible time entry to fixedTimes: Lunch at Midtown, 12:00
Added flexible time entry to fixedTimes: Drinks at rooftop bar at Midtown, 18:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown"
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown"
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown"
    },
    {
      "time": "11:00",
      "activity": "Visit The Metropolitan Museum of Art",
      "location": "The Metropolitan Museum of Art"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Drinks at rooftop bar",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "11:00",
    "activity": "Visit The Metropolitan Museum of Art",
    "location": "The Metropolitan Museum of Art",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "18:00",
    "activity": "Drinks at rooftop bar",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Coffee at Midtown, time: 2025-05-26T00:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "11:00" to "11:00"
Correctly interpreted time "11:00" as NYC time: 2:00 PM (2025-05-26T01:00:00.000Z)
Processed fixed time entry: Visit The Metropolitan Museum of Art at The Metropolitan Museum of Art, time: 2025-05-26T01:00:00.000Z, type: museum
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Lunch at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Processed fixed time entry: Drinks at rooftop bar at Midtown, time: 2025-05-26T08:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Midtown"
  },
  {
    "time": "11:00",
    "activity": "Visit The Metropolitan Museum of Art",
    "location": "The Metropolitan Museum of Art"
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Midtown"
  },
  {
    "time": "18:00",
    "activity": "Drinks at rooftop bar",
    "location": "Midtown"
  }
]
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "11:00" to "11:00"
Correctly interpreted time "11:00" as NYC time: 2:00 PM (2025-05-26T01:00:00.000Z)
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "The Metropolitan Museum of Art"
  ],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "The Metropolitan Museum of Art",
      "time": "2025-05-26T01:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit The Metropolitan Museum of Art",
      "minRating": 4,
      "displayTime": "2:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Drinks at rooftop bar",
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "The Metropolitan Museum of Art" with Google Maps Geocoding API
Could not find specific component for "The Metropolitan Museum of Art", keeping original
Validated "The Metropolitan Museum of Art" as neighborhood: "The Metropolitan Museum of Art"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "The Metropolitan Museum of Art" with Google Maps Geocoding API
Could not find specific component for "The Metropolitan Museum of Art", keeping original
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "The Metropolitan Museum of Art"
  ],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "The Metropolitan Museum of Art",
      "time": "2025-05-26T01:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit The Metropolitan Museum of Art",
      "minRating": 4,
      "displayTime": "2:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Drinks at rooftop bar",
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 3554ms

  1. Coffee
     üìç Location: Midtown Manhattan
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: cafe
     ‚≠ê Min Rating: 4

  2. Visit The Metropolitan Museum of Art
     üìç Location: The Metropolitan Museum of Art
     üïê Time: 2:00 PM
     üè∑Ô∏è  Type: museum
     ‚≠ê Min Rating: 4

  3. Lunch
     üìç Location: Midtown Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  4. Drinks at rooftop bar
     üìç Location: Midtown Manhattan
     üïê Time: 9:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Group planning
üìù Query: "Taking my family (2 adults, 2 kids) for breakfast at a family-friendly place at 9, then to the Children's Museum, lunch at a place with kids menu, afternoon at Central Park playground, early dinner at 5:30"
üéØ Expected: 5 activities with group size, family-friendly, kid-specific venues
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a family-friendly restaurant",
      "location": "Midtown"
    },
    {
      "time": "17:30",
      "activity": "Early dinner",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side"
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Breakfast at a family-friendly restaurant","location":"Midtown","time":"09:00"},{"activity":"Early dinner","location":"Midtown","time":"17:30"}],"flexibleTimeEntries":[{"activity":"Visit the Children's Museum of Manhattan","location":"Upper West Side","time":"10:00"},{"activity":"Lunch at a restaurant with kids menu","location":"Midtown","time":"12:00"},{"activity":"Play at Central Park playground","location":"Central Park","time":"14:00"}]},"processingTimeMs":4305,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Taking my family (2 adults, 2 kids) for breakfast at a family-friendly place at 9, then to the Children's Museum, lunch at a place with kids menu, afternoon at Central Park playground, early dinner at 5:30\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripType\": \"family\",\n  \"travelDates\": [],\n  \"budgetLevel\": \"moderate\",\n  \"travelers\": {\n    \"adults\": 2,\n    \"children\": 2\n  },\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Breakfast at a family-friendly restaurant\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"17:30\",\n      \"activity\": \"Early dinner\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit the Children's Museum of Manhattan\",\n      \"location\": \"Upper West Side\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch at a restaurant with kids menu\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Play at Central Park playground\",\n      \"location\": \"Central Park\"\n    }\n  ],\n  \"searchParameters\": {\n    \"venueType\": [\n      \"restaurant\"\n    ],\n    \"venuePreference\": [\n      \"family-friendly restaurant\",\n      \"restaurant with kids menu\"\n    ]\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"27528afb-9c8b-404f-a1e0-ea96e5b94797","status":"success","timestamp":"2025-05-25T21:48:16.381Z","userQuery":"Taking my family (2 adults, 2 kids) for breakfast at a family-friendly place at 9, then to the Children's Museum, lunch at a place with kids menu, afternoon at Central Park playground, early dinner at 5:30"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a family-friendly restaurant",
      "location": "Midtown"
    },
    {
      "time": "17:30",
      "activity": "Early dinner",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side"
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park"
    }
  ]
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Breakfast at a family-friendly restaurant at Midtown, 09:00
Added fixed time entry: Early dinner at Midtown, 17:30
Found 3 flexible time entries to process
Added flexible time entry to fixedTimes: Visit the Children's Museum of Manhattan at Upper West Side, 10:00
Added flexible time entry to fixedTimes: Lunch at a restaurant with kids menu at Midtown, 12:00
Added flexible time entry to fixedTimes: Play at Central Park playground at Central Park, 14:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a family-friendly restaurant",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "17:30",
      "activity": "Early dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side"
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a family-friendly restaurant",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "17:30",
      "activity": "Early dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side"
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a family-friendly restaurant",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "17:30",
      "activity": "Early dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit the Children's Museum of Manhattan",
      "location": "Upper West Side"
    },
    {
      "time": "12:00",
      "activity": "Lunch at a restaurant with kids menu",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Play at Central Park playground",
      "location": "Central Park"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Breakfast at a family-friendly restaurant",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "10:00",
    "activity": "Visit the Children's Museum of Manhattan",
    "location": "Upper West Side",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Lunch at a restaurant with kids menu",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Play at Central Park playground",
    "location": "Central Park",
    "searchParameters": {}
  },
  {
    "time": "17:30",
    "activity": "Early dinner",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Breakfast at a family-friendly restaurant at Midtown, time: 2025-05-25T23:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Visit the Children's Museum of Manhattan at Upper West Side, time: 2025-05-26T00:00:00.000Z, type: museum
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Lunch at a restaurant with kids menu at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Play at Central Park playground at Central Park, time: 2025-05-26T04:00:00.000Z, type: park
Fixed time entry: Normalized time from "17:30" to "17:30"
Correctly interpreted time "17:30" as NYC time: 8:30 PM (2025-05-26T07:30:00.000Z)
Processed fixed time entry: Early dinner at Midtown, time: 2025-05-26T07:30:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit the Children's Museum of Manhattan",
    "location": "Upper West Side"
  },
  {
    "time": "12:00",
    "activity": "Lunch at a restaurant with kids menu",
    "location": "Midtown"
  },
  {
    "time": "14:00",
    "activity": "Play at Central Park playground",
    "location": "Central Park"
  }
]
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Upper West Side",
    "Central Park"
  ],
  "fixedTimes": [
    {
      "location": "Upper West Side",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit the Children's Museum of Manhattan",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Central Park",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "park",
      "searchTerm": "Play at Central Park playground",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T07:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Early dinner",
      "minRating": 4,
      "displayTime": "8:30 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Upper West Side" with Google Maps Geocoding API
Validated "Upper West Side" as neighborhood: "Upper West Side"
Validated "Upper West Side" as neighborhood: "Upper West Side"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "Upper West Side" with Google Maps Geocoding API
Validated "Upper West Side" as neighborhood: "Upper West Side"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Upper West Side",
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "Upper West Side",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit the Children's Museum of Manhattan",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Manhattan",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "park",
      "searchTerm": "Play at Central Park playground",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T07:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Early dinner",
      "minRating": 4,
      "displayTime": "8:30 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 3 activities in 4750ms

  1. Visit the Children's Museum of Manhattan
     üìç Location: Upper West Side
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: museum
     ‚≠ê Min Rating: 4

  2. Play at Central Park playground
     üìç Location: Manhattan
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: park
     ‚≠ê Min Rating: 4

  3. Early dinner
     üìç Location: Midtown Manhattan
     üïê Time: 8:30 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Budget-aware planning
üìù Query: "Looking for a budget-friendly day: cheap breakfast spot, free museum or gallery, affordable lunch under $15, walk in a park, happy hour drinks somewhere with deals"
üéØ Expected: 5 activities with budget constraints, price preferences, free activities
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[],"flexibleTimeEntries":[{"activity":"Breakfast at a cheap breakfast spot","location":"Midtown","time":"09:00"},{"activity":"Visit a free museum or gallery","location":"Midtown","time":"10:00"},{"activity":"Affordable lunch under $15","location":"Midtown","time":"12:00"},{"activity":"Walk in a park","location":"Midtown","time":"14:00"},{"activity":"Happy hour drinks with deals","location":"Midtown","time":"18:00"}]},"processingTimeMs":4103,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Looking for a budget-friendly day: cheap breakfast spot, free museum or gallery, affordable lunch under $15, walk in a park, happy hour drinks somewhere with deals\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripType\": \"dayTrip\",\n  \"budgetLevel\": \"budget\",\n  \"travelDates\": [],\n  \"travelers\": [],\n  \"fixedTimeEntries\": [],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Breakfast at a cheap breakfast spot\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit a free museum or gallery\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Affordable lunch under $15\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Walk in a park\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"Happy hour drinks with deals\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"searchParameters\": {\n    \"venuePreference\": [\n      \"cheap breakfast spot\"\n    ],\n    \"priceRange\": {\n      \"lunch\": \"under $15\"\n    },\n    \"dealsAndDiscounts\": [\n      \"happy hour deals\"\n    ]\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"9da7fe80-687c-4644-98f4-d5d0a3a1fd0d","status":"success","timestamp":"2025-05-25T21:48:20.931Z","userQuery":"Looking for a budget-friendly day: cheap breakfast spot, free museum or gallery, affordable lunch under $15, walk in a park, happy hour drinks somewhere with deals"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown"
    }
  ]
}
Found 5 flexible time entries to process
Added flexible time entry to fixedTimes: Breakfast at a cheap breakfast spot at Midtown, 09:00
Added flexible time entry to fixedTimes: Visit a free museum or gallery at Midtown, 10:00
Added flexible time entry to fixedTimes: Affordable lunch under $15 at Midtown, 12:00
Added flexible time entry to fixedTimes: Walk in a park at Midtown, 14:00
Added flexible time entry to fixedTimes: Happy hour drinks with deals at Midtown, 18:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast at a cheap breakfast spot",
      "location": "Midtown"
    },
    {
      "time": "10:00",
      "activity": "Visit a free museum or gallery",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Affordable lunch under $15",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk in a park",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Happy hour drinks with deals",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Breakfast at a cheap breakfast spot",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "10:00",
    "activity": "Visit a free museum or gallery",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Affordable lunch under $15",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Walk in a park",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "18:00",
    "activity": "Happy hour drinks with deals",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Breakfast at a cheap breakfast spot at Midtown, time: 2025-05-25T23:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Visit a free museum or gallery at Midtown, time: 2025-05-26T00:00:00.000Z, type: museum
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Affordable lunch under $15 at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Walk in a park at Midtown, time: 2025-05-26T04:00:00.000Z, type: park
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Processed fixed time entry: Happy hour drinks with deals at Midtown, time: 2025-05-26T08:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Breakfast at a cheap breakfast spot",
    "location": "Midtown"
  },
  {
    "time": "10:00",
    "activity": "Visit a free museum or gallery",
    "location": "Midtown"
  },
  {
    "time": "12:00",
    "activity": "Affordable lunch under $15",
    "location": "Midtown"
  },
  {
    "time": "14:00",
    "activity": "Walk in a park",
    "location": "Midtown"
  },
  {
    "time": "18:00",
    "activity": "Happy hour drinks with deals",
    "location": "Midtown"
  }
]
Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit a free museum or gallery",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Affordable lunch under $15",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "park",
      "searchTerm": "Walk in a park",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Happy hour drinks with deals",
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit a free museum or gallery",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Affordable lunch under $15",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "park",
      "searchTerm": "Walk in a park",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Happy hour drinks with deals",
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 4714ms

  1. Visit a free museum or gallery
     üìç Location: Midtown Manhattan
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: museum
     ‚≠ê Min Rating: 4

  2. Affordable lunch under $15
     üìç Location: Midtown Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  3. Walk in a park
     üìç Location: Midtown Manhattan
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: park
     ‚≠ê Min Rating: 4

  4. Happy hour drinks with deals
     üìç Location: Midtown Manhattan
     üïê Time: 9:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  üîç Detected Features: sequential-planning

--------------------------------------------------------------------------------

üìã Test: Weather considerations
üìù Query: "If it's nice, picnic in Central Park at noon, otherwise lunch at a cozy indoor spot. Then either walk the High Line or visit MoMA depending on weather"
üéØ Expected: 2 activities with weather conditions, alternative options, indoor/outdoor choices
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Picnic",
      "location": "Central Park"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line"
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Picnic","location":"Central Park","time":"12:00"}],"flexibleTimeEntries":[{"activity":"Lunch","location":"Midtown","time":"12:00"},{"activity":"Walk the High Line","location":"High Line","time":"14:00"},{"activity":"Visit MoMA","location":"MoMA","time":"14:00"}]},"processingTimeMs":3350,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    If it's nice, picnic in Central Park at noon, otherwise lunch at a cozy indoor spot. Then either walk the High Line or visit MoMA depending on weather\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Picnic\",\n      \"location\": \"Central Park\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Walk the High Line\",\n      \"location\": \"High Line\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Visit MoMA\",\n      \"location\": \"MoMA\"\n    }\n  ],\n  \"searchParameters\": {\n    \"venueType\": [\n      \"restaurant\"\n    ],\n    \"venuePreference\": \"cozy indoor spot\"\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"39f5301f-cd83-4de9-82cf-09cf25076871","status":"success","timestamp":"2025-05-25T21:48:24.892Z","userQuery":"If it's nice, picnic in Central Park at noon, otherwise lunch at a cozy indoor spot. Then either walk the High Line or visit MoMA depending on weather"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Picnic",
      "location": "Central Park"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line"
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA"
    }
  ]
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Picnic at Central Park, 12:00
Found 3 flexible time entries to process
Added flexible time entry to fixedTimes: Lunch at Midtown, 12:00
Added flexible time entry to fixedTimes: Walk the High Line at High Line, 14:00
Added flexible time entry to fixedTimes: Visit MoMA at MoMA, 14:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Picnic",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line"
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Picnic",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line"
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Picnic",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Walk the High Line",
      "location": "High Line"
    },
    {
      "time": "14:00",
      "activity": "Visit MoMA",
      "location": "MoMA"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "Picnic",
    "location": "Central Park",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Walk the High Line",
    "location": "High Line",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Visit MoMA",
    "location": "MoMA",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Picnic at Central Park, time: 2025-05-26T02:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Lunch at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Walk the High Line at High Line, time: 2025-05-26T04:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Visit MoMA at MoMA, time: 2025-05-26T04:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Midtown"
  },
  {
    "time": "14:00",
    "activity": "Walk the High Line",
    "location": "High Line"
  },
  {
    "time": "14:00",
    "activity": "Visit MoMA",
    "location": "MoMA"
  }
]
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Central Park",
    "High Line",
    "MoMA"
  ],
  "fixedTimes": [
    {
      "location": "Central Park",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Picnic",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "High Line",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Walk the High Line",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "MoMA",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit MoMA",
      "minRating": 4,
      "displayTime": "5:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "High Line" with Google Maps Geocoding API
Validated "High Line" as neighborhood: "Manhattan"
Validated "High Line" as neighborhood: "Manhattan"
Validating location: "MoMA" with Google Maps Geocoding API
Could not find specific component for "MoMA", keeping original
Validated "MoMA" as neighborhood: "MoMA"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "High Line" with Google Maps Geocoding API
Validated "High Line" as neighborhood: "Manhattan"
Validating location: "MoMA" with Google Maps Geocoding API
Could not find specific component for "MoMA", keeping original
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Manhattan",
    "Manhattan",
    "MoMA"
  ],
  "fixedTimes": [
    {
      "location": "Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Picnic",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Manhattan",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Walk the High Line",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "MoMA",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit MoMA",
      "minRating": 4,
      "displayTime": "5:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 3824ms

  1. Picnic
     üìç Location: Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Lunch
     üìç Location: Midtown Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  3. Walk the High Line
     üìç Location: Manhattan
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  4. Visit MoMA
     üìç Location: MoMA
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Cultural and dietary needs
üìù Query: "Kosher breakfast in Upper West Side at 9, visit Jewish Museum, kosher lunch, afternoon at Met, early Shabbat dinner before sunset"
üéØ Expected: 5 activities with dietary restrictions, cultural considerations, religious timing
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Kosher breakfast",
      "location": "Upper West Side"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side"
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side"
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Kosher breakfast","location":"Upper West Side","time":"09:00"}],"flexibleTimeEntries":[{"activity":"Visit Jewish Museum","location":"Upper East Side","time":"10:00"},{"activity":"Kosher lunch","location":"Midtown","time":"12:00"},{"activity":"Visit The Met","location":"Upper East Side","time":"14:00"},{"activity":"Early Shabbat dinner","location":"Midtown","time":"17:00"}]},"processingTimeMs":4406,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Kosher breakfast in Upper West Side at 9, visit Jewish Museum, kosher lunch, afternoon at Met, early Shabbat dinner before sunset\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"interests\": [],\n  \"mustDos\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Kosher breakfast\",\n      \"location\": \"Upper West Side\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit Jewish Museum\",\n      \"location\": \"Upper East Side\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Kosher lunch\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Visit The Met\",\n      \"location\": \"Upper East Side\"\n    },\n    {\n      \"time\": \"17:00\",\n      \"activity\": \"Early Shabbat dinner\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"searchParameters\": {\n    \"mustDos\": [],\n    \"exclude\": [],\n    \"venueType\": [\n      \"restaurant\"\n    ],\n    \"venuePreference\": [\n      \"Kosher restaurant\"\n    ]\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"f0b82203-083b-4e9e-900e-bf3d657c18f9","status":"success","timestamp":"2025-05-25T21:48:29.772Z","userQuery":"Kosher breakfast in Upper West Side at 9, visit Jewish Museum, kosher lunch, afternoon at Met, early Shabbat dinner before sunset"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Kosher breakfast",
      "location": "Upper West Side"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side"
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side"
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown"
    }
  ]
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Kosher breakfast at Upper West Side, 09:00
Found 4 flexible time entries to process
Added flexible time entry to fixedTimes: Visit Jewish Museum at Upper East Side, 10:00
Added flexible time entry to fixedTimes: Kosher lunch at Midtown, 12:00
Added flexible time entry to fixedTimes: Visit The Met at Upper East Side, 14:00
Added flexible time entry to fixedTimes: Early Shabbat dinner at Midtown, 17:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Kosher breakfast",
      "location": "Upper West Side",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side",
      "searchParameters": {}
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side"
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side"
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Kosher breakfast",
      "location": "Upper West Side",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side",
      "searchParameters": {}
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side"
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side"
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Kosher breakfast",
      "location": "Upper West Side",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side",
      "searchParameters": {}
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Jewish Museum",
      "location": "Upper East Side"
    },
    {
      "time": "12:00",
      "activity": "Kosher lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Visit The Met",
      "location": "Upper East Side"
    },
    {
      "time": "17:00",
      "activity": "Early Shabbat dinner",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Kosher breakfast",
    "location": "Upper West Side",
    "searchParameters": {}
  },
  {
    "time": "10:00",
    "activity": "Visit Jewish Museum",
    "location": "Upper East Side",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Kosher lunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Visit The Met",
    "location": "Upper East Side",
    "searchParameters": {}
  },
  {
    "time": "17:00",
    "activity": "Early Shabbat dinner",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Kosher breakfast at Upper West Side, time: 2025-05-25T23:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Visit Jewish Museum at Upper East Side, time: 2025-05-26T00:00:00.000Z, type: museum
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Kosher lunch at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Visit The Met at Upper East Side, time: 2025-05-26T04:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "17:00" to "17:00"
Correctly interpreted time "17:00" as NYC time: 8:00 PM (2025-05-26T07:00:00.000Z)
Processed fixed time entry: Early Shabbat dinner at Midtown, time: 2025-05-26T07:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit Jewish Museum",
    "location": "Upper East Side"
  },
  {
    "time": "12:00",
    "activity": "Kosher lunch",
    "location": "Midtown"
  },
  {
    "time": "14:00",
    "activity": "Visit The Met",
    "location": "Upper East Side"
  },
  {
    "time": "17:00",
    "activity": "Early Shabbat dinner",
    "location": "Midtown"
  }
]
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "17:00" to "17:00"
Correctly interpreted time "17:00" as NYC time: 8:00 PM (2025-05-26T07:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Upper West Side",
    "Upper East Side"
  ],
  "fixedTimes": [
    {
      "location": "Upper West Side",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Kosher breakfast",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Upper East Side",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit Jewish Museum",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Upper East Side",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit The Met",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T07:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Early Shabbat dinner",
      "minRating": 4,
      "displayTime": "8:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Upper West Side" with Google Maps Geocoding API
Validated "Upper West Side" as neighborhood: "Upper West Side"
Validated "Upper West Side" as neighborhood: "Upper West Side"
Validating location: "Upper East Side" with Google Maps Geocoding API
Validated "Upper East Side" as neighborhood: "Upper East Side"
Validated "Upper East Side" as neighborhood: "Upper East Side"
Validating location: "Upper West Side" with Google Maps Geocoding API
Validated "Upper West Side" as neighborhood: "Upper West Side"
Validating location: "Upper East Side" with Google Maps Geocoding API
Validated "Upper East Side" as neighborhood: "Upper East Side"
Validating location: "Upper East Side" with Google Maps Geocoding API
Validated "Upper East Side" as neighborhood: "Upper East Side"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Upper West Side",
    "Upper East Side"
  ],
  "fixedTimes": [
    {
      "location": "Upper West Side",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Kosher breakfast",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Upper East Side",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit Jewish Museum",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Upper East Side",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit The Met",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T07:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Early Shabbat dinner",
      "minRating": 4,
      "displayTime": "8:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 5541ms

  1. Kosher breakfast
     üìç Location: Upper West Side
     üïê Time: 12:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Visit Jewish Museum
     üìç Location: Upper East Side
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: museum
     ‚≠ê Min Rating: 4

  3. Visit The Met
     üìç Location: Upper East Side
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  4. Early Shabbat dinner
     üìç Location: Midtown Manhattan
     üïê Time: 8:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Transport-aware planning
üìù Query: "Start in Brooklyn for brunch, take the subway to Manhattan for shopping in SoHo, walk to Little Italy for coffee, uber to Upper East Side for dinner"
üéØ Expected: 4 activities with transport modes, distance awareness, route planning
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo"
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy"
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[],"flexibleTimeEntries":[{"activity":"Brunch","location":"Brooklyn","time":"10:00"},{"activity":"Shopping","location":"SoHo","time":"14:00"},{"activity":"Coffee","location":"Little Italy","time":"16:00"},{"activity":"Dinner","location":"Upper East Side","time":"19:00"}]},"processingTimeMs":2811,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Start in Brooklyn for brunch, take the subway to Manhattan for shopping in SoHo, walk to Little Italy for coffee, uber to Upper East Side for dinner\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripType\": \"other\",\n  \"dates\": [],\n  \"budgetLevel\": \"moderate\",\n  \"travelParty\": {},\n  \"searchParameters\": {},\n  \"fixedTimeEntries\": [],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Brunch\",\n      \"location\": \"Brooklyn\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Shopping\",\n      \"location\": \"SoHo\"\n    },\n    {\n      \"time\": \"16:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Little Italy\"\n    },\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"Dinner\",\n      \"location\": \"Upper East Side\"\n    }\n  ]\n}\n```","service":"ai-interaction-logger","sessionId":"4201230e-0eb8-4986-97fd-af6d56334c39","status":"success","timestamp":"2025-05-25T21:48:33.724Z","userQuery":"Start in Brooklyn for brunch, take the subway to Manhattan for shopping in SoHo, walk to Little Italy for coffee, uber to Upper East Side for dinner"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo"
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy"
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side"
    }
  ]
}
Found 4 flexible time entries to process
Added flexible time entry to fixedTimes: Brunch at Brooklyn, 10:00
Added flexible time entry to fixedTimes: Shopping at SoHo, 14:00
Added flexible time entry to fixedTimes: Coffee at Little Italy, 16:00
Added flexible time entry to fixedTimes: Dinner at Upper East Side, 19:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo",
      "searchParameters": {}
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo"
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy"
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo",
      "searchParameters": {}
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo"
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy"
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo",
      "searchParameters": {}
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    },
    {
      "time": "14:00",
      "activity": "Shopping",
      "location": "SoHo"
    },
    {
      "time": "16:00",
      "activity": "Coffee",
      "location": "Little Italy"
    },
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Upper East Side"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Brunch",
    "location": "Brooklyn",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Shopping",
    "location": "SoHo",
    "searchParameters": {}
  },
  {
    "time": "16:00",
    "activity": "Coffee",
    "location": "Little Italy",
    "searchParameters": {}
  },
  {
    "time": "19:00",
    "activity": "Dinner",
    "location": "Upper East Side",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Brunch at Brooklyn, time: 2025-05-26T00:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Shopping at SoHo, time: 2025-05-26T04:00:00.000Z, type: shopping_mall
Fixed time entry: Normalized time from "16:00" to "16:00"
Correctly interpreted time "16:00" as NYC time: 7:00 PM (2025-05-26T06:00:00.000Z)
Processed fixed time entry: Coffee at Little Italy, time: 2025-05-26T06:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as NYC time: 10:00 PM (2025-05-26T09:00:00.000Z)
Processed fixed time entry: Dinner at Upper East Side, time: 2025-05-26T09:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Brunch",
    "location": "Brooklyn"
  },
  {
    "time": "14:00",
    "activity": "Shopping",
    "location": "SoHo"
  },
  {
    "time": "16:00",
    "activity": "Coffee",
    "location": "Little Italy"
  },
  {
    "time": "19:00",
    "activity": "Dinner",
    "location": "Upper East Side"
  }
]
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "16:00" to "16:00"
Correctly interpreted time "16:00" as NYC time: 7:00 PM (2025-05-26T06:00:00.000Z)
Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as NYC time: 10:00 PM (2025-05-26T09:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Brooklyn",
    "SoHo",
    "Little Italy",
    "Upper East Side"
  ],
  "fixedTimes": [
    {
      "location": "Brooklyn",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Brunch",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "SoHo",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Little Italy",
      "time": "2025-05-26T06:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "7:00 PM"
    },
    {
      "location": "Upper East Side",
      "time": "2025-05-26T09:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "10:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "SoHo" with Google Maps Geocoding API
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "Little Italy" with Google Maps Geocoding API
Validated "Little Italy" as neighborhood: "Little Italy"
Validated "Little Italy" as neighborhood: "Little Italy"
Validating location: "Upper East Side" with Google Maps Geocoding API
Validated "Upper East Side" as neighborhood: "Upper East Side"
Validated "Upper East Side" as neighborhood: "Upper East Side"
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "SoHo" with Google Maps Geocoding API
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "Little Italy" with Google Maps Geocoding API
Validated "Little Italy" as neighborhood: "Little Italy"
Validating location: "Upper East Side" with Google Maps Geocoding API
Validated "Upper East Side" as neighborhood: "Upper East Side"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Brooklyn",
    "SoHo",
    "Little Italy",
    "Upper East Side"
  ],
  "fixedTimes": [
    {
      "location": "Brooklyn",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Brunch",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "SoHo",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Little Italy",
      "time": "2025-05-26T06:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "7:00 PM"
    },
    {
      "location": "Upper East Side",
      "time": "2025-05-26T09:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "10:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 3364ms

  1. Brunch
     üìç Location: Brooklyn
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Shopping
     üìç Location: SoHo
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: shopping_mall
     ‚≠ê Min Rating: 4

  3. Coffee
     üìç Location: Little Italy
     üïê Time: 7:00 PM
     üè∑Ô∏è  Type: cafe
     ‚≠ê Min Rating: 4

  4. Dinner
     üìç Location: Upper East Side
     üïê Time: 10:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Special occasion planning
üìù Query: "Planning a birthday: champagne brunch at 11, spa treatment at 2pm, shopping for a dress, cocktails at a fancy bar at 6, surprise dinner at a Michelin star restaurant at 8"
üéØ Expected: 5 activities with special occasion, luxury preferences, timed coordination
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Champagne brunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Spa treatment",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Cocktails",
      "location": "Midtown"
    },
    {
      "time": "20:00",
      "activity": "Surprise dinner",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Champagne brunch","location":"Midtown","time":"11:00"},{"activity":"Spa treatment","location":"Midtown","time":"14:00"},{"activity":"Cocktails","location":"Midtown","time":"18:00"},{"activity":"Surprise dinner","location":"Midtown","time":"20:00"}],"flexibleTimeEntries":[{"activity":"Shopping for a dress","location":"Midtown","time":"14:00"}]},"processingTimeMs":3887,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Planning a birthday: champagne brunch at 11, spa treatment at 2pm, shopping for a dress, cocktails at a fancy bar at 6, surprise dinner at a Michelin star restaurant at 8\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripType\": \"birthday\",\n  \"dates\": [],\n  \"budget\": \"moderate\",\n  \"travelers\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"11:00\",\n      \"activity\": \"Champagne brunch\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Spa treatment\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"Cocktails\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"20:00\",\n      \"activity\": \"Surprise dinner\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Shopping for a dress\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"searchParameters\": {\n    \"venueType\": [\n      \"restaurant\",\n      \"bar\",\n      \"spa\"\n    ],\n    \"venuePreference\": [\n      \"fancy bar\",\n      \"Michelin star restaurant\"\n    ]\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"ab2743b8-144b-4d02-81bf-baab89cf62b8","status":"success","timestamp":"2025-05-25T21:48:38.159Z","userQuery":"Planning a birthday: champagne brunch at 11, spa treatment at 2pm, shopping for a dress, cocktails at a fancy bar at 6, surprise dinner at a Michelin star restaurant at 8"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Champagne brunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "Spa treatment",
      "location": "Midtown"
    },
    {
      "time": "18:00",
      "activity": "Cocktails",
      "location": "Midtown"
    },
    {
      "time": "20:00",
      "activity": "Surprise dinner",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown"
    }
  ]
}
Processing 4 fixed time entries with duplicate detection
Added fixed time entry: Champagne brunch at Midtown, 11:00
Added fixed time entry: Spa treatment at Midtown, 14:00
Added fixed time entry: Cocktails at Midtown, 18:00
Added fixed time entry: Surprise dinner at Midtown, 20:00
Found 1 flexible time entries to process
Added flexible time entry to fixedTimes: Shopping for a dress at Midtown, 14:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Champagne brunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Spa treatment",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Cocktails",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Surprise dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Champagne brunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Spa treatment",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Cocktails",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Surprise dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Champagne brunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Spa treatment",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "18:00",
      "activity": "Cocktails",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Surprise dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "14:00",
      "activity": "Shopping for a dress",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "11:00",
    "activity": "Champagne brunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Spa treatment",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "Shopping for a dress",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "18:00",
    "activity": "Cocktails",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "20:00",
    "activity": "Surprise dinner",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "11:00" to "11:00"
Correctly interpreted time "11:00" as NYC time: 2:00 PM (2025-05-26T01:00:00.000Z)
Processed fixed time entry: Champagne brunch at Midtown, time: 2025-05-26T01:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Spa treatment at Midtown, time: 2025-05-26T04:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: Shopping for a dress at Midtown, time: 2025-05-26T04:00:00.000Z, type: shopping_mall
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as NYC time: 9:00 PM (2025-05-26T08:00:00.000Z)
Processed fixed time entry: Cocktails at Midtown, time: 2025-05-26T08:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "20:00" to "20:00"
Correctly interpreted time "20:00" as NYC time: 11:00 PM (2025-05-26T10:00:00.000Z)
Processed fixed time entry: Surprise dinner at Midtown, time: 2025-05-26T10:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "14:00",
    "activity": "Shopping for a dress",
    "location": "Midtown"
  }
]
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping for a dress",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Cocktails",
      "minRating": 4,
      "displayTime": "9:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T10:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Surprise dinner",
      "minRating": 4,
      "displayTime": "11:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping for a dress",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T08:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Cocktails",
      "minRating": 4,
      "displayTime": "9:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T10:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Surprise dinner",
      "minRating": 4,
      "displayTime": "11:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 3 activities in 4136ms

  1. Shopping for a dress
     üìç Location: Midtown Manhattan
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: shopping_mall
     ‚≠ê Min Rating: 4

  2. Cocktails
     üìç Location: Midtown Manhattan
     üïê Time: 9:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  3. Surprise dinner
     üìç Location: Midtown Manhattan
     üïê Time: 11:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: sequential-planning

--------------------------------------------------------------------------------

üìã Test: Extremely vague query
üìù Query: "Just want to have a nice day in the city, you know, see some stuff and eat good food"
üéØ Expected: 2 activities with extreme vagueness, general preferences, flexible timing
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[],"flexibleTimeEntries":[{"activity":"sightseeing","location":"Midtown","time":"10:00"},{"activity":"lunch","location":"Midtown","time":"12:00"},{"activity":"sightseeing","location":"Midtown","time":"14:00"},{"activity":"dinner","location":"Midtown","time":"19:00"}]},"processingTimeMs":3113,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Just want to have a nice day in the city, you know, see some stuff and eat good food\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripType\": \"leisure\",\n  \"dates\": [],\n  \"budget\": \"moderate\",\n  \"travelParty\": [],\n  \"searchParameters\": {},\n  \"fixedTimeEntries\": [],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"sightseeing\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"lunch\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"sightseeing\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"dinner\",\n      \"location\": \"Midtown\"\n    }\n  ]\n}\n```","service":"ai-interaction-logger","sessionId":"bbf6ec4e-ce50-480f-85c1-4120fc0bf176","status":"success","timestamp":"2025-05-25T21:48:41.522Z","userQuery":"Just want to have a nice day in the city, you know, see some stuff and eat good food"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown"
    }
  ]
}
Found 4 flexible time entries to process
Added flexible time entry to fixedTimes: sightseeing at Midtown, 10:00
Added flexible time entry to fixedTimes: lunch at Midtown, 12:00
Added flexible time entry to fixedTimes: sightseeing at Midtown, 14:00
Added flexible time entry to fixedTimes: dinner at Midtown, 19:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Midtown"
    },
    {
      "time": "14:00",
      "activity": "sightseeing",
      "location": "Midtown"
    },
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Midtown"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "sightseeing",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "lunch",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "14:00",
    "activity": "sightseeing",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "19:00",
    "activity": "dinner",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: sightseeing at Midtown, time: 2025-05-26T00:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: lunch at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Processed fixed time entry: sightseeing at Midtown, time: 2025-05-26T04:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as NYC time: 10:00 PM (2025-05-26T09:00:00.000Z)
Processed fixed time entry: dinner at Midtown, time: 2025-05-26T09:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "sightseeing",
    "location": "Midtown"
  },
  {
    "time": "12:00",
    "activity": "lunch",
    "location": "Midtown"
  },
  {
    "time": "14:00",
    "activity": "sightseeing",
    "location": "Midtown"
  },
  {
    "time": "19:00",
    "activity": "dinner",
    "location": "Midtown"
  }
]
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as NYC time: 5:00 PM (2025-05-26T04:00:00.000Z)
Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as NYC time: 10:00 PM (2025-05-26T09:00:00.000Z)
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "sightseeing",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T09:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "minRating": 4,
      "displayTime": "10:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T04:00:00.000Z",
      "type": "attraction",
      "searchTerm": "sightseeing",
      "minRating": 4,
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T09:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "minRating": 4,
      "displayTime": "10:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 2 activities in 3361ms

  1. sightseeing
     üìç Location: Midtown Manhattan
     üïê Time: 5:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. dinner
     üìç Location: Midtown Manhattan
     üïê Time: 10:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: 

--------------------------------------------------------------------------------

üìã Test: Over-specific query
üìù Query: "At exactly 9:17am I need coffee from a third-wave coffee shop that roasts their own beans, serves oat milk, has wifi speed over 50mbps, and plays jazz music, located within 5 minutes walk from Union Square subway"
üéØ Expected: 1 activities with hyper-specific requirements, technical requirements, precise timing
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "09:17",
      "activity": "Get coffee",
      "location": "Union Square"
    }
  ],
  "flexibleTimeEntries": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Get coffee","location":"Union Square","time":"09:17"}],"flexibleTimeEntries":[]},"processingTimeMs":2621,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    At exactly 9:17am I need coffee from a third-wave coffee shop that roasts their own beans, serves oat milk, has wifi speed over 50mbps, and plays jazz music, located within 5 minutes walk from Union Square subway\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"09:17\",\n      \"activity\": \"Get coffee\",\n      \"location\": \"Union Square\"\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"searchParameters\": {\n    \"venueType\": \"cafe\",\n    \"venuePreference\": \"third-wave coffee shop that roasts their own beans, serves oat milk, has wifi speed over 50mbps, and plays jazz music\",\n    \"locationPreference\": null,\n    \"otherPreferences\": null\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"7218f3da-406c-4607-b21a-2864b5dc35d2","status":"success","timestamp":"2025-05-25T21:48:44.399Z","userQuery":"At exactly 9:17am I need coffee from a third-wave coffee shop that roasts their own beans, serves oat milk, has wifi speed over 50mbps, and plays jazz music, located within 5 minutes walk from Union Square subway"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "09:17",
      "activity": "Get coffee",
      "location": "Union Square"
    }
  ],
  "flexibleTimeEntries": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Get coffee at Union Square, 09:17
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:17",
      "activity": "Get coffee",
      "location": "Union Square",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:17",
      "activity": "Get coffee",
      "location": "Union Square",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:17",
      "activity": "Get coffee",
      "location": "Union Square",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:17",
    "activity": "Get coffee",
    "location": "Union Square",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:17" to "09:17"
Correctly interpreted time "09:17" as NYC time: 12:17 PM (2025-05-25T23:17:00.000Z)
Processed fixed time entry: Get coffee at Union Square, time: 2025-05-25T23:17:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Union Square"
  ],
  "fixedTimes": [
    {
      "location": "Union Square",
      "time": "2025-05-25T23:17:00.000Z",
      "type": "cafe",
      "searchTerm": "Get coffee",
      "minRating": 4,
      "displayTime": "12:17 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Union Square" with Google Maps Geocoding API
Validated "Union Square" as neighborhood: "Union Square"
Validated "Union Square" as neighborhood: "Union Square"
Validating location: "Union Square" with Google Maps Geocoding API
Validated "Union Square" as neighborhood: "Union Square"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Union Square"
  ],
  "fixedTimes": [
    {
      "location": "Union Square",
      "time": "2025-05-25T23:17:00.000Z",
      "type": "cafe",
      "searchTerm": "Get coffee",
      "minRating": 4,
      "displayTime": "12:17 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 1 activities in 2885ms

  1. Get coffee
     üìç Location: Union Square
     üïê Time: 12:17 PM
     üè∑Ô∏è  Type: cafe
     ‚≠ê Min Rating: 4

  üîç Detected Features: 

--------------------------------------------------------------------------------

üìã Test: Conflicting requirements
üìù Query: "Want a quiet place for breakfast but also live music, somewhere cheap but also Michelin rated, in Times Square but away from tourists"
üéØ Expected: 1 activities with conflicting requirements, impossible constraints, resolution needed
Found NYC street reference: "Times Square"
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[],"flexibleTimeEntries":[{"activity":"Breakfast with live music","location":"Times Square","time":"09:00"}]},"processingTimeMs":2833,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Want a quiet place for breakfast but also live music, somewhere cheap but also Michelin rated, in Times Square but away from tourists\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"fixedTimeEntries\": [],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Breakfast with live music\",\n      \"location\": \"Times Square\"\n    }\n  ],\n  \"searchParameters\": {\n    \"mustHave\": [\n      \"live music\"\n    ],\n    \"venuePreference\": null,\n    \"constraints\": [\n      \"quiet\",\n      \"away from tourists\"\n    ],\n    \"priceRange\": \"cheap\",\n    \"ratingLevel\": \"Michelin rated\"\n  }\n}\n```","service":"ai-interaction-logger","sessionId":"c9fb8ecb-cb77-4849-9f58-a2b65280b0c2","status":"success","timestamp":"2025-05-25T21:48:47.490Z","userQuery":"Want a quiet place for breakfast but also live music, somewhere cheap but also Michelin rated, in Times Square but away from tourists"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square"
    }
  ]
}
Found 1 flexible time entries to process
Added flexible time entry to fixedTimes: Breakfast with live music at Times Square, 09:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast with live music",
      "location": "Times Square"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Breakfast with live music",
    "location": "Times Square",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Breakfast with live music at Times Square, time: 2025-05-25T23:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Breakfast with live music",
    "location": "Times Square"
  }
]
Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Times Square"
  ],
  "fixedTimes": [
    {
      "location": "Times Square",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Breakfast with live music",
      "minRating": 4,
      "displayTime": "12:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Times Square" with Google Maps Geocoding API
Validated "Times Square" as neighborhood: "Manhattan"
Validated "Times Square" as neighborhood: "Manhattan"
Validating location: "Times Square" with Google Maps Geocoding API
Validated "Times Square" as neighborhood: "Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "Manhattan",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Breakfast with live music",
      "minRating": 4,
      "displayTime": "12:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 1 activities in 3426ms

  1. Breakfast with live music
     üìç Location: Manhattan
     üïê Time: 12:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  üîç Detected Features: 

--------------------------------------------------------------------------------

üìã Test: Multi-day itinerary
üìù Query: "Friday: arrival and dinner in Midtown. Saturday: breakfast at 9, MoMA, lunch in Central Park, Broadway show at 8pm. Sunday: brunch in Brooklyn and departure"
üéØ Expected: 6 activities with multi-day, day-specific planning, varied activities
Found NYC street reference: "Broadway"
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "Dinner",
      "location": "Midtown"
    },
    {
      "time": "09:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "20:00",
      "activity": "Broadway show",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park"
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Dinner","location":"Midtown","time":"20:00"},{"activity":"Breakfast","location":"Midtown","time":"09:00"},{"activity":"Broadway show","location":"Midtown","time":"20:00"}],"flexibleTimeEntries":[{"activity":"Visit MoMA","location":"Midtown","time":"10:00"},{"activity":"Lunch","location":"Central Park","time":"12:00"},{"activity":"Brunch","location":"Brooklyn","time":"10:00"}]},"processingTimeMs":3757,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Friday: arrival and dinner in Midtown. Saturday: breakfast at 9, MoMA, lunch in Central Park, Broadway show at 8pm. Sunday: brunch in Brooklyn and departure\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": \"Friday\",\n  \"tripEndDate\": \"Sunday\",\n  \"budget\": \"moderate\",\n  \"location\": \"New York City\",\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"20:00\",\n      \"activity\": \"Dinner\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Breakfast\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"20:00\",\n      \"activity\": \"Broadway show\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit MoMA\",\n      \"location\": \"Midtown\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"Central Park\"\n    },\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Brunch\",\n      \"location\": \"Brooklyn\"\n    }\n  ],\n  \"searchParameters\": {}\n}\n```","service":"ai-interaction-logger","sessionId":"98123afd-b358-4093-904c-15cd83a23179","status":"success","timestamp":"2025-05-25T21:48:51.839Z","userQuery":"Friday: arrival and dinner in Midtown. Saturday: breakfast at 9, MoMA, lunch in Central Park, Broadway show at 8pm. Sunday: brunch in Brooklyn and departure"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "Dinner",
      "location": "Midtown"
    },
    {
      "time": "09:00",
      "activity": "Breakfast",
      "location": "Midtown"
    },
    {
      "time": "20:00",
      "activity": "Broadway show",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park"
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    }
  ]
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Dinner at Midtown, 20:00
Added fixed time entry: Breakfast at Midtown, 09:00
Added fixed time entry: Broadway show at Midtown, 20:00
Found 3 flexible time entries to process
Added flexible time entry to fixedTimes: Visit MoMA at Midtown, 10:00
Added flexible time entry to fixedTimes: Lunch at Central Park, 12:00
Added flexible time entry to fixedTimes: Brunch at Brooklyn, 10:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Dinner",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Broadway show",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park"
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Dinner",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Broadway show",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park"
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Breakfast",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Dinner",
      "location": "Midtown",
      "searchParameters": {}
    },
    {
      "time": "20:00",
      "activity": "Broadway show",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit MoMA",
      "location": "Midtown"
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Central Park"
    },
    {
      "time": "10:00",
      "activity": "Brunch",
      "location": "Brooklyn"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Breakfast",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "10:00",
    "activity": "Visit MoMA",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "10:00",
    "activity": "Brunch",
    "location": "Brooklyn",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Central Park",
    "searchParameters": {}
  },
  {
    "time": "20:00",
    "activity": "Dinner",
    "location": "Midtown",
    "searchParameters": {}
  },
  {
    "time": "20:00",
    "activity": "Broadway show",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Breakfast at Midtown, time: 2025-05-25T23:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Visit MoMA at Midtown, time: 2025-05-26T00:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Processed fixed time entry: Brunch at Brooklyn, time: 2025-05-26T00:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Lunch at Central Park, time: 2025-05-26T02:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "20:00" to "20:00"
Correctly interpreted time "20:00" as NYC time: 11:00 PM (2025-05-26T10:00:00.000Z)
Processed fixed time entry: Dinner at Midtown, time: 2025-05-26T10:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "20:00" to "20:00"
Correctly interpreted time "20:00" as NYC time: 11:00 PM (2025-05-26T10:00:00.000Z)
Processed fixed time entry: Broadway show at Midtown, time: 2025-05-26T10:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit MoMA",
    "location": "Midtown"
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Central Park"
  },
  {
    "time": "10:00",
    "activity": "Brunch",
    "location": "Brooklyn"
  }
]
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as NYC time: 1:00 PM (2025-05-26T00:00:00.000Z)
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Brooklyn",
    "Central Park"
  ],
  "fixedTimes": [
    {
      "location": "Brooklyn",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Brunch",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Central Park",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T10:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Broadway show",
      "minRating": 4,
      "displayTime": "11:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T10:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "11:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "Brooklyn" with Google Maps Geocoding API
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "Central Park" with Google Maps Geocoding API
Validated "Central Park" as neighborhood: "Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Brooklyn",
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "Brooklyn",
      "time": "2025-05-26T00:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Brunch",
      "minRating": 4,
      "displayTime": "1:00 PM"
    },
    {
      "location": "Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T10:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Broadway show",
      "minRating": 4,
      "displayTime": "11:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T10:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "11:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 4 activities in 4175ms

  1. Brunch
     üìç Location: Brooklyn
     üïê Time: 1:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Lunch
     üìç Location: Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  3. Broadway show
     üìç Location: Midtown Manhattan
     üïê Time: 11:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  4. Dinner
     üìç Location: Midtown Manhattan
     üïê Time: 11:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location, sequential-planning

--------------------------------------------------------------------------------

üìã Test: Time-sensitive routing
üìù Query: "Meeting in Financial District at 9am, need breakfast before that nearby, then Midtown for lunch meeting at noon, avoid rush hour travel"
üéØ Expected: 3 activities with rush hour awareness, business context, efficient routing
Attempting to process query with new Gemini processor
Raw Gemini structured data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Meeting",
      "location": "Financial District"
    },
    {
      "time": "12:00",
      "activity": "Lunch meeting",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District"
    }
  ]
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedTimeEntries":[{"activity":"Meeting","location":"Financial District","time":"09:00"},{"activity":"Lunch meeting","location":"Midtown","time":"12:00"}],"flexibleTimeEntries":[{"activity":"Breakfast","location":"Financial District","time":"08:00"}]},"processingTimeMs":2660,"rawRequest":{"prompt":"\n    You are a travel planning assistant for New York City. Extract structured information from this itinerary request. \n    \n    IMPORTANT RULES:\n    1. Return ONLY valid JSON that matches the schema - no extra text or markdown\n    2. For time values, use 24-hour format (e.g., \"09:00\", \"15:30\") when possible\n    3. If a time is mentioned without AM/PM (e.g., \"at 6\"), default to PM for evening activities like dinner\n    4. For vague meal times: use \"09:00\" for breakfast, \"12:00\" for lunch, and \"19:00\" for dinner unless a specific time is given\n    5. Include all explicitly mentioned fixed times in fixedTimeEntries\n    6. Put activities with vague times (morning, afternoon, evening) in flexibleTimeEntries\n    7. Keep location names authentic to NYC (don't change neighborhood names)\n    8. If the user mentions specific venue requirements, include them in searchParameters\n    9. If the user doesn't specify a budget level, default to \"moderate\"\n    10. Extract as much detail as possible while staying true to the user's request\n    11. For incomplete information, make reasonable assumptions based on context\n    12. Keep activity descriptions concise but clear\n    13. VENUE PREFERENCES: Always capture specific venue preferences when mentioned:\n       - If user specifies a venue type like \"sandwich place\", \"sports bar\", \"authentic Jewish deli\", \"trendy cafe\", include it in searchParameters.venuePreference\n       - Use venuePreference for ANY specific venue descriptions (e.g., \"hipster coffee shop\", \"upscale steakhouse\", \"family-friendly diner\", \"authentic Jamaican restaurant\")\n       - This is different from venueType which should be broader categories like \"restaurant\", \"cafe\", \"bar\"\n       - Examples: for \"I want to get a real NY bagel from an authentic Jewish deli\", set venuePreference to \"authentic Jewish deli\"\n    14. LOCATION HANDLING: For EACH activity in both fixedTimeEntries and flexibleTimeEntries:\n       - You MUST identify a specific NYC location (neighborhood, landmark, station, address)\n       - If the user explicitly provides a valid NYC location (e.g., 'SoHo', 'The Met', 'Times Square', 'Wall St'), use that exact location string\n       - If the user does NOT specify a location OR provides a vague location like 'somewhere', 'anywhere', 'New York', 'nearby', you MUST use the exact string 'Midtown'\n       - The location field must NEVER be null or missing - always provide a valid string value\n    15. SCHEMA COMPLIANCE: Strictly adhere to the JSON schema. Ensure ALL required fields within fixedTimeEntries and flexibleTimeEntries (including time, activity, and location) are present and contain non-null string values.\n    \n    SCHEMA GUIDANCE:\n    - Use fixedTimeEntries for activities with specific clock times (9:00, 14:30, etc.)\n    - Use flexibleTimeEntries for activities with time periods (morning, afternoon, etc.)\n    - Both entry types MUST include: time, activity, location (never null, use 'Midtown' when unspecified)\n    - Always provide reasonable defaults: use '09:00' for breakfast, '12:00' for lunch, '19:00' for dinner\n    - For other activities, use '10:00' for morning, '14:00' for afternoon, '18:00' for evening\n    - Always use 'Midtown' for location if unspecified\n    - Always use searchParameters.venuePreference for specific venue descriptions (e.g., \"sandwich place\", \"trendy bar\")\n\n    Here's the request to analyze:\n    Meeting in Financial District at 9am, need breakfast before that nearby, then Midtown for lunch meeting at noon, avoid rush hour travel\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"tripStartDate\": null,\n  \"tripEndDate\": null,\n  \"budgetLevel\": \"moderate\",\n  \"travelStyle\": null,\n  \"interests\": [],\n  \"searchParameters\": {},\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Meeting\",\n      \"location\": \"Financial District\"\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch meeting\",\n      \"location\": \"Midtown\"\n    }\n  ],\n  \"flexibleTimeEntries\": [\n    {\n      \"time\": \"08:00\",\n      \"activity\": \"Breakfast\",\n      \"location\": \"Financial District\"\n    }\n  ]\n}\n```","service":"ai-interaction-logger","sessionId":"2261c66a-33f0-4a4c-8d32-bb3a44631a64","status":"success","timestamp":"2025-05-25T21:48:54.918Z","userQuery":"Meeting in Financial District at 9am, need breakfast before that nearby, then Midtown for lunch meeting at noon, avoid rush hour travel"}
Processing Gemini response with raw data: {
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Meeting",
      "location": "Financial District"
    },
    {
      "time": "12:00",
      "activity": "Lunch meeting",
      "location": "Midtown"
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District"
    }
  ]
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Meeting at Financial District, 09:00
Added fixed time entry: Lunch meeting at Midtown, 12:00
Found 1 flexible time entries to process
Added flexible time entry to fixedTimes: Breakfast at Financial District, 08:00
Final processed result: {
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District",
      "searchParameters": {}
    },
    {
      "time": "09:00",
      "activity": "Meeting",
      "location": "Financial District",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch meeting",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District"
    }
  ],
  "startLocation": "Midtown"
}
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District",
      "searchParameters": {}
    },
    {
      "time": "09:00",
      "activity": "Meeting",
      "location": "Financial District",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch meeting",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District"
    }
  ],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District",
      "searchParameters": {}
    },
    {
      "time": "09:00",
      "activity": "Meeting",
      "location": "Financial District",
      "searchParameters": {}
    },
    {
      "time": "12:00",
      "activity": "Lunch meeting",
      "location": "Midtown",
      "searchParameters": {}
    }
  ],
  "flexibleTimeEntries": [
    {
      "time": "08:00",
      "activity": "Breakfast",
      "location": "Financial District"
    }
  ],
  "startLocation": "Midtown"
}
Raw fixed time entries from Gemini: [
  {
    "time": "08:00",
    "activity": "Breakfast",
    "location": "Financial District",
    "searchParameters": {}
  },
  {
    "time": "09:00",
    "activity": "Meeting",
    "location": "Financial District",
    "searchParameters": {}
  },
  {
    "time": "12:00",
    "activity": "Lunch meeting",
    "location": "Midtown",
    "searchParameters": {}
  }
]
Fixed time entry: Normalized time from "08:00" to "08:00"
Correctly interpreted time "08:00" as NYC time: 11:00 AM (2025-05-25T22:00:00.000Z)
Processed fixed time entry: Breakfast at Financial District, time: 2025-05-25T22:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as NYC time: 12:00 PM (2025-05-25T23:00:00.000Z)
Processed fixed time entry: Meeting at Financial District, time: 2025-05-25T23:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as NYC time: 3:00 PM (2025-05-26T02:00:00.000Z)
Processed fixed time entry: Lunch meeting at Midtown, time: 2025-05-26T02:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: [
  {
    "time": "08:00",
    "activity": "Breakfast",
    "location": "Financial District"
  }
]
Normalized time from "08:00" to "08:00"
Correctly interpreted time "08:00" as NYC time: 11:00 AM (2025-05-25T22:00:00.000Z)
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Financial District"
  ],
  "fixedTimes": [
    {
      "location": "Financial District",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Meeting",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch meeting",
      "minRating": 4,
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Financial District" with Google Maps Geocoding API
Validated "Financial District" as neighborhood: "Financial District"
Validated "Financial District" as neighborhood: "Financial District"
Validating location: "Financial District" with Google Maps Geocoding API
Validated "Financial District" as neighborhood: "Financial District"
Validating location: "Midtown" with Google Maps Geocoding API
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Financial District"
  ],
  "fixedTimes": [
    {
      "location": "Financial District",
      "time": "2025-05-25T23:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Meeting",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-05-26T02:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch meeting",
      "minRating": 4,
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
‚úÖ Success! Parsed 2 activities in 3017ms

  1. Meeting
     üìç Location: Financial District
     üïê Time: 12:00 PM
     üè∑Ô∏è  Type: attraction
     ‚≠ê Min Rating: 4

  2. Lunch meeting
     üìç Location: Midtown Manhattan
     üïê Time: 3:00 PM
     üè∑Ô∏è  Type: restaurant
     ‚≠ê Min Rating: 4

  üîç Detected Features: multi-location

--------------------------------------------------------------------------------

================================================================================
üìä TEST SUMMARY REPORT
================================================================================
Total Tests: 15
‚úÖ Successful: 15 (100.0%)
‚ùå Failed: 0 (0.0%)

Processing Time Analysis:
  Average: 4185ms
  Min: 2885ms
  Max: 5712ms

üéØ Feature Detection Summary:
Unique features detected: multi-location, sequential-planning

üí° Recommendations for Enhancement:

================================================================================
