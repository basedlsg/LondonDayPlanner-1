
> rest-express@1.0.0 dev
> NODE_ENV=development tsx server/index.ts

🔧 [config.ts] Creating new Config instance.
🔧 [config.ts] Config constructor starting...
🔧 [config.ts] process.env.GOOGLE_PLACES_API_KEY at constructor start: NOT SET
🔧 [config.ts] process.env.GEMINI_API_KEY at constructor start: NOT SET
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] AI_PROCESSING feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] USE_GEMINI feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] WEATHER_AWARE feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] PLACES_API feature flag DISABLED (enabled: true, keysMet: false).
🔧 [config.ts] initializeFeatureFlags() finished.
🔧 [config.ts] Config constructor finished.
[CityRegistry] Registered city: London (slug: london)
[CityRegistry] Registered city: New York City (slug: nyc)
[CityRegistry] Registered city: Boston (slug: boston)
[CityRegistry] Registered city: Austin (slug: austin)
[CityRegistry] City configurations loading process completed. Registry size: 4
[CityRegistry] Registered slugs: london, nyc, boston, austin
AI_PROCESSING feature flag status: false
🔧 Loading environment variables...
📄 .env file path: /Users/carlos/LondonDayPlanner-1/.env
📄 .env file exists: true
✅ Environment variables loaded by dotenv (keys found): [
  'DATABASE_URL',
  'GOOGLE_PLACES_API_KEY',
  'GEMINI_API_KEY',
  'WEATHER_API_KEY'
]
🔍 Environment check (process.env):
   DATABASE_URL present: true
   GOOGLE_PLACES_API_KEY present: true
   GOOGLE_PLACES_API_KEY length: 39
   GEMINI_API_KEY present: true
🔧 Initializing application configuration...
🔄 [config.ts] Config.recheckEnvironment() called. Forcing reload of API keys and features...
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: SET (length: 32)
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: SET (length: 32)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] AI_PROCESSING feature flag ENABLED.
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] USE_GEMINI feature flag ENABLED.
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] WEATHER_AWARE feature flag ENABLED.
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] PLACES_API feature flag ENABLED.
🔧 [config.ts] initializeFeatureFlags() finished.
🔄 [config.ts] Environment recheck complete. Logging new status:
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
🔧 [config.ts] Config initialize() called.
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
⚠️  SESSION_SECRET not set, using fallback. SET THIS FOR PRODUCTION!
🗄️  Testing database connection...
🗄️  Initializing database instance with Neon driver...
✅ Database instance initialized successfully with Neon.
✅ Database connection successful
🔌 WebSocket service initialized
🚀 Server running on http://localhost:5001
🔧 Environment: development
🗄️  Database: Connected
🔑 Google Places API Key: Configured
🔑 Gemini API Key: Configured
🔌 WebSocket: Available at ws://localhost:5001/ws
📝 [/:city/plan] City-specific plan request for: London
Query: coffee then dinner
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: coffee then dinner
[NLP] Processing query with context for city: London
🔄 [nlp-fixed] Attempting lazy AI initialization for new Gemini processor...
🤖 [nlp-fixed] Checking AI_PROCESSING feature flag status: true
🔑 [nlp-fixed] GEMINI_API_KEY validation: true
✅ [nlp-fixed] Initializing Gemini API with valid API key
✅ [nlp-fixed] Gemini API successfully initialized
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: coffee then dinner
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "13:30",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Central London","searchParameters":{"venueType":"cafe"},"time":"12:00","venueRequirements":[]},{"activity":"Dinner","location":"Central London","searchParameters":{"venueType":"restaurant"},"time":"13:30","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":3266,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    coffee then dinner\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\"\n      }\n    },\n    {\n      \"time\": \"13:30\", \n      \"activity\": \"Dinner\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"7613ed1b-56c8-4a26-ae26-3590610339c3","status":"success","timestamp":"2025-06-03T01:48:29.781Z","userQuery":"coffee then dinner"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "13:30",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Central London, 12:00
Added fixed time entry: Dinner at Central London, 13:30
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "13:30",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "13:30",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "13:30",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "Coffee",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "cafe",
      "priceLevel": "moderate"
    }
  },
  {
    "time": "13:30",
    "activity": "Dinner",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "restaurant",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as London time: 12:00 PM (2025-06-03T11:00:00.000Z)
Processed fixed time entry: Coffee at Central London, time: 2025-06-03T11:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "13:30" to "13:30"
Correctly interpreted time "13:30" as London time: 1:30 PM (2025-06-03T12:30:00.000Z)
Processed fixed time entry: Dinner at Central London, time: 2025-06-03T12:30:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-03T11:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Central London",
      "time": "2025-06-03T12:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "1:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-03T11:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-03T12:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "minRating": 4,
      "displayTime": "1:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T11:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-03T12:30:00.000Z',
      type: 'restaurant',
      searchTerm: 'Dinner',
      keywords: undefined,
      minRating: 4,
      displayTime: '1:30 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "12:00" to normalized time "12:00" and Europe/London time: 12:00 PM (2025-06-02 12:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T11:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-03T11:00:00.000Z" to Europe/London time: 2025-06-03 12:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best coffee shops in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Saint Nine Coffee',
  rating: 4.9,
  address: '67 Southwark St, London SE1 0HX, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'SO Café London', rating: 4.9 },
  { name: "Colonna & Small's", rating: 4.9 },
  { name: 'Prufrock Coffee', rating: 4.6 }
]
Added fixed appointment to itinerary: Saint Nine Coffee at 2025-06-03T11:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T12:30:00.000Z","type":"restaurant","searchTerm":"Dinner","minRating":4,"displayTime":"1:30 PM"}
Parsed ISO timestamp "2025-06-03T12:30:00.000Z" to Europe/London time: 2025-06-03 13:30:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Dinner',
  location: 'Greater London',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best dinner restaurants in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best dinner restaurants in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Brother Marcus Borough',
  rating: 4.8,
  address: '1 Dirty Ln, London SE1 9PA, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Carlotta', rating: 4.8 },
  { name: 'Fallow', rating: 4.6 },
  { name: 'Clos Maggiore', rating: 4.4 }
]
Place "Brother Marcus Borough" already exists, returning existing record
Added fixed appointment to itinerary: Brother Marcus Borough at 2025-06-03T12:30:00.000Z
Calculating travel times for 2 places in London
Travel time from Saint Nine Coffee to Brother Marcus Borough: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee, Dinner in London" for London with ID: 1
[Weather] Fetching weather for 51.51,-0.1
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T11:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Saint Nine Coffee" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T12:30:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 1:30 PM
🔍 [/:city/plan] Place "Brother Marcus Borough" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 2 venues
POST /api/london/plan 200 9681ms
📝 [/:city/plan] City-specific plan request for: London
Query: coffee in Shoreditch
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: coffee in Shoreditch
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: coffee in Shoreditch
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "14:00",
      "activity": "coffee",
      "location": "Shoreditch",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"coffee","location":"Shoreditch","searchParameters":{"venueType":"cafe"},"time":"14:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2417,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 14:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    coffee in Shoreditch\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"coffee\",\n      \"location\": \"Shoreditch\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"7ee5c4be-6866-41b2-ae4b-1e7d32c9f2a6","status":"success","timestamp":"2025-06-03T01:50:54.910Z","userQuery":"coffee in Shoreditch"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "14:00",
      "activity": "coffee",
      "location": "Shoreditch",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: coffee at Shoreditch, 14:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "14:00",
      "activity": "coffee",
      "location": "Shoreditch",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "14:00",
      "activity": "coffee",
      "location": "Shoreditch",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "14:00",
      "activity": "coffee",
      "location": "Shoreditch",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "14:00",
    "activity": "coffee",
    "location": "Shoreditch",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "cafe",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as London time: 2:00 PM (2025-06-03T13:00:00.000Z)
Processed fixed time entry: coffee at Shoreditch, time: 2025-06-03T13:00:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Shoreditch"
  ],
  "fixedTimes": [
    {
      "location": "Shoreditch",
      "time": "2025-06-03T13:00:00.000Z",
      "type": "cafe",
      "searchTerm": "coffee",
      "minRating": 4,
      "displayTime": "2:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Shoreditch" with Google Maps Geocoding API
Geocoding search query: "Shoreditch, London, UK, UK"
Validated "Shoreditch" as admin area: "Greater London"
Validated "Shoreditch" as neighborhood: "Greater London"
Validating location: "Shoreditch" with Google Maps Geocoding API
Geocoding search query: "Shoreditch, London, UK, UK"
Validated "Shoreditch" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-03T13:00:00.000Z",
      "type": "cafe",
      "searchTerm": "coffee",
      "minRating": 4,
      "displayTime": "2:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T13:00:00.000Z',
      type: 'cafe',
      searchTerm: 'coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '2:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "14:00" to normalized time "14:00" and Europe/London time: 2:00 PM (2025-06-02 14:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T13:00:00.000Z","type":"cafe","searchTerm":"coffee","minRating":4,"displayTime":"2:00 PM"}
Parsed ISO timestamp "2025-06-03T13:00:00.000Z" to Europe/London time: 2025-06-03 14:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best coffee shops in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: "Colonna & Small's",
  rating: 4.9,
  address: '96a Leather Ln, London EC1N 7TX, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'SO Café London', rating: 4.9 },
  { name: 'Prufrock Coffee', rating: 4.6 },
  { name: 'WatchHouse Seven Dials', rating: 4.5 }
]
Added fixed appointment to itinerary: Colonna & Small's at 2025-06-03T13:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "coffee in London" for London with ID: 2
[Weather] Fetching weather for 51.52,-0.11
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T13:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 2:00 PM
🔍 [/:city/plan] Place "Colonna & Small's" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 7838ms
📝 [/:city/plan] City-specific plan request for: London
Query: lunch and coffee
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: lunch and coffee
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: lunch and coffee
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "13:30",
      "activity": "coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"lunch","location":"Central London","searchParameters":{"specificRequirements":[]},"time":"12:00","venueRequirements":[]},{"activity":"coffee","location":"Central London","searchParameters":{"specificRequirements":[]},"time":"13:30","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":0,"children":0}},"processingTimeMs":3600,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    lunch and coffee\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"lunch\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"13:30\",\n      \"activity\": \"coffee\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 0,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"c6dfa5e6-9f9d-4c4f-9cb6-a2dff40f25b5","status":"success","timestamp":"2025-06-03T01:52:25.378Z","userQuery":"lunch and coffee"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "13:30",
      "activity": "coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: lunch at Central London, 12:00
Added fixed time entry: coffee at Central London, 13:30
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "13:30",
      "activity": "coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "13:30",
      "activity": "coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "13:30",
      "activity": "coffee",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "lunch",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "13:30",
    "activity": "coffee",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as London time: 12:00 PM (2025-06-03T11:00:00.000Z)
Processed fixed time entry: lunch at Central London, time: 2025-06-03T11:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "13:30" to "13:30"
Correctly interpreted time "13:30" as London time: 1:30 PM (2025-06-03T12:30:00.000Z)
Processed fixed time entry: coffee at Central London, time: 2025-06-03T12:30:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-03T11:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Central London",
      "time": "2025-06-03T12:30:00.000Z",
      "type": "cafe",
      "searchTerm": "coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-03T11:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-03T12:30:00.000Z",
      "type": "cafe",
      "searchTerm": "coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T11:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'lunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-03T12:30:00.000Z',
      type: 'cafe',
      searchTerm: 'coffee',
      keywords: [],
      minRating: 4,
      displayTime: '1:30 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "12:00" to normalized time "12:00" and Europe/London time: 12:00 PM (2025-06-02 12:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T11:00:00.000Z","type":"restaurant","searchTerm":"lunch","keywords":[],"minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-03T11:00:00.000Z" to Europe/London time: 2025-06-03 12:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'lunch',
  location: 'Greater London',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best restaurants in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Tattu London',
  rating: 4.7,
  address: 'The Now Building Rooftop, Outernet, Denmark St, London WC2H 0LA, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Carlotta', rating: 4.8 },
  { name: 'Osteria Napoletana', rating: 4.8 },
  { name: 'Fallow', rating: 4.6 }
]
Place "Tattu London" already exists, returning existing record
Added fixed appointment to itinerary: Tattu London at 2025-06-03T11:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T12:30:00.000Z","type":"cafe","searchTerm":"coffee","keywords":[],"minRating":4,"displayTime":"1:30 PM"}
Parsed ISO timestamp "2025-06-03T12:30:00.000Z" to Europe/London time: 2025-06-03 13:30:00 GMT+1
Place "Colonna & Small's" already exists, returning existing record
Added fixed appointment to itinerary: Colonna & Small's at 2025-06-03T12:30:00.000Z
Calculating travel times for 2 places in London
Travel time from Tattu London to Colonna & Small's: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "lunch, coffee in London" for London with ID: 3
[Weather] Fetching weather for 51.52,-0.13
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T11:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Tattu London" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T12:30:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 1:30 PM
🔍 [/:city/plan] Place "Colonna & Small's" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 2 venues
POST /api/london/plan 200 11477ms
📝 [/:city/plan] City-specific plan request for: London
Query: lunch and coffee
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: lunch and coffee
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T11:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'lunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-03T12:30:00.000Z',
      type: 'cafe',
      searchTerm: 'coffee',
      keywords: [],
      minRating: 4,
      displayTime: '1:30 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "12:00" to normalized time "12:00" and Europe/London time: 12:00 PM (2025-06-02 12:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T11:00:00.000Z","type":"restaurant","searchTerm":"lunch","keywords":[],"minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-03T11:00:00.000Z" to Europe/London time: 2025-06-03 12:00:00 GMT+1
Place "Tattu London" already exists, returning existing record
Added fixed appointment to itinerary: Tattu London at 2025-06-03T11:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T12:30:00.000Z","type":"cafe","searchTerm":"coffee","keywords":[],"minRating":4,"displayTime":"1:30 PM"}
Parsed ISO timestamp "2025-06-03T12:30:00.000Z" to Europe/London time: 2025-06-03 13:30:00 GMT+1
Place "Colonna & Small's" already exists, returning existing record
Added fixed appointment to itinerary: Colonna & Small's at 2025-06-03T12:30:00.000Z
Calculating travel times for 2 places in London
Travel time from Tattu London to Colonna & Small's: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "lunch, coffee in London" for London with ID: 4
[Weather] Using cached data for 51.52,-0.13
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T11:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Tattu London" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T12:30:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 1:30 PM
🔍 [/:city/plan] Place "Colonna & Small's" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 2 venues
POST /api/london/plan 200 2904ms
📝 [/:city/plan] City-specific plan request for: London
Query: dinner and drinks
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: dinner and drinks
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: dinner and drinks
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "drinks",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"dinner","location":"Central London","searchParameters":{"specificRequirements":[]},"time":"19:00","venueRequirements":[]},{"activity":"drinks","location":"Central London","searchParameters":{"specificRequirements":[]},"time":"21:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":0,"children":0}},"processingTimeMs":3675,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 18:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    dinner and drinks\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"dinner\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"21:00\",\n      \"activity\": \"drinks\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 0,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"9f6a8940-1b9b-4c6e-abfc-e60ea105fc7d","status":"success","timestamp":"2025-06-03T01:55:48.792Z","userQuery":"dinner and drinks"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "drinks",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: dinner at Central London, 19:00
Added fixed time entry: drinks at Central London, 21:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "drinks",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "drinks",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "drinks",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "19:00",
    "activity": "dinner",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "21:00",
    "activity": "drinks",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as London time: 7:00 PM (2025-06-03T18:00:00.000Z)
Processed fixed time entry: dinner at Central London, time: 2025-06-03T18:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "21:00" to "21:00"
Correctly interpreted time "21:00" as London time: 9:00 PM (2025-06-03T20:00:00.000Z)
Processed fixed time entry: drinks at Central London, time: 2025-06-03T20:00:00.000Z, type: bar
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-03T18:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM"
    },
    {
      "location": "Central London",
      "time": "2025-06-03T20:00:00.000Z",
      "type": "bar",
      "searchTerm": "drinks",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-03T18:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-03T20:00:00.000Z",
      "type": "bar",
      "searchTerm": "drinks",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T18:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'dinner',
      keywords: [],
      minRating: 4,
      displayTime: '7:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-03T20:00:00.000Z',
      type: 'bar',
      searchTerm: 'drinks',
      keywords: [],
      minRating: 4,
      displayTime: '9:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "18:00" to normalized time "18:00" and Europe/London time: 6:00 PM (2025-06-03 18:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T18:00:00.000Z","type":"restaurant","searchTerm":"dinner","keywords":[],"minRating":4,"displayTime":"7:00 PM"}
Parsed ISO timestamp "2025-06-03T18:00:00.000Z" to Europe/London time: 2025-06-03 19:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'dinner',
  location: 'Greater London',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best dinner restaurants in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best dinner restaurants in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Clos Maggiore',
  rating: 4.4,
  address: '33 King St, London WC2E 8JD, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Carlotta', rating: 4.8 },
  { name: 'Brother Marcus Borough', rating: 4.8 },
  { name: 'Fallow', rating: 4.6 }
]
Added fixed appointment to itinerary: Clos Maggiore at 2025-06-03T18:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T20:00:00.000Z","type":"bar","searchTerm":"drinks","keywords":[],"minRating":4,"displayTime":"9:00 PM"}
Parsed ISO timestamp "2025-06-03T20:00:00.000Z" to Europe/London time: 2025-06-03 21:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'drinks',
  location: 'Greater London',
  keywords: [],
  type: 'bar',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best bars in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best bars in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Old Shades',
  rating: 4.7,
  address: '37 Whitehall, London SW1A 2BX, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'AMARO BAR - London', rating: 4.9 },
  { name: 'Upstairs At Rules', rating: 4.7 },
  { name: 'Swift Soho', rating: 4.6 }
]
Added fixed appointment to itinerary: Old Shades at 2025-06-03T20:00:00.000Z
Calculating travel times for 2 places in London
Travel time from Clos Maggiore to Old Shades: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "dinner, drinks in London" for London with ID: 5
[Weather] Fetching weather for 51.51,-0.12
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T18:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 7:00 PM
🔍 [/:city/plan] Place "Clos Maggiore" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T20:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 9:00 PM
🔍 [/:city/plan] Place "Old Shades" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 2 venues
POST /api/london/plan 200 12138ms
📝 [/:city/plan] City-specific plan request for: London
Query: lunch in Covent Garden
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: lunch in Covent Garden
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: lunch in Covent Garden
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"lunch","location":"Covent Garden","searchParameters":{"specificRequirements":[]},"time":"12:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2720,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    lunch in Covent Garden\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"lunch\",\n      \"location\": \"Covent Garden\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"129cffb0-9df4-44ba-b2f5-04522e1f97db","status":"success","timestamp":"2025-06-03T01:57:35.322Z","userQuery":"lunch in Covent Garden"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: lunch at Covent Garden, 12:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "lunch",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "lunch",
    "location": "Covent Garden",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as London time: 12:00 PM (2025-06-03T11:00:00.000Z)
Processed fixed time entry: lunch at Covent Garden, time: 2025-06-03T11:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Covent Garden"
  ],
  "fixedTimes": [
    {
      "location": "Covent Garden",
      "time": "2025-06-03T11:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Covent Garden" with Google Maps Geocoding API
Geocoding search query: "Covent Garden, London, UK, UK"
Validated "Covent Garden" as neighborhood: "Covent Garden"
Validated "Covent Garden" as neighborhood: "Covent Garden"
Validating location: "Covent Garden" with Google Maps Geocoding API
Geocoding search query: "Covent Garden, London, UK, UK"
Validated "Covent Garden" as neighborhood: "Covent Garden"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Covent Garden"
  ],
  "fixedTimes": [
    {
      "location": "Covent Garden",
      "time": "2025-06-03T11:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Covent Garden' ],
  fixedTimes: [
    {
      location: 'Covent Garden',
      time: '2025-06-03T11:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'lunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "12:00" to normalized time "12:00" and Europe/London time: 12:00 PM (2025-06-02 12:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Covent Garden","time":"2025-06-03T11:00:00.000Z","type":"restaurant","searchTerm":"lunch","keywords":[],"minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-03T11:00:00.000Z" to Europe/London time: 2025-06-03 12:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'lunch',
  location: 'Covent Garden',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best restaurants in Covent Garden London
📍 [enhancedPlaceSearch] Found specific area coordinates for "Covent Garden": { lat: 51.5118, lng: -0.1226 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5118,-0.1226 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Covent Garden London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Flat Iron Covent Garden',
  rating: 4.6,
  address: '17-18 Henrietta St, London WC2E 8QH, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Brother Marcus Covent Garden', rating: 4.9 },
  { name: 'Ave Mario', rating: 4.8 },
  { name: 'Blacklock Covent Garden', rating: 4.7 }
]
Added fixed appointment to itinerary: Flat Iron Covent Garden at 2025-06-03T11:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "lunch in London" for London with ID: 6
[Weather] Using cached data for 51.51,-0.12
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T11:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Flat Iron Covent Garden" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 8404ms
📝 [/:city/plan] City-specific plan request for: London
Query: coffee in Shoreditch
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: coffee in Shoreditch
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T13:00:00.000Z',
      type: 'cafe',
      searchTerm: 'coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '2:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "14:00" to normalized time "14:00" and Europe/London time: 2:00 PM (2025-06-02 14:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T13:00:00.000Z","type":"cafe","searchTerm":"coffee","minRating":4,"displayTime":"2:00 PM"}
Parsed ISO timestamp "2025-06-03T13:00:00.000Z" to Europe/London time: 2025-06-03 14:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best coffee shops in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'SO Café London',
  rating: 4.9,
  address: 'Forecourt, Maida Vale Station, Randolph Ave., London W9 1JS, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: "Colonna & Small's", rating: 4.9 },
  { name: 'Prufrock Coffee', rating: 4.6 },
  { name: 'WatchHouse Seven Dials', rating: 4.5 }
]
Place "SO Café London" already exists, returning existing record
Added fixed appointment to itinerary: SO Café London at 2025-06-03T13:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "coffee in London" for London with ID: 7
[Weather] Fetching weather for 51.53,-0.19
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T13:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 2:00 PM
🔍 [/:city/plan] Place "SO Café London" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 8140ms
POST /api/debug/clear-memory 404 1ms
📝 [/:city/plan] City-specific plan request for: London
Query: brunch in Camden
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: brunch in Camden
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: brunch in Camden
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "brunch",
      "location": "Camden",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"brunch","location":"Camden","searchParameters":{"venueType":"restaurant"},"time":"11:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2720,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 11:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    brunch in Camden\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"11:00\",\n      \"activity\": \"brunch\",\n      \"location\": \"Camden\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\",\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"5594f8e2-cd09-49fe-a01a-eb6fe650c082","status":"success","timestamp":"2025-06-03T02:04:34.462Z","userQuery":"brunch in Camden"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "brunch",
      "location": "Camden",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: brunch at Camden, 11:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "brunch",
      "location": "Camden",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "brunch",
      "location": "Camden",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "brunch",
      "location": "Camden",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "11:00",
    "activity": "brunch",
    "location": "Camden",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "venueType": "restaurant"
    }
  }
]
Fixed time entry: Normalized time from "11:00" to "11:00"
Correctly interpreted time "11:00" as London time: 11:00 AM (2025-06-03T10:00:00.000Z)
Processed fixed time entry: brunch at Camden, time: 2025-06-03T10:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Camden"
  ],
  "fixedTimes": [
    {
      "location": "Camden",
      "time": "2025-06-03T10:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "brunch",
      "minRating": 4,
      "displayTime": "11:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Camden" with Google Maps Geocoding API
Geocoding search query: "Camden, London, UK, UK"
Found result in London: Camden Town, London, UK
Validated "Camden" as neighborhood: "Camden Town"
Validated "Camden" as neighborhood: "Camden Town"
Validating location: "Camden" with Google Maps Geocoding API
Geocoding search query: "Camden, London, UK, UK"
Found result in London: Camden Town, London, UK
Validated "Camden" as neighborhood: "Camden Town"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Camden Town"
  ],
  "fixedTimes": [
    {
      "location": "Camden Town",
      "time": "2025-06-03T10:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "brunch",
      "minRating": 4,
      "displayTime": "11:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Camden Town' ],
  fixedTimes: [
    {
      location: 'Camden Town',
      time: '2025-06-03T10:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'brunch',
      keywords: undefined,
      minRating: 4,
      displayTime: '11:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "11:00" to normalized time "11:00" and Europe/London time: 11:00 AM (2025-06-02 11:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Camden Town","time":"2025-06-03T10:00:00.000Z","type":"restaurant","searchTerm":"brunch","minRating":4,"displayTime":"11:00 AM"}
Parsed ISO timestamp "2025-06-03T10:00:00.000Z" to Europe/London time: 2025-06-03 11:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'brunch',
  location: 'Camden Town',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best brunch restaurants in Camden Town London
📍 [enhancedPlaceSearch] Found specific area coordinates for "Camden Town": { lat: 51.5409, lng: -0.1419 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5409,-0.1419 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best brunch restaurants in Camden Town London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: "The Lost Elephant's Kitchen",
  rating: 4.6,
  address: '15 Chalk Farm Rd, London NW1 8AG, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Fabler Bakery Camden', rating: 4.9 },
  { name: 'LUMI Camden', rating: 4.7 },
  { name: 'Brunch & Co.', rating: 4.7 }
]
Added fixed appointment to itinerary: The Lost Elephant's Kitchen at 2025-06-03T10:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "brunch in London" for London with ID: 8
[Weather] Fetching weather for 51.54,-0.15
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T10:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 11:00 AM
🔍 [/:city/plan] Place "The Lost Elephant's Kitchen" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 9137ms
📝 [/:city/plan] City-specific plan request for: London
Query: dinner in Greenwich
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: dinner in Greenwich
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: dinner in Greenwich
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Greenwich",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"dinner","location":"Greenwich","searchParameters":{"specificRequirements":[]},"time":"19:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2626,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 19:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    dinner in Greenwich\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"dinner\",\n      \"location\": \"Greenwich\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"85465395-f9e9-449e-9c53-2a304f98e216","status":"success","timestamp":"2025-06-03T02:06:00.031Z","userQuery":"dinner in Greenwich"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Greenwich",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: dinner at Greenwich, 19:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Greenwich",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Greenwich",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "dinner",
      "location": "Greenwich",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "19:00",
    "activity": "dinner",
    "location": "Greenwich",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as London time: 7:00 PM (2025-06-03T18:00:00.000Z)
Processed fixed time entry: dinner at Greenwich, time: 2025-06-03T18:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Greenwich"
  ],
  "fixedTimes": [
    {
      "location": "Greenwich",
      "time": "2025-06-03T18:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Greenwich" with Google Maps Geocoding API
Geocoding search query: "Greenwich, London, UK, UK"
Validated "Greenwich" as neighborhood: "Greenwich"
Validated "Greenwich" as neighborhood: "Greenwich"
Validating location: "Greenwich" with Google Maps Geocoding API
Geocoding search query: "Greenwich, London, UK, UK"
Validated "Greenwich" as neighborhood: "Greenwich"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greenwich"
  ],
  "fixedTimes": [
    {
      "location": "Greenwich",
      "time": "2025-06-03T18:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greenwich' ],
  fixedTimes: [
    {
      location: 'Greenwich',
      time: '2025-06-03T18:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'dinner',
      keywords: [],
      minRating: 4,
      displayTime: '7:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "19:00" to normalized time "19:00" and Europe/London time: 7:00 PM (2025-06-03 19:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greenwich","time":"2025-06-03T18:00:00.000Z","type":"restaurant","searchTerm":"dinner","keywords":[],"minRating":4,"displayTime":"7:00 PM"}
Parsed ISO timestamp "2025-06-03T18:00:00.000Z" to Europe/London time: 2025-06-03 19:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'dinner',
  location: 'Greenwich',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best dinner restaurants in Greenwich London
📍 [enhancedPlaceSearch] Found specific area coordinates for "Greenwich": { lat: 51.4816, lng: -0.0046 }
🎯 [enhancedPlaceSearch] Using location bias: 51.4816,-0.0046 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best dinner restaurants in Greenwich London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Lokanta Bar and Grill',
  rating: 4.5,
  address: '11 - 13 Greenwich Church St, London SE10 9BJ, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: "Bill's Greenwich Restaurant", rating: 4.6 },
  { name: 'Banana Tree Greenwich', rating: 4.6 },
  { name: 'Nine Lounge', rating: 4.6 }
]
Added fixed appointment to itinerary: Lokanta Bar and Grill at 2025-06-03T18:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "dinner in London" for London with ID: 9
[Weather] Fetching weather for 51.48,-0.01
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T18:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 7:00 PM
🔍 [/:city/plan] Place "Lokanta Bar and Grill" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 8353ms
📝 [/:city/plan] City-specific plan request for: London
Query: pizza at exactly 15:30 today
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: pizza at exactly 15:30 today
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: pizza at exactly 15:30 today
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "15:30",
      "activity": "Eat pizza",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Eat pizza","location":"Central London","searchParameters":{"cuisine":"Pizza","priceLevel":"moderate","venueType":"restaurant"},"time":"15:30","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2835,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 15:30\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    pizza at exactly 15:30 today\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"15:30\",\n      \"activity\": \"Eat pizza\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\",\n        \"cuisine\": \"Pizza\",\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"b5125b75-565f-4750-8b7a-0474ac0f74fd","status":"success","timestamp":"2025-06-03T02:06:49.283Z","userQuery":"pizza at exactly 15:30 today"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "15:30",
      "activity": "Eat pizza",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Eat pizza at Central London, 15:30
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "15:30",
      "activity": "Eat pizza",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "15:30",
      "activity": "Eat pizza",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "15:30",
      "activity": "Eat pizza",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "15:30",
    "activity": "Eat pizza",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "Pizza",
      "priceLevel": "moderate",
      "venueType": "restaurant"
    }
  }
]
Fixed time entry: Normalized time from "15:30" to "15:30"
Correctly interpreted time "15:30" as London time: 3:30 PM (2025-06-03T14:30:00.000Z)
Processed fixed time entry: Eat pizza at Central London, time: 2025-06-03T14:30:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-03T14:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Eat pizza",
      "minRating": 4,
      "displayTime": "3:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-03T14:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Eat pizza",
      "minRating": 4,
      "displayTime": "3:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-03T14:30:00.000Z',
      type: 'restaurant',
      searchTerm: 'Eat pizza',
      keywords: undefined,
      minRating: 4,
      displayTime: '3:30 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "15:30" to normalized time "15:30" and Europe/London time: 3:30 PM (2025-06-02 15:30:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-03T14:30:00.000Z","type":"restaurant","searchTerm":"Eat pizza","minRating":4,"displayTime":"3:30 PM"}
Parsed ISO timestamp "2025-06-03T14:30:00.000Z" to Europe/London time: 2025-06-03 15:30:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Eat pizza',
  location: 'Greater London',
  keywords: [],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best pizza restaurants in Greater London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best pizza restaurants in Greater London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Japes Greenwich',
  rating: 4.8,
  address: '15 Nelson Rd., London SE10 9JB, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Vasiniko', rating: 4.9 },
  { name: 'Pizza Pilgrims', rating: 4.8 },
  { name: 'Japes Soho', rating: 4.7 }
]
Added fixed appointment to itinerary: Japes Greenwich at 2025-06-03T14:30:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Eat pizza in London" for London with ID: 10
[Weather] Using cached data for 51.48,-0.01
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T14:30:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 3:30 PM
🔍 [/:city/plan] Place "Japes Greenwich" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 6235ms
📝 [/:city/plan] City-specific plan request for: London
Query: sushi in Canary Wharf
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: sushi in Canary Wharf
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: sushi in Canary Wharf
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Canary Wharf",
      "venuePreference": "sushi restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "sushi",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"dinner","location":"Canary Wharf","searchParameters":{"cuisine":"sushi","venueType":"restaurant"},"time":"20:00","venuePreference":"sushi restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":2306,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 20:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    sushi in Canary Wharf\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"20:00\",\n      \"activity\": \"dinner\",\n      \"location\": \"Canary Wharf\",\n      \"venuePreference\": \"sushi restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\",\n        \"cuisine\": \"sushi\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {},\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"65c472cd-926e-4ed1-9277-ca44f30b6023","status":"success","timestamp":"2025-06-03T02:07:49.052Z","userQuery":"sushi in Canary Wharf"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Canary Wharf",
      "venuePreference": "sushi restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "sushi",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: dinner at Canary Wharf, 20:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Canary Wharf",
      "venuePreference": "sushi restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "sushi",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Canary Wharf",
      "venuePreference": "sushi restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "sushi",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Canary Wharf",
      "venuePreference": "sushi restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "sushi",
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "20:00",
    "activity": "dinner",
    "location": "Canary Wharf",
    "venuePreference": "sushi restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "sushi",
      "venueType": "restaurant"
    }
  }
]
Fixed time entry: Normalized time from "20:00" to "20:00"
Correctly interpreted time "20:00" as London time: 8:00 PM (2025-06-03T19:00:00.000Z)
Found venue preference: "sushi restaurant" for activity: dinner
Processed fixed time entry: dinner at Canary Wharf, time: 2025-06-03T19:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Canary Wharf"
  ],
  "fixedTimes": [
    {
      "location": "Canary Wharf",
      "time": "2025-06-03T19:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "minRating": 4,
      "displayTime": "8:00 PM",
      "searchPreference": "sushi restaurant"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Canary Wharf"
  ],
  "fixedTimes": [
    {
      "location": "Canary Wharf",
      "time": "2025-06-03T19:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "minRating": 4,
      "displayTime": "8:00 PM",
      "searchPreference": "sushi restaurant"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Canary Wharf' ],
  fixedTimes: [
    {
      location: 'Canary Wharf',
      time: '2025-06-03T19:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'dinner',
      keywords: undefined,
      minRating: 4,
      displayTime: '8:00 PM',
      searchPreference: 'sushi restaurant'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "20:00" to normalized time "20:00" and Europe/London time: 8:00 PM (2025-06-03 20:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Canary Wharf","time":"2025-06-03T19:00:00.000Z","type":"restaurant","searchTerm":"dinner","minRating":4,"displayTime":"8:00 PM","searchPreference":"sushi restaurant"}
Parsed ISO timestamp "2025-06-03T19:00:00.000Z" to Europe/London time: 2025-06-03 20:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'dinner',
  location: 'Canary Wharf',
  keywords: [ 'sushi restaurant' ],
  type: 'restaurant',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: best sushi restaurants in Canary Wharf
📍 [enhancedPlaceSearch] Found specific area coordinates for "Canary Wharf": { lat: 51.5054, lng: -0.0235 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5054,-0.0235 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best sushi restaurants in Canary Wharf
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Sushi Co - Canary Wharf',
  rating: 4.4,
  address: '1 Westward Parade, Pepper St, London E14 9DZ, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'MYMA Japanese Restaurant & Cocktails', rating: 4.9 },
  { name: "Sticks'n'Sushi Canary Wharf", rating: 4.5 },
  { name: 'ROKA Canary Wharf', rating: 4.4 }
]
Added fixed appointment to itinerary: The Sushi Co - Canary Wharf at 2025-06-03T19:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "dinner in London" for London with ID: 11
[Weather] Fetching weather for 51.5,-0.01
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T19:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 8:00 PM
🔍 [/:city/plan] Place "The Sushi Co - Canary Wharf" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 9107ms
📝 [/:city/plan] City-specific plan request for: London
Query: cocktails in Soho
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: cocktails in Soho
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: cocktails in Soho
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "21:00",
      "activity": "cocktails",
      "location": "Soho",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "bar",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"cocktails","location":"Soho","searchParameters":{"priceLevel":"moderate","specificRequirements":[],"venueType":"bar"},"time":"21:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2647,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - Examples that MUST be captured:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → Skip venue search BUT preserve time/location for context\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 21:00\n    Date: 2025-06-03\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    cocktails in Soho\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"21:00\",\n      \"activity\": \"cocktails\",\n      \"location\": \"Soho\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"bar\",\n        \"specificRequirements\": [],\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"616ba445-f4fb-4c8b-84bc-bc012fc37e85","status":"success","timestamp":"2025-06-03T02:08:42.973Z","userQuery":"cocktails in Soho"}
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "21:00",
      "activity": "cocktails",
      "location": "Soho",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "bar",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: cocktails at Soho, 21:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "21:00",
      "activity": "cocktails",
      "location": "Soho",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "bar",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "21:00",
      "activity": "cocktails",
      "location": "Soho",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "bar",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "21:00",
      "activity": "cocktails",
      "location": "Soho",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "bar",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "21:00",
    "activity": "cocktails",
    "location": "Soho",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "venueType": "bar",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "21:00" to "21:00"
Correctly interpreted time "21:00" as London time: 9:00 PM (2025-06-03T20:00:00.000Z)
Processed fixed time entry: cocktails at Soho, time: 2025-06-03T20:00:00.000Z, type: bar
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Soho"
  ],
  "fixedTimes": [
    {
      "location": "Soho",
      "time": "2025-06-03T20:00:00.000Z",
      "type": "bar",
      "searchTerm": "cocktails",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Soho" with Google Maps Geocoding API
Geocoding search query: "Soho, London, UK, UK"
Validated "Soho" as neighborhood: "Soho"
Validated "Soho" as neighborhood: "Soho"
Validating location: "Soho" with Google Maps Geocoding API
Geocoding search query: "Soho, London, UK, UK"
Validated "Soho" as neighborhood: "Soho"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Soho"
  ],
  "fixedTimes": [
    {
      "location": "Soho",
      "time": "2025-06-03T20:00:00.000Z",
      "type": "bar",
      "searchTerm": "cocktails",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Soho' ],
  fixedTimes: [
    {
      location: 'Soho',
      time: '2025-06-03T20:00:00.000Z',
      type: 'bar',
      searchTerm: 'cocktails',
      keywords: [],
      minRating: 4,
      displayTime: '9:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "21:00" to normalized time "21:00" and Europe/London time: 9:00 PM (2025-06-03 21:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Soho","time":"2025-06-03T20:00:00.000Z","type":"bar","searchTerm":"cocktails","keywords":[],"minRating":4,"displayTime":"9:00 PM"}
Parsed ISO timestamp "2025-06-03T20:00:00.000Z" to Europe/London time: 2025-06-03 21:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'cocktails',
  location: 'Soho',
  keywords: [],
  type: 'bar',
  preferences: undefined,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🤖 [Gemini] Enhanced query: "cocktail bars in Soho London"
📍 [enhancedPlaceSearch] Found specific area coordinates for "Soho": { lat: 51.5136, lng: -0.1371 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5136,-0.1371 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "cocktail bars in Soho London"
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Little Scarlet Door',
  rating: 4.5,
  address: '12-13 Greek St, London W1D 4DL, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Casa Soho', rating: 4.9 },
  { name: 'The Little Violet Door', rating: 4.8 },
  { name: 'Bar Lina Soho', rating: 4.6 }
]
Added fixed appointment to itinerary: The Little Scarlet Door at 2025-06-03T20:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: NeonDbError: column "title" of relation "itineraries" does not exist
    at execute (file:///Users/carlos/LondonDayPlanner-1/node_modules/@neondatabase/serverless/index.mjs:1556:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonHttpPreparedQuery.execute (/Users/carlos/LondonDayPlanner-1/node_modules/src/neon-http/session.ts:68:18)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:100:27)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:512:22)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:32)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:314:25) {
  severity: 'ERROR',
  code: '42703',
  detail: undefined,
  hint: undefined,
  position: '34',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_target.c',
  line: '1066',
  routine: 'checkInsertTargets',
  sourceError: undefined
}
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "cocktails in London" for London with ID: 12
[Weather] Fetching weather for 51.51,-0.13
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-03T20:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 9:00 PM
🔍 [/:city/plan] Place "The Little Scarlet Door" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/:city/plan] Sending response with 1 venues
POST /api/london/plan 200 6179ms
SIGTERM received, shutting down gracefully...
Server closed
