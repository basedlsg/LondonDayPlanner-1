
> rest-express@1.0.0 dev
> NODE_ENV=development tsx server/index.ts

🔧 [config.ts] Creating new Config instance.
🔧 [config.ts] Config constructor starting...
🔧 [config.ts] process.env.GOOGLE_PLACES_API_KEY at constructor start: NOT SET
🔧 [config.ts] process.env.GEMINI_API_KEY at constructor start: NOT SET
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] AI_PROCESSING feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] USE_GEMINI feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] WEATHER_AWARE feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] PLACES_API feature flag DISABLED (enabled: true, keysMet: false).
🔧 [config.ts] initializeFeatureFlags() finished.
🔧 [config.ts] Config constructor finished.
[CityRegistry] Registered city: London (slug: london)
[CityRegistry] Registered city: New York City (slug: nyc)
[CityRegistry] Registered city: Boston (slug: boston)
[CityRegistry] Registered city: Austin (slug: austin)
[CityRegistry] City configurations loading process completed. Registry size: 4
[CityRegistry] Registered slugs: london, nyc, boston, austin
AI_PROCESSING feature flag status: false
🔧 Loading environment variables...
📄 .env file path: /Users/carlos/LondonDayPlanner-1/.env
📄 .env file exists: true
✅ Environment variables loaded by dotenv (keys found): [
  'DATABASE_URL',
  'GOOGLE_PLACES_API_KEY',
  'GEMINI_API_KEY',
  'WEATHER_API_KEY'
]
🔍 Environment check (process.env):
   DATABASE_URL present: true
   GOOGLE_PLACES_API_KEY present: true
   GOOGLE_PLACES_API_KEY length: 39
   GEMINI_API_KEY present: true
🔧 Initializing application configuration...
🔄 [config.ts] Config.recheckEnvironment() called. Forcing reload of API keys and features...
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: SET (length: 32)
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: SET (length: 32)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] AI_PROCESSING feature flag ENABLED.
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] USE_GEMINI feature flag ENABLED.
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] WEATHER_AWARE feature flag ENABLED.
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] PLACES_API feature flag ENABLED.
🔧 [config.ts] initializeFeatureFlags() finished.
🔄 [config.ts] Environment recheck complete. Logging new status:
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
🔧 [config.ts] Config initialize() called.
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
⚠️  SESSION_SECRET not set, using fallback. SET THIS FOR PRODUCTION!
2025-06-05 06:29:05 WARN [SESSION] No SESSION_SECRET found, using development fallback {}
2025-06-05 06:29:05 INFO [SESSION] Session configuration created {
  "isProduction": false,
  "hasSecret": true,
  "cookieSecure": false,
  "sameSite": "lax"
}
🗄️  Testing database connection...
🗄️  Initializing database instance with Neon driver...
✅ Database instance initialized and tested successfully with Neon.
✅ Database connection successful
🔌 WebSocket service initialized
🚀 Server running on http://localhost:5001
🔧 Environment: development
🗄️  Database: Connected
🔑 Google Places API Key: Configured
🔑 Gemini API Key: Configured
🔌 WebSocket: Available at ws://localhost:5001/ws
📝 [/api/plan] Generic plan request received
Query: Coffee at 10 AM then lunch in SoHo
Raw request body: { query: 'Coffee at 10 AM then lunch in SoHo', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: {
  level: 'moderate',
  score: 28,
  estimatedTime: 4,
  factors: [
    'Some time complexity',
    'Several activities',
    'Sequential planning required'
  ]
}
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee at 10 AM then lunch in SoHo
[NLP] Processing query with context for city: New York City
🔄 [nlp-fixed] Attempting lazy AI initialization for new Gemini processor...
🤖 [nlp-fixed] Checking AI_PROCESSING feature flag status: true
🔑 [nlp-fixed] GEMINI_API_KEY validation: true
✅ [nlp-fixed] Initializing Gemini API with valid API key
✅ [nlp-fixed] Gemini API successfully initialized
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee at 10 AM then lunch in SoHo
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Midtown","searchParameters":{"venueType":"cafe"},"time":"10:00","venuePreference":"cafe","venueRequirements":[]},{"activity":"Lunch","location":"SoHo","searchParameters":{"venueType":"restaurant"},"time":"12:00","venuePreference":"restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":3612,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    \n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee at 10 AM then lunch in SoHo\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Midtown\",\n      \"venuePreference\": \"cafe\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\"\n      }\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"SoHo\",\n      \"venuePreference\": \"restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"1ec8b27a-7bd7-4bc2-9bd7-18524dcc8be9","status":"success","timestamp":"2025-06-05T13:29:35.517Z","userQuery":"Coffee at 10 AM then lunch in SoHo"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Midtown, 10:00
Added fixed time entry: Lunch at SoHo, 12:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Midtown",
    "venuePreference": "cafe",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "cafe",
      "priceLevel": "moderate"
    }
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "SoHo",
    "venuePreference": "restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "restaurant",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as America/New_York time: 10:00 AM (2025-06-05T14:00:00.000Z)
Correctly interpreted time "10:00" as New York City time: 10:00 AM (2025-06-05T14:00:00.000Z)
Found venue preference: "cafe" for activity: Coffee
Processed fixed time entry: Coffee at Midtown, time: 2025-06-05T14:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as America/New_York time: 12:00 PM (2025-06-05T16:00:00.000Z)
Correctly interpreted time "12:00" as New York City time: 12:00 PM (2025-06-05T16:00:00.000Z)
Found venue preference: "restaurant" for activity: Lunch
Processed fixed time entry: Lunch at SoHo, time: 2025-06-05T16:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    },
    {
      "location": "SoHo",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    },
    {
      "location": "SoHo",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    },
    {
      location: 'SoHo',
      time: '2025-06-05T16:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: undefined,
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: 'restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Midtown Manhattan',
  keywords: [ 'cafe' ],
  type: 'cafe',
  preferences: { venuePreference: 'cafe' },
  scheduledDateTime: 2025-06-05T14:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best cafe in Midtown Manhattan
📍 [enhancedPlaceSearch] Found specific area coordinates for "Midtown Manhattan": { lat: 40.7549, lng: -73.984 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7549,-73.984 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best cafe in Midtown Manhattan
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T14:00:00.000Z
🕒 [Operating Hours] Validating hours for Little Collins at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Little Collins: Currently open
🕒 [Operating Hours] Validating hours for Pavé at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Pavé: Currently open
🕒 [Operating Hours] Validating hours for 787 Coffee Co. at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] 787 Coffee Co.: Currently open
🕒 [Operating Hours] Validating hours for Bibble & Sip at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Bibble & Sip: Currently open
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: '787 Coffee Co.',
  rating: 4.9,
  address: '251 W 30th St, New York, NY 10001, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Pavé', rating: 4.7 },
  { name: 'Little Collins', rating: 4.6 },
  { name: 'Bibble & Sip', rating: 4.5 }
]
🔍 [SERVICE] Place details for "787 Coffee Co.": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "251 W 30th St, New York, NY 10001, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7493629,\n' +
    '      "lng": -73.9942691\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75066732989272,\n' +
    '        "lng": -73.99294962010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.74796767010728,\n' +
    '        "lng": -73.99564927989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "787 Coffee Co.",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1536,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105795084623614215544\\">787 Coffee Co.</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTa7x0EK1uSM7ePdTAMzN77AIEe2tzf_jYZC7CzDkxOq0XJpp2a9cnZRtSHoWOteg2oi4ailXoOD2EwBACx8GkE8rKhzH4PIXDq21sI6vriI3MK57wXYctF60EkWagFph3agav83DKZNBV5gPC0WLzFqLH0U2oKoRSDbRJzd_3gvkoivmPlw2xtZbXsXKtquvh3dKgyNMgKzIq7ctDpDTko4kcvsCM8lr6tpHJ8HKekEJ7Ie5c-pzdfcwZA9uDsNg0203hOzZsV5iG-HFgfgLXcIMCHf9M8mAxM4WAK0_5lWaaqy8s",\n' +
    '      "width": 2048\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ41W9caFZwokRVJOfTKNepZI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2X4+P7 New York",\n' +
    '    "global_code": "87G8P2X4+P7"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJ41W9caFZwokRVJOfTKNepZI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 3239\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1318
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "787 Coffee Co." with details
🔍 [SERVICE] Stored place "787 Coffee Co." details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: 787 Coffee Co. at 2025-06-05T14:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T16:00:00.000Z","type":"restaurant","searchTerm":"Lunch","minRating":4,"displayTime":"12:00 PM","searchPreference":"restaurant"}
Parsed ISO timestamp "2025-06-05T16:00:00.000Z" to America/New_York time: 2025-06-05 12:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'SoHo',
  keywords: [ 'restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'restaurant' },
  scheduledDateTime: 2025-06-05T16:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best restaurants in SoHo
📍 [enhancedPlaceSearch] Found specific area coordinates for "SoHo": { lat: 40.722, lng: -74.0002 }
🎯 [enhancedPlaceSearch] Using location bias: 40.722,-74.0002 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in SoHo
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T16:00:00.000Z
🕒 [Operating Hours] Validating hours for La Pecora Bianca SoHo at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for La Pecora Bianca SoHo
✅ [Operating Hours] La Pecora Bianca SoHo: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Balthazar at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Balthazar
✅ [Operating Hours] Balthazar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Jack's Wife Freda at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Jack's Wife Freda
✅ [Operating Hours] Jack's Wife Freda: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Lindens at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Lindens
✅ [Operating Hours] Lindens: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'La Pecora Bianca SoHo',
  rating: 4.8,
  address: '54 Prince St, New York, NY 10012, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Lindens', rating: 4.8 },
  { name: 'Balthazar', rating: 4.4 },
  { name: "Jack's Wife Freda", rating: 4.4 }
]
🔍 [SERVICE] Place details for "La Pecora Bianca SoHo": {
  hasRating: true,
  rating: 4.8,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "54 Prince St, New York, NY 10012, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.72346,\n' +
    '      "lng": -73.9963118\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72487267989272,\n' +
    '        "lng": -73.99504087010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72217302010727,\n' +
    '        "lng": -73.99774052989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "La Pecora Bianca SoHo",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 2724,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111444671146808251214\\">Eric Finkelstein</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRD6V0oH2dYYs5STGEP6w1xnhnAZFjmh0bCgi9O7CofYs0Nv-9Wn0rqKzlqdlcZva9_GJbMgeENkzaP6dvsu7OTnSBzrF6xK5IF9CxKOSsOrl_1pMp6KxHMr6XQMtMY7001UidLeYR8txJFZwKmsfnQlq9KqrTzqbAL-cTnuBU6ZhNKZgpgCL0Mq9qJaCK8WTR7WEZQFETpQh97HAXBR794ll3OYUb2DR9wzK26yFq61im1wUjT1PC-cKARwaB88bDJQBeqED-FVROHKBZAyYkfqHTt-kJQ4dmJfWKUcHeEIbxc0Drv2eS3tklV7z80VynIQvFFyChKU0-VthbgBdaMiYMNpa4tPId0TWyQKz8e0iXbh81LWV7rrpzaYU7HNaTZ3XB4rtU5KhPci0XcvuJ-PjJKQR0kZbqXA1jNqlasNLDVgQV9GBrDI5UVeIZfKhLcDWibd3iXQ82QF7YqKkWF5s4n1XxNamafYh8tjNqGgttuHvV69-4o3tQAoNafme6Mk585_6iJ3V1lbASsEo6Svb-Q19RxrCiybUynIkCFNPzvSwJqOjw1QNbpgzgjbCU2Baa1p-_Bew",\n' +
    '      "width": 4000\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfe6ZYKFZwokR_mHm7GNoAxc",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2F3+9F New York",\n' +
    '    "global_code": "87G8P2F3+9F"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.8,\n' +
    '  "reference": "ChIJfe6ZYKFZwokR_mHm7GNoAxc",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2396\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1634
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "La Pecora Bianca SoHo" with details
🔍 [SERVICE] Stored place "La Pecora Bianca SoHo" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: La Pecora Bianca SoHo at 2025-06-05T16:00:00.000Z
Calculating travel times for 2 places in New York City
Travel time from 787 Coffee Co. to La Pecora Bianca SoHo: 9 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee, Lunch in New York City" for New York City with ID: 1
[Weather] Fetching weather for 40.75,-73.99
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "787 Coffee Co." details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "La Pecora Bianca SoHo" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 06:29:38 INFO [API] POST /api/plan 200 (6542ms) {
  "statusCode": 200,
  "duration": 6542
}
📝 [/api/plan] Generic plan request received
Query: Coffee at 10 AM then lunch in SoHo
Raw request body: { query: 'Coffee at 10 AM then lunch in SoHo', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: {
  level: 'moderate',
  score: 28,
  estimatedTime: 4,
  factors: [
    'Some time complexity',
    'Several activities',
    'Sequential planning required'
  ]
}
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee at 10 AM then lunch in SoHo
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    },
    {
      location: 'SoHo',
      time: '2025-06-05T16:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: undefined,
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: 'restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [SERVICE] Place details for "787 Coffee Co.": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "251 W 30th St, New York, NY 10001, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7493629,\n' +
    '      "lng": -73.9942691\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75066732989272,\n' +
    '        "lng": -73.99294962010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.74796767010728,\n' +
    '        "lng": -73.99564927989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "787 Coffee Co.",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1536,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105795084623614215544\\">787 Coffee Co.</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTa7x0EK1uSM7ePdTAMzN77AIEe2tzf_jYZC7CzDkxOq0XJpp2a9cnZRtSHoWOteg2oi4ailXoOD2EwBACx8GkE8rKhzH4PIXDq21sI6vriI3MK57wXYctF60EkWagFph3agav83DKZNBV5gPC0WLzFqLH0U2oKoRSDbRJzd_3gvkoivmPlw2xtZbXsXKtquvh3dKgyNMgKzIq7ctDpDTko4kcvsCM8lr6tpHJ8HKekEJ7Ie5c-pzdfcwZA9uDsNg0203hOzZsV5iG-HFgfgLXcIMCHf9M8mAxM4WAK0_5lWaaqy8s",\n' +
    '      "width": 2048\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ41W9caFZwokRVJOfTKNepZI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2X4+P7 New York",\n' +
    '    "global_code": "87G8P2X4+P7"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJ41W9caFZwokRVJOfTKNepZI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 3239\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1318
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "787 Coffee Co." details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "787 Coffee Co." already exists, returning existing record
🔍 [SERVICE] Stored place "787 Coffee Co." details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: 787 Coffee Co. at 2025-06-05T14:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T16:00:00.000Z","type":"restaurant","searchTerm":"Lunch","minRating":4,"displayTime":"12:00 PM","searchPreference":"restaurant"}
Parsed ISO timestamp "2025-06-05T16:00:00.000Z" to America/New_York time: 2025-06-05 12:00:00 EDT
🔍 [SERVICE] Place details for "La Pecora Bianca SoHo": {
  hasRating: true,
  rating: 4.8,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "54 Prince St, New York, NY 10012, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.72346,\n' +
    '      "lng": -73.9963118\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72487267989272,\n' +
    '        "lng": -73.99504087010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72217302010727,\n' +
    '        "lng": -73.99774052989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "La Pecora Bianca SoHo",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 2724,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111444671146808251214\\">Eric Finkelstein</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRD6V0oH2dYYs5STGEP6w1xnhnAZFjmh0bCgi9O7CofYs0Nv-9Wn0rqKzlqdlcZva9_GJbMgeENkzaP6dvsu7OTnSBzrF6xK5IF9CxKOSsOrl_1pMp6KxHMr6XQMtMY7001UidLeYR8txJFZwKmsfnQlq9KqrTzqbAL-cTnuBU6ZhNKZgpgCL0Mq9qJaCK8WTR7WEZQFETpQh97HAXBR794ll3OYUb2DR9wzK26yFq61im1wUjT1PC-cKARwaB88bDJQBeqED-FVROHKBZAyYkfqHTt-kJQ4dmJfWKUcHeEIbxc0Drv2eS3tklV7z80VynIQvFFyChKU0-VthbgBdaMiYMNpa4tPId0TWyQKz8e0iXbh81LWV7rrpzaYU7HNaTZ3XB4rtU5KhPci0XcvuJ-PjJKQR0kZbqXA1jNqlasNLDVgQV9GBrDI5UVeIZfKhLcDWibd3iXQ82QF7YqKkWF5s4n1XxNamafYh8tjNqGgttuHvV69-4o3tQAoNafme6Mk585_6iJ3V1lbASsEo6Svb-Q19RxrCiybUynIkCFNPzvSwJqOjw1QNbpgzgjbCU2Baa1p-_Bew",\n' +
    '      "width": 4000\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfe6ZYKFZwokR_mHm7GNoAxc",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2F3+9F New York",\n' +
    '    "global_code": "87G8P2F3+9F"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.8,\n' +
    '  "reference": "ChIJfe6ZYKFZwokR_mHm7GNoAxc",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2396\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1634
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "La Pecora Bianca SoHo" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Place "La Pecora Bianca SoHo" already exists, returning existing record
🔍 [SERVICE] Stored place "La Pecora Bianca SoHo" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: La Pecora Bianca SoHo at 2025-06-05T16:00:00.000Z
Calculating travel times for 2 places in New York City
Travel time from 787 Coffee Co. to La Pecora Bianca SoHo: 9 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee, Lunch in New York City" for New York City with ID: 2
[Weather] Using cached data for 40.75,-73.99
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "787 Coffee Co." details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "La Pecora Bianca SoHo" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 06:30:14 INFO [API] POST /api/plan 200 (3ms) {
  "statusCode": 200,
  "duration": 3
}
📝 [/api/plan] Generic plan request received
Query: I need a quiet place to work from 10 AM to 3 PM with good wifi and outdoor seating, then lunch somewhere nice for our group of 4 people with vegetarian options, then a meeting at 5 PM in Midtown, followed by dinner at an upscale rooftop restaurant with a view
Raw request body: {
  query: 'I need a quiet place to work from 10 AM to 3 PM with good wifi and outdoor seating, then lunch somewhere nice for our group of 4 people with vegetarian options, then a meeting at 5 PM in Midtown, followed by dinner at an upscale rooftop restaurant with a view',
  citySlug: 'nyc'
}
🔍 [Complexity] Query analysis: {
  level: 'very_complex',
  score: 72,
  estimatedTime: 10,
  factors: [
    'Multiple time references',
    'Multiple activities',
    'Sequential planning required',
    'Many specific requirements',
    'Group planning',
    'Very detailed query'
  ]
}
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: I need a quiet place to work from 10 AM to 3 PM with good wifi and outdoor seating, then lunch somewhere nice for our group of 4 people with vegetarian options, then a meeting at 5 PM in Midtown, followed by dinner at an upscale rooftop restaurant with a view
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: I need a quiet place to work from 10 AM to 3 PM with good wifi and outdoor seating, then lunch somewhere nice for our group of 4 people with vegetarian options, then a meeting at 5 PM in Midtown, followed by dinner at an upscale rooftop restaurant with a view
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [
    {
      "startTime": "10:00",
      "endTime": "15:00",
      "activity": "work session",
      "location": "Midtown",
      "venueRequirements": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "searchParameters": {
        "venueType": "cafe",
        "specificRequirements": [
          "quiet",
          "wifi",
          "outdoor seating"
        ],
        "ambience": "quiet"
      }
    }
  ],
  "fixedAppointments": [
    {
      "time": "17:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Midtown",
      "bufferBefore": 30,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "15:00",
      "activity": "lunch",
      "location": "Midtown",
      "venueRequirements": [
        "vegetarian options"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant",
        "specificRequirements": [
          "vegetarian options"
        ]
      }
    },
    {
      "time": "19:45",
      "activity": "dinner",
      "location": "Midtown",
      "venuePreference": "upscale rooftop restaurant",
      "venueRequirements": [
        "with a view"
      ],
      "searchParameters": {
        "priceLevel": "expensive",
        "venueType": "restaurant",
        "specificRequirements": [
          "view",
          "rooftop"
        ]
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 4,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[{"activity":"meeting","bufferBefore":30,"duration":60,"isFixed":true,"location":"Midtown","time":"17:00"}],"fixedTimeEntries":[{"activity":"lunch","location":"Midtown","searchParameters":{"priceLevel":"moderate","specificRequirements":["vegetarian options"],"venueType":"restaurant"},"time":"15:00","venueRequirements":["vegetarian options"]},{"activity":"dinner","location":"Midtown","searchParameters":{"priceLevel":"expensive","specificRequirements":["view","rooftop"],"venueType":"restaurant"},"time":"19:45","venuePreference":"upscale rooftop restaurant","venueRequirements":["with a view"]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[{"activity":"work session","endTime":"15:00","location":"Midtown","searchParameters":{"ambience":"quiet","specificRequirements":["quiet","wifi","outdoor seating"],"venueType":"cafe"},"startTime":"10:00","venueRequirements":["quiet","good wifi","outdoor seating"]}],"travelGroup":{"adults":4,"children":0}},"processingTimeMs":7747,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    \n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    I need a quiet place to work from 10 AM to 3 PM with good wifi and outdoor seating, then lunch somewhere nice for our group of 4 people with vegetarian options, then a meeting at 5 PM in Midtown, followed by dinner at an upscale rooftop restaurant with a view\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [\n    {\n      \"startTime\": \"10:00\",\n      \"endTime\": \"15:00\",\n      \"activity\": \"work session\",\n      \"location\": \"Midtown\",\n      \"venueRequirements\": [\n        \"quiet\",\n        \"good wifi\",\n        \"outdoor seating\"\n      ],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\",\n        \"specificRequirements\": [\n          \"quiet\",\n          \"wifi\",\n          \"outdoor seating\"\n        ],\n        \"ambience\": \"quiet\"\n      }\n    }\n  ],\n  \"fixedAppointments\": [\n    {\n      \"time\": \"17:00\",\n      \"duration\": 60,\n      \"activity\": \"meeting\",\n      \"location\": \"Midtown\",\n      \"bufferBefore\": 30,\n      \"isFixed\": true\n    }\n  ],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"15:00\",\n      \"activity\": \"lunch\",\n      \"location\": \"Midtown\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [\n        \"vegetarian options\"\n      ],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\",\n        \"specificRequirements\": [\n          \"vegetarian options\"\n        ],\n        \"cuisine\": null,\n        \"priceLevel\": \"moderate\"\n      }\n    },\n    {\n      \"time\": \"19:45\", \n      \"activity\": \"dinner\",\n      \"location\": \"Midtown\",\n      \"venuePreference\": \"upscale rooftop restaurant\",\n      \"venueRequirements\": [\n        \"with a view\"\n      ],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\",\n        \"specificRequirements\": [\n          \"view\", \"rooftop\"\n        ],\n        \"cuisine\": null,\n        \"priceLevel\": \"expensive\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 4,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"7f5e21e6-82ff-4262-86c8-5e14e54a51c4","status":"success","timestamp":"2025-06-05T13:30:45.543Z","userQuery":"I need a quiet place to work from 10 AM to 3 PM with good wifi and outdoor seating, then lunch somewhere nice for our group of 4 people with vegetarian options, then a meeting at 5 PM in Midtown, followed by dinner at an upscale rooftop restaurant with a view"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Processing Gemini response with raw data: {
  "timeBlocks": [
    {
      "startTime": "10:00",
      "endTime": "15:00",
      "activity": "work session",
      "location": "Midtown",
      "venueRequirements": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "searchParameters": {
        "venueType": "cafe",
        "specificRequirements": [
          "quiet",
          "wifi",
          "outdoor seating"
        ],
        "ambience": "quiet"
      }
    }
  ],
  "fixedAppointments": [
    {
      "time": "17:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Midtown",
      "bufferBefore": 30,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "15:00",
      "activity": "lunch",
      "location": "Midtown",
      "venueRequirements": [
        "vegetarian options"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant",
        "specificRequirements": [
          "vegetarian options"
        ]
      }
    },
    {
      "time": "19:45",
      "activity": "dinner",
      "location": "Midtown",
      "venuePreference": "upscale rooftop restaurant",
      "venueRequirements": [
        "with a view"
      ],
      "searchParameters": {
        "priceLevel": "expensive",
        "venueType": "restaurant",
        "specificRequirements": [
          "view",
          "rooftop"
        ]
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 4,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: lunch at Midtown, 15:00
Added fixed time entry: dinner at Midtown, 19:45
Final processed result: {
  "timeBlocks": [
    {
      "startTime": "10:00",
      "endTime": "15:00",
      "activity": "work session",
      "location": "Midtown",
      "venueRequirements": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "searchParameters": {
        "venueType": "cafe",
        "specificRequirements": [
          "quiet",
          "wifi",
          "outdoor seating"
        ],
        "ambience": "quiet"
      }
    }
  ],
  "fixedAppointments": [
    {
      "time": "17:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Midtown",
      "bufferBefore": 30,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "15:00",
      "activity": "lunch",
      "location": "Midtown",
      "venueRequirements": [
        "vegetarian options"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant",
        "specificRequirements": [
          "vegetarian options"
        ]
      }
    },
    {
      "time": "19:45",
      "activity": "dinner",
      "location": "Midtown",
      "venuePreference": "upscale rooftop restaurant",
      "venueRequirements": [
        "with a view"
      ],
      "searchParameters": {
        "priceLevel": "expensive",
        "venueType": "restaurant",
        "specificRequirements": [
          "view",
          "rooftop"
        ]
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 4,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [
    {
      "startTime": "10:00",
      "endTime": "15:00",
      "activity": "work session",
      "location": "Midtown",
      "venueRequirements": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "searchParameters": {
        "venueType": "cafe",
        "specificRequirements": [
          "quiet",
          "wifi",
          "outdoor seating"
        ],
        "ambience": "quiet"
      }
    }
  ],
  "fixedAppointments": [
    {
      "time": "17:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Midtown",
      "bufferBefore": 30,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "15:00",
      "activity": "lunch",
      "location": "Midtown",
      "venueRequirements": [
        "vegetarian options"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant",
        "specificRequirements": [
          "vegetarian options"
        ]
      }
    },
    {
      "time": "19:45",
      "activity": "dinner",
      "location": "Midtown",
      "venuePreference": "upscale rooftop restaurant",
      "venueRequirements": [
        "with a view"
      ],
      "searchParameters": {
        "priceLevel": "expensive",
        "venueType": "restaurant",
        "specificRequirements": [
          "view",
          "rooftop"
        ]
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 4,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [
    {
      "startTime": "10:00",
      "endTime": "15:00",
      "activity": "work session",
      "location": "Midtown",
      "venueRequirements": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "searchParameters": {
        "venueType": "cafe",
        "specificRequirements": [
          "quiet",
          "wifi",
          "outdoor seating"
        ],
        "ambience": "quiet"
      }
    }
  ],
  "fixedAppointments": [
    {
      "time": "17:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Midtown",
      "bufferBefore": 30,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "15:00",
      "activity": "lunch",
      "location": "Midtown",
      "venueRequirements": [
        "vegetarian options"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "venueType": "restaurant",
        "specificRequirements": [
          "vegetarian options"
        ]
      }
    },
    {
      "time": "19:45",
      "activity": "dinner",
      "location": "Midtown",
      "venuePreference": "upscale rooftop restaurant",
      "venueRequirements": [
        "with a view"
      ],
      "searchParameters": {
        "priceLevel": "expensive",
        "venueType": "restaurant",
        "specificRequirements": [
          "view",
          "rooftop"
        ]
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 4,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Raw time blocks from Gemini: [
  {
    "startTime": "10:00",
    "endTime": "15:00",
    "activity": "work session",
    "location": "Midtown",
    "venueRequirements": [
      "quiet",
      "good wifi",
      "outdoor seating"
    ],
    "searchParameters": {
      "venueType": "cafe",
      "specificRequirements": [
        "quiet",
        "wifi",
        "outdoor seating"
      ],
      "ambience": "quiet"
    }
  }
]
Correctly interpreted time "10:00" as America/New_York time: 10:00 AM (2025-06-05T14:00:00.000Z)
Time block: work session from 10:00 AM in Midtown
Raw fixed appointments from Gemini: [
  {
    "time": "17:00",
    "duration": 60,
    "activity": "meeting",
    "location": "Midtown",
    "bufferBefore": 30,
    "isFixed": true
  }
]
Correctly interpreted time "17:00" as America/New_York time: 5:00 PM (2025-06-05T21:00:00.000Z)
Fixed appointment: meeting at 5:00 PM in Midtown
Raw fixed time entries from Gemini: [
  {
    "time": "15:00",
    "activity": "lunch",
    "location": "Midtown",
    "venueRequirements": [
      "vegetarian options"
    ],
    "searchParameters": {
      "priceLevel": "moderate",
      "venueType": "restaurant",
      "specificRequirements": [
        "vegetarian options"
      ]
    }
  },
  {
    "time": "19:45",
    "activity": "dinner",
    "location": "Midtown",
    "venuePreference": "upscale rooftop restaurant",
    "venueRequirements": [
      "with a view"
    ],
    "searchParameters": {
      "priceLevel": "expensive",
      "venueType": "restaurant",
      "specificRequirements": [
        "view",
        "rooftop"
      ]
    }
  }
]
Fixed time entry: Normalized time from "15:00" to "15:00"
Correctly interpreted time "15:00" as America/New_York time: 3:00 PM (2025-06-05T19:00:00.000Z)
Correctly interpreted time "15:00" as New York City time: 3:00 PM (2025-06-05T19:00:00.000Z)
Processed fixed time entry: lunch at Midtown, time: 2025-06-05T19:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "19:45" to "19:45"
Correctly interpreted time "19:45" as America/New_York time: 7:45 PM (2025-06-05T23:45:00.000Z)
Correctly interpreted time "19:45" as New York City time: 7:45 PM (2025-06-05T23:45:00.000Z)
Found venue preference: "upscale rooftop restaurant" for activity: dinner
Processed fixed time entry: dinner at Midtown, time: 2025-06-05T23:45:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 4
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "work session",
      "keywords": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "quiet workspace"
    },
    {
      "location": "Midtown",
      "time": "2025-06-05T19:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [
        "vegetarian options"
      ],
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-06-05T21:00:00.000Z",
      "type": "skip",
      "searchTerm": "meeting",
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-06-05T23:45:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "keywords": [
        "view",
        "rooftop"
      ],
      "minRating": 4,
      "displayTime": "7:45 PM",
      "searchPreference": "upscale rooftop restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 4 de-duplicated activities
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "work session",
      "keywords": [
        "quiet",
        "good wifi",
        "outdoor seating"
      ],
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "quiet workspace"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T19:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [
        "vegetarian options"
      ],
      "minRating": 4,
      "displayTime": "3:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T21:00:00.000Z",
      "type": "skip",
      "searchTerm": "meeting",
      "displayTime": "5:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T23:45:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "keywords": [
        "view",
        "rooftop"
      ],
      "minRating": 4,
      "displayTime": "7:45 PM",
      "searchPreference": "upscale rooftop restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'work session',
      keywords: [Array],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'quiet workspace'
    },
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T19:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'lunch',
      keywords: [Array],
      minRating: 4,
      displayTime: '3:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T21:00:00.000Z',
      type: 'skip',
      searchTerm: 'meeting',
      displayTime: '5:00 PM'
    },
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T23:45:00.000Z',
      type: 'restaurant',
      searchTerm: 'dinner',
      keywords: [Array],
      minRating: 4,
      displayTime: '7:45 PM',
      searchPreference: 'upscale rooftop restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"work session","keywords":["quiet","good wifi","outdoor seating"],"minRating":4,"displayTime":"10:00 AM","searchPreference":"quiet workspace"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'work session',
  location: 'Midtown Manhattan',
  keywords: [ 'quiet', 'good wifi', 'outdoor seating', 'quiet workspace' ],
  type: 'cafe',
  preferences: { venuePreference: 'quiet workspace' },
  scheduledDateTime: 2025-06-05T14:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: "quiet workspace" cafe in Midtown Manhattan "good wifi" "outdoor seating"
📍 [enhancedPlaceSearch] Found specific area coordinates for "Midtown Manhattan": { lat: 40.7549, lng: -73.984 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7549,-73.984 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "quiet workspace" cafe in Midtown Manhattan "good wifi" "outdoor seating"
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T14:00:00.000Z
🕒 [Operating Hours] Validating hours for Pavé at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Pavé: Currently open
🕒 [Operating Hours] Validating hours for Bird & Branch Coffee Roasters at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Bird & Branch Coffee Roasters: Currently open
🕒 [Operating Hours] Validating hours for Paper Coffee at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Paper Coffee: Currently open
🕒 [Operating Hours] Validating hours for Cinico Coffee Company at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Cinico Coffee Company: Currently open
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Paper Coffee',
  rating: 4.1,
  address: '44 W 29th St, New York, NY 10001, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Pavé', rating: 4.7 },
  { name: 'Cinico Coffee Company', rating: 4.7 },
  { name: 'Bird & Branch Coffee Roasters', rating: 4.6 }
]
🔍 [SERVICE] Place details for "Paper Coffee": {
  hasRating: true,
  rating: 4.1,
  hasTypes: true,
  types: [ 'cafe', 'food', 'point_of_interest', 'store', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "44 W 29th St, New York, NY 10001, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7462091,\n' +
    '      "lng": -73.9895129\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.74764527989273,\n' +
    '        "lng": -73.98810152010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.74494562010729,\n' +
    '        "lng": -73.99080117989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Paper Coffee",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105002641894809505564\\">Ellen</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQXSmSNFYlXMMHgDMXVhOzRhOJrdK9r8FNWsSlH9oK0dMpOY5_tG7jlMMgSyG3OnBzEWCXA1JlZz69b3IQx-hbpFI-Wa2o_rOCDRsDo4rwcH7TUaG5n8oTbE0IBdEXVEvgpgQ83nJfRvTRtKzs2EHV8sP71ec32HXkvcDxfraoF4JjLczi5Eyu8BpL2JaTmJAMFJ76YcHu_Wex0bhFMHrDXFy0PCmGrMf9A5HlCK5ECDv9Y1njtIHCPMdFoKlwIVd7_TdCLtPXY8vjAtEWSbGrVExaApJ84xW5T0LovYr-CUojRcb8Gv_sp1847c3lrjLL-t_IfSiybPdYgiDZ6PZP6vuNC0k7Rbk8wOP7SG1O8dnx8FZ_bHsKxOzZCv-glKJpX_iudvFv1LU0a-FhuyktKhQCkdhaSdlvTCoj9bwDr554btXYLjDP4UA0-ZmC7NN2fANRQI6OCK9hFQ0hHMkJMLqC1EGkzhqGWyscDXrHQehjHpks0Qgs0gbZcwysg44jWg4gTVJyLC_4WxUKX6x4AJYR2CV9m3mK47w_Pt_3H2Oz5Ty2xfN5d-sSs9tcAA_BknNDR",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJA5V7V69ZwokRNI_y14Yvu-w",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2W6+F5 New York",\n' +
    '    "global_code": "87G8P2W6+F5"\n' +
    '  },\n' +
    '  "rating": 4.1,\n' +
    '  "reference": "ChIJA5V7V69ZwokRNI_y14Yvu-w",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "store",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 620\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.1,
  types: [ 'cafe', 'food', 'point_of_interest', 'store', 'establishment' ],
  detailsSize: 1582
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Paper Coffee" with details
🔍 [SERVICE] Stored place "Paper Coffee" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.1,
  types: [ 'cafe', 'food', 'point_of_interest', 'store', 'establishment' ]
}
Added fixed appointment to itinerary: Paper Coffee at 2025-06-05T14:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T19:00:00.000Z","type":"restaurant","searchTerm":"lunch","keywords":["vegetarian options"],"minRating":4,"displayTime":"3:00 PM"}
Parsed ISO timestamp "2025-06-05T19:00:00.000Z" to America/New_York time: 2025-06-05 15:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'lunch',
  location: 'Midtown Manhattan',
  keywords: [ 'vegetarian options' ],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T19:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best vegetarian restaurants Midtown Manhattan
📍 [enhancedPlaceSearch] Found specific area coordinates for "Midtown Manhattan": { lat: 40.7549, lng: -73.984 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7549,-73.984 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best vegetarian restaurants Midtown Manhattan
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T19:00:00.000Z
🕒 [Operating Hours] Validating hours for Planta Queen at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Planta Queen
✅ [Operating Hours] Planta Queen: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Vegan On The Fly at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Vegan On The Fly
✅ [Operating Hours] Vegan On The Fly: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Le Botaniste at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Le Botaniste
✅ [Operating Hours] Le Botaniste: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Hangawi at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Hangawi
✅ [Operating Hours] Hangawi: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Le Botaniste',
  rating: 4.7,
  address: '11 W 42nd St, New York, NY 10036, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Vegan On The Fly', rating: 4.7 },
  { name: 'Planta Queen', rating: 4.6 },
  { name: 'Hangawi', rating: 4.6 }
]
🔍 [SERVICE] Place details for "Le Botaniste": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [ 'restaurant', 'bar', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "11 W 42nd St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7541467,\n' +
    '      "lng": -73.9818554\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75540062989272,\n' +
    '        "lng": -73.98057837010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75270097010727,\n' +
    '        "lng": -73.98327802989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Le Botaniste",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1868,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/102717291798367232478\\">Le Botaniste</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTmCsiJxpkEZgzohc9Cspur42YDnON1HKJJuy3BXjJyT3dWer8mpJT59MdtCD_n8KAaEbdBEPVaq0I1M9yEK_TBP3nVWIiwNrbE3WuU_11Wp4QeI8fhb5blDp_Szrnhvj_kSwrJX8Eo8qLT0gd32mv6um41dElvLismUxWfCvcNuaRWYRMTSOG674qZ9VpFYyW3yOZqZRF_fjfUa0ktmoDAJZnCJsDRBH2bcdeJb2wIEW-YcLYvXh6VS1MRYSVqZ_ZQ7i24FNwM4sYgg5BOZj1akJdCAkic83nTA5RNu1_hyUGoV9Q",\n' +
    '      "width": 2800\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ6Qxx2bBZwokRwcJ_ZbyDvvo",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q239+M7 New York",\n' +
    '    "global_code": "87G8Q239+M7"\n' +
    '  },\n' +
    '  "price_level": 1,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJ6Qxx2bBZwokRwcJ_ZbyDvvo",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "bar",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 346\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [ 'restaurant', 'bar', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1345
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Le Botaniste" with details
🔍 [SERVICE] Stored place "Le Botaniste" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [ 'restaurant', 'bar', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Le Botaniste at 2025-06-05T19:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T21:00:00.000Z","type":"skip","searchTerm":"meeting","displayTime":"5:00 PM"}
Parsed ISO timestamp "2025-06-05T21:00:00.000Z" to America/New_York time: 2025-06-05 17:00:00 EDT
Adding meeting/appointment without venue search: meeting at Midtown Manhattan
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:439:52)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "meeting" with details
Added meeting to itinerary: meeting at 2025-06-05T21:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T23:45:00.000Z","type":"restaurant","searchTerm":"dinner","keywords":["view","rooftop"],"minRating":4,"displayTime":"7:45 PM","searchPreference":"upscale rooftop restaurant"}
Parsed ISO timestamp "2025-06-05T23:45:00.000Z" to America/New_York time: 2025-06-05 19:45:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'dinner',
  location: 'Midtown Manhattan',
  keywords: [ 'view', 'rooftop', 'upscale rooftop restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'upscale rooftop restaurant' },
  scheduledDateTime: 2025-06-05T23:45:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: upscale rooftop restaurant in Midtown Manhattan with a view
📍 [enhancedPlaceSearch] Found specific area coordinates for "Midtown Manhattan": { lat: 40.7549, lng: -73.984 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7549,-73.984 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: upscale rooftop restaurant in Midtown Manhattan with a view
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T23:45:00.000Z
🕒 [Operating Hours] Validating hours for Spyglass Rooftop Bar at 2025-06-05T23:45:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:45:00 Thursday, Day: 4, Time: 1945
⚠️ [Operating Hours] Could not determine hours for Spyglass Rooftop Bar
✅ [Operating Hours] Spyglass Rooftop Bar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Refinery Rooftop at 2025-06-05T23:45:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:45:00 Thursday, Day: 4, Time: 1945
⚠️ [Operating Hours] Could not determine hours for Refinery Rooftop
✅ [Operating Hours] Refinery Rooftop: Could not determine operating hours
🕒 [Operating Hours] Validating hours for 230 Fifth Rooftop Bar at 2025-06-05T23:45:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:45:00 Thursday, Day: 4, Time: 1945
⚠️ [Operating Hours] Could not determine hours for 230 Fifth Rooftop Bar
✅ [Operating Hours] 230 Fifth Rooftop Bar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Monarch Rooftop at 2025-06-05T23:45:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:45:00 Thursday, Day: 4, Time: 1945
⚠️ [Operating Hours] Could not determine hours for Monarch Rooftop
✅ [Operating Hours] Monarch Rooftop: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: '230 Fifth Rooftop Bar',
  rating: 4.3,
  address: '1150 Broadway, New York, NY 10001, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Refinery Rooftop', rating: 4.4 },
  { name: 'Spyglass Rooftop Bar', rating: 4.3 },
  { name: 'Monarch Rooftop', rating: 4.1 }
]
🔍 [SERVICE] Place details for "230 Fifth Rooftop Bar": {
  hasRating: true,
  rating: 4.3,
  hasTypes: true,
  types: [ 'bar', 'night_club', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "1150 Broadway, New York, NY 10001, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7441081,\n' +
    '      "lng": -73.9888201\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.74535152989272,\n' +
    '        "lng": -73.98700152010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.74265187010727,\n' +
    '        "lng": -73.98970117989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "230 Fifth Rooftop Bar",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 839,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/103582967784775299030\\">230 Fifth Rooftop Bar</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTDCVXyey6a_vw_n4dLMmzvf2sR3Kbi2ab2pCG4B0W_nTtAvpyIa_qewkd4OJcgCOKDfl8GS_gMvmWSDW5roLTjSK-lY026bxnrQ4MSUhdPOujGd7kzUgDUlyYUKLJZNVKQOA17Qhhc4Vnj4FL5svVCPxV92qCnhr0kaa_Mx5qTVCdRn4Brz3YN-iQcjVDjM1FyLQd7QRLUyjlQVzzgA7KiWhRkoaZDUR7Gk_UQ-dIvgTNxK6mYp1USD51kBIiGkSncaIPnRS2YUtE27i1F1SRm8QZ-Pi1jGRlVFpDSa9Ut6AstR40",\n' +
    '      "width": 1260\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ_1oyZaZZwokR1c-HIVJ3xzo",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2V6+JF New York",\n' +
    '    "global_code": "87G8P2V6+JF"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.3,\n' +
    '  "reference": "ChIJ_1oyZaZZwokR1c-HIVJ3xzo",\n' +
    '  "types": [\n' +
    '    "bar",\n' +
    '    "night_club",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 22809\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.3,
  types: [ 'bar', 'night_club', 'point_of_interest', 'establishment' ],
  detailsSize: 1344
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "230 Fifth Rooftop Bar" with details
🔍 [SERVICE] Stored place "230 Fifth Rooftop Bar" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.3,
  types: [ 'bar', 'night_club', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: 230 Fifth Rooftop Bar at 2025-06-05T23:45:00.000Z
Calculating travel times for 4 places in New York City
Travel time from Paper Coffee to Le Botaniste: 5 minutes
Travel time from Le Botaniste to meeting: 120 minutes
Travel time from meeting to 230 Fifth Rooftop Bar: 120 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "work session, lunch, meeting... in New York City" for New York City with ID: 3
[Weather] Using cached data for 40.75,-73.99
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Paper Coffee" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "Le Botaniste" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "meeting" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "230 Fifth Rooftop Bar" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 4 venues
2025-06-05 06:30:49 INFO [API] POST /api/plan 200 (12168ms) {
  "statusCode": 200,
  "duration": 12168
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Midtown at 10 AM
Raw request body: { query: 'Coffee in Midtown at 10 AM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Midtown at 10 AM
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee in Midtown at 10 AM
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Midtown","searchParameters":{"venueType":"cafe"},"time":"10:00","venuePreference":"cafe","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":2398,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    \n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee in Midtown at 10 AM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Midtown\",\n      \"venuePreference\": \"cafe\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {},\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"ac4e6c49-5195-41c2-b2a6-ce14304b08bf","status":"success","timestamp":"2025-06-05T13:40:06.921Z","userQuery":"Coffee in Midtown at 10 AM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Midtown, 10:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Midtown",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {},
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Midtown",
    "venuePreference": "cafe",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "cafe"
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as America/New_York time: 10:00 AM (2025-06-05T14:00:00.000Z)
Correctly interpreted time "10:00" as New York City time: 10:00 AM (2025-06-05T14:00:00.000Z)
Found venue preference: "cafe" for activity: Coffee
Processed fixed time entry: Coffee at Midtown, time: 2025-06-05T14:00:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [],
  "fixedTimes": [
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    }
  ],
  "preferences": {
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Midtown Manhattan',
  keywords: [ 'cafe' ],
  type: 'cafe',
  preferences: { venuePreference: 'cafe' },
  scheduledDateTime: 2025-06-05T14:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best cafes in Midtown Manhattan
📍 [enhancedPlaceSearch] Found specific area coordinates for "Midtown Manhattan": { lat: 40.7549, lng: -73.984 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7549,-73.984 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best cafes in Midtown Manhattan
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T14:00:00.000Z
🕒 [Operating Hours] Validating hours for Little Collins at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Little Collins: Currently open
🕒 [Operating Hours] Validating hours for Bibble & Sip at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Bibble & Sip: Currently open
🕒 [Operating Hours] Validating hours for Pavé at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] Pavé: Currently open
🕒 [Operating Hours] Validating hours for 787 Coffee Co. at 2025-06-05T14:00:00.000Z
✅ [Operating Hours] 787 Coffee Co.: Currently open
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Pavé',
  rating: 4.7,
  address: '20 W 46th St, New York, NY 10036, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: '787 Coffee Co.', rating: 4.9 },
  { name: 'Little Collins', rating: 4.6 },
  { name: 'Bibble & Sip', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Pavé": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "20 W 46th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7564389,\n' +
    '      "lng": -73.9802678\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75778687989273,\n' +
    '        "lng": -73.97891932010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75508722010728,\n' +
    '        "lng": -73.9816189798927\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Pavé",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1537,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108929524373834216808\\">Pavé</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTUjJ4FE6cIWVvny1ZgofxD16R2Y7kFQQjBA_-cNt8RqyhWlE7ZsZAE_N8JrSyZIYs4Mmw47sxnVSWY-wpMKx70xZV2kTOcoro9Y7Tf5g1eIvYSfsfGF75f0fm4qTcXB4xfbW4AQmOAAaq_6GFKBGNYvUC35wlquYC_IIQjhwMpNkKzToqjZ8Kf6MMaNl3OX01QI5hyPbR8fdUQMPq6N3QkRHR9agb2c44by8CeXZBqAttjsOQZgXVrMCph_PfZFFsu_TU1-Csjz8fRn0UW9LW-_kCictAh3f7CtqXq92RDZO0fKvs",\n' +
    '      "width": 2303\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q249+GV New York",\n' +
    '    "global_code": "87G8Q249+GV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 358\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1333
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Pavé" with details
🔍 [SERVICE] Stored place "Pavé" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Pavé at 2025-06-05T14:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 4
[Weather] Fetching weather for 40.76,-73.98
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Pavé" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:40:08 INFO [API] POST /api/plan 200 (3960ms) {
  "statusCode": 200,
  "duration": 3960
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Midtown at 10 AM
Raw request body: { query: 'Coffee in Midtown at 10 AM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Midtown at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [SERVICE] Place details for "Pavé": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "20 W 46th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7564389,\n' +
    '      "lng": -73.9802678\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75778687989273,\n' +
    '        "lng": -73.97891932010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75508722010728,\n' +
    '        "lng": -73.9816189798927\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Pavé",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1537,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108929524373834216808\\">Pavé</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTUjJ4FE6cIWVvny1ZgofxD16R2Y7kFQQjBA_-cNt8RqyhWlE7ZsZAE_N8JrSyZIYs4Mmw47sxnVSWY-wpMKx70xZV2kTOcoro9Y7Tf5g1eIvYSfsfGF75f0fm4qTcXB4xfbW4AQmOAAaq_6GFKBGNYvUC35wlquYC_IIQjhwMpNkKzToqjZ8Kf6MMaNl3OX01QI5hyPbR8fdUQMPq6N3QkRHR9agb2c44by8CeXZBqAttjsOQZgXVrMCph_PfZFFsu_TU1-Csjz8fRn0UW9LW-_kCictAh3f7CtqXq92RDZO0fKvs",\n' +
    '      "width": 2303\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q249+GV New York",\n' +
    '    "global_code": "87G8Q249+GV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 358\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1333
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Pavé" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Place "Pavé" already exists, returning existing record
🔍 [SERVICE] Stored place "Pavé" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Pavé at 2025-06-05T14:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 5
[Weather] Using cached data for 40.76,-73.98
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Pavé" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:40:37 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Midtown at 10 AM
Raw request body: { query: 'Coffee in Midtown at 10 AM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Midtown at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [SERVICE] Place details for "Pavé": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "20 W 46th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7564389,\n' +
    '      "lng": -73.9802678\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75778687989273,\n' +
    '        "lng": -73.97891932010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75508722010728,\n' +
    '        "lng": -73.9816189798927\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Pavé",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1537,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108929524373834216808\\">Pavé</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTUjJ4FE6cIWVvny1ZgofxD16R2Y7kFQQjBA_-cNt8RqyhWlE7ZsZAE_N8JrSyZIYs4Mmw47sxnVSWY-wpMKx70xZV2kTOcoro9Y7Tf5g1eIvYSfsfGF75f0fm4qTcXB4xfbW4AQmOAAaq_6GFKBGNYvUC35wlquYC_IIQjhwMpNkKzToqjZ8Kf6MMaNl3OX01QI5hyPbR8fdUQMPq6N3QkRHR9agb2c44by8CeXZBqAttjsOQZgXVrMCph_PfZFFsu_TU1-Csjz8fRn0UW9LW-_kCictAh3f7CtqXq92RDZO0fKvs",\n' +
    '      "width": 2303\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q249+GV New York",\n' +
    '    "global_code": "87G8Q249+GV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 358\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1333
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Pavé" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Place "Pavé" already exists, returning existing record
🔍 [SERVICE] Stored place "Pavé" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Pavé at 2025-06-05T14:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 6
[Weather] Using cached data for 40.76,-73.98
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Pavé" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:40:59 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Midtown at 10 AM
Raw request body: { query: 'Coffee in Midtown at 10 AM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Midtown at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [SERVICE] Place details for "Pavé": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "20 W 46th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7564389,\n' +
    '      "lng": -73.9802678\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75778687989273,\n' +
    '        "lng": -73.97891932010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75508722010728,\n' +
    '        "lng": -73.9816189798927\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Pavé",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1537,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108929524373834216808\\">Pavé</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTUjJ4FE6cIWVvny1ZgofxD16R2Y7kFQQjBA_-cNt8RqyhWlE7ZsZAE_N8JrSyZIYs4Mmw47sxnVSWY-wpMKx70xZV2kTOcoro9Y7Tf5g1eIvYSfsfGF75f0fm4qTcXB4xfbW4AQmOAAaq_6GFKBGNYvUC35wlquYC_IIQjhwMpNkKzToqjZ8Kf6MMaNl3OX01QI5hyPbR8fdUQMPq6N3QkRHR9agb2c44by8CeXZBqAttjsOQZgXVrMCph_PfZFFsu_TU1-Csjz8fRn0UW9LW-_kCictAh3f7CtqXq92RDZO0fKvs",\n' +
    '      "width": 2303\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q249+GV New York",\n' +
    '    "global_code": "87G8Q249+GV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 358\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1333
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Pavé" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Place "Pavé" already exists, returning existing record
🔍 [SERVICE] Stored place "Pavé" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Pavé at 2025-06-05T14:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 7
[Weather] Using cached data for 40.76,-73.98
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Pavé" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:41:36 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Midtown at 10 AM
Raw request body: { query: 'Coffee in Midtown at 10 AM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Midtown at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [SERVICE] Place details for "Pavé": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "20 W 46th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7564389,\n' +
    '      "lng": -73.9802678\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75778687989273,\n' +
    '        "lng": -73.97891932010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75508722010728,\n' +
    '        "lng": -73.9816189798927\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Pavé",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1537,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108929524373834216808\\">Pavé</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTUjJ4FE6cIWVvny1ZgofxD16R2Y7kFQQjBA_-cNt8RqyhWlE7ZsZAE_N8JrSyZIYs4Mmw47sxnVSWY-wpMKx70xZV2kTOcoro9Y7Tf5g1eIvYSfsfGF75f0fm4qTcXB4xfbW4AQmOAAaq_6GFKBGNYvUC35wlquYC_IIQjhwMpNkKzToqjZ8Kf6MMaNl3OX01QI5hyPbR8fdUQMPq6N3QkRHR9agb2c44by8CeXZBqAttjsOQZgXVrMCph_PfZFFsu_TU1-Csjz8fRn0UW9LW-_kCictAh3f7CtqXq92RDZO0fKvs",\n' +
    '      "width": 2303\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q249+GV New York",\n' +
    '    "global_code": "87G8Q249+GV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 358\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1333
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Pavé" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Place "Pavé" already exists, returning existing record
🔍 [SERVICE] Stored place "Pavé" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Pavé at 2025-06-05T14:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 8
[Weather] Using cached data for 40.76,-73.98
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Pavé" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:42:01 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Midtown at 10 AM
Raw request body: { query: 'Coffee in Midtown at 10 AM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Midtown at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [],
  fixedTimes: [
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    }
  ],
  preferences: { type: undefined, requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [SERVICE] Place details for "Pavé": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "20 W 46th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7564389,\n' +
    '      "lng": -73.9802678\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75778687989273,\n' +
    '        "lng": -73.97891932010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75508722010728,\n' +
    '        "lng": -73.9816189798927\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Pavé",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1537,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108929524373834216808\\">Pavé</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTUjJ4FE6cIWVvny1ZgofxD16R2Y7kFQQjBA_-cNt8RqyhWlE7ZsZAE_N8JrSyZIYs4Mmw47sxnVSWY-wpMKx70xZV2kTOcoro9Y7Tf5g1eIvYSfsfGF75f0fm4qTcXB4xfbW4AQmOAAaq_6GFKBGNYvUC35wlquYC_IIQjhwMpNkKzToqjZ8Kf6MMaNl3OX01QI5hyPbR8fdUQMPq6N3QkRHR9agb2c44by8CeXZBqAttjsOQZgXVrMCph_PfZFFsu_TU1-Csjz8fRn0UW9LW-_kCictAh3f7CtqXq92RDZO0fKvs",\n' +
    '      "width": 2303\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q249+GV New York",\n' +
    '    "global_code": "87G8Q249+GV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJfwLWROZZwokRp1_1VXSYsd4",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 358\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1333
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Pavé" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Place "Pavé" already exists, returning existing record
🔍 [SERVICE] Stored place "Pavé" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'bakery',
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Pavé at 2025-06-05T14:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 9
[Weather] Using cached data for 40.76,-73.98
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Pavé" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:42:40 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
📝 [/api/plan] Generic plan request received
Query: Lunch in SoHo at 1 PM
Raw request body: { query: 'Lunch in SoHo at 1 PM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Lunch in SoHo at 1 PM
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Lunch in SoHo at 1 PM
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Lunch","location":"SoHo","searchParameters":{"specificRequirements":[]},"time":"13:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2843,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    \n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Lunch in SoHo at 1 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"SoHo\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"a0b6c786-b37e-4b50-9271-0f0dead2e55e","status":"success","timestamp":"2025-06-05T13:43:05.834Z","userQuery":"Lunch in SoHo at 1 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Lunch at SoHo, 13:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "13:00",
    "activity": "Lunch",
    "location": "SoHo",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "13:00" to "13:00"
Correctly interpreted time "13:00" as America/New_York time: 1:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "13:00" as New York City time: 1:00 PM (2025-06-05T17:00:00.000Z)
Processed fixed time entry: Lunch at SoHo, time: 2025-06-05T17:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'SoHo',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: [],
      minRating: 4,
      displayTime: '1:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"Lunch","keywords":[],"minRating":4,"displayTime":"1:00 PM"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to America/New_York time: 2025-06-05 13:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'SoHo',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best lunch restaurants SoHo
📍 [enhancedPlaceSearch] Found specific area coordinates for "SoHo": { lat: 40.722, lng: -74.0002 }
🎯 [enhancedPlaceSearch] Using location bias: 40.722,-74.0002 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best lunch restaurants SoHo
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for La Pecora Bianca SoHo at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for La Pecora Bianca SoHo
✅ [Operating Hours] La Pecora Bianca SoHo: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Maison Close Restaurant at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Maison Close Restaurant
✅ [Operating Hours] Maison Close Restaurant: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Shuka at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Shuka
✅ [Operating Hours] Shuka: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Balthazar at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Balthazar
✅ [Operating Hours] Balthazar: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Balthazar',
  rating: 4.4,
  address: '80 Spring St, New York, NY 10012, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'La Pecora Bianca SoHo', rating: 4.8 },
  { name: 'Maison Close Restaurant', rating: 4.8 },
  { name: 'Shuka', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Balthazar": {
  hasRating: true,
  rating: 4.4,
  hasTypes: true,
  types: [
    'bakery',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "80 Spring St, New York, NY 10012, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.722668,\n' +
    '      "lng": -73.99822979999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72406662989272,\n' +
    '        "lng": -73.99687052010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72136697010728,\n' +
    '        "lng": -73.99957017989271\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Balthazar",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108987076130882142927\\">Yazan Mohamed</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNS7666x3WTqhlLhI4y1-SDqrT2D24Ycub_vGLbpWXppLQ37w169FoCqsPMurJIwn3w3Kge_vT4S3Y7m2MrbWzCydmGAmBRncPx05t8Ho9tDKm4N7olf15YTiyLBvsx15xPH7_VQde3PdsUFajYr6I5ke5HroVq2GgUiLgLcLLg9L6q5Ye9WCHPCgKnOR66XMoMm_Ml8Vf4umZkQB1wZyfDm_BIERHb4QhOr9nmjtzmuo2tVWEgL5IN9bCuP-gh8r6xBEtaU-dlje2vjaPgfFveO5B6wPq70vBXoFjKwWkZU4qLMUUatt0WLW1vRayx8Xfrt9noH7XYJd9jR4Tzwe6cibJyU7fmzY-bDyoPL81uAWJf4Rb4_sFUNA98p4QgUum-R49OKeP4w1gN-qIzCsUtmJunAYwY6Q1t-KtZ28cyM0urO1ACjWYTaJZafshiZxLFu13pmUxEech3cW6APtwlnGVPTu2vFrJVZbVMvnzHTUzA_VvhqlYHYFCQyUwh7IR0Bii7hTfVbgGtnrkWCqAjSmBPasjQH-633Gbu7-5tLcodA3OAJ9hFPoOA2xuGrPH2HBg",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJt7fMLIlZwokRCRtM9bNDg78",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2F2+3P New York",\n' +
    '    "global_code": "87G8P2F2+3P"\n' +
    '  },\n' +
    '  "price_level": 3,\n' +
    '  "rating": 4.4,\n' +
    '  "reference": "ChIJt7fMLIlZwokRCRtM9bNDg78",\n' +
    '  "types": [\n' +
    '    "bakery",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 7168\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.4,
  types: [
    'bakery',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1635
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Balthazar" with details
🔍 [SERVICE] Stored place "Balthazar" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.4,
  types: [
    'bakery',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Balthazar at 2025-06-05T17:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Lunch in New York City" for New York City with ID: 10
[Weather] Fetching weather for 40.72,-74
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Balthazar" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:43:07 INFO [API] POST /api/plan 200 (4628ms) {
  "statusCode": 200,
  "duration": 4628
}
📝 [/api/plan] Generic plan request received
Query: Italian restaurant in SoHo at 1 PM
Raw request body: { query: 'Italian restaurant in SoHo at 1 PM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Italian restaurant in SoHo at 1 PM
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Italian restaurant in SoHo at 1 PM
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Lunch","location":"SoHo","searchParameters":{"cuisine":"Italian","priceLevel":"moderate","specificRequirements":[],"venuePreference":"Italian restaurant"},"time":"13:00","venuePreference":"Italian restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":2678,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    \n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Italian restaurant in SoHo at 1 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"SoHo\",\n      \"venuePreference\": \"Italian restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"Italian restaurant\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"Italian\",\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"7321042c-13fc-473a-a7e6-b7e0604141d6","status":"success","timestamp":"2025-06-05T13:43:33.685Z","userQuery":"Italian restaurant in SoHo at 1 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Lunch at SoHo, 13:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Found raw venuePreference in Gemini fixed time entry: "Italian restaurant" for activity "Lunch"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "13:00",
    "activity": "Lunch",
    "location": "SoHo",
    "venuePreference": "Italian restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "Italian",
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "Italian restaurant"
    }
  }
]
Fixed time entry: Normalized time from "13:00" to "13:00"
Correctly interpreted time "13:00" as America/New_York time: 1:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "13:00" as New York City time: 1:00 PM (2025-06-05T17:00:00.000Z)
Found venue preference: "Italian restaurant" for activity: Lunch
Processed fixed time entry: Lunch at SoHo, time: 2025-06-05T17:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM",
      "searchPreference": "Italian restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM",
      "searchPreference": "Italian restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'SoHo',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: [],
      minRating: 4,
      displayTime: '1:00 PM',
      searchPreference: 'Italian restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"Lunch","keywords":[],"minRating":4,"displayTime":"1:00 PM","searchPreference":"Italian restaurant"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to America/New_York time: 2025-06-05 13:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'SoHo',
  keywords: [ 'Italian restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'Italian restaurant' },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best Italian restaurant in SoHo
📍 [enhancedPlaceSearch] Found specific area coordinates for "SoHo": { lat: 40.722, lng: -74.0002 }
🎯 [enhancedPlaceSearch] Using location bias: 40.722,-74.0002 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best Italian restaurant in SoHo
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for La Pecora Bianca SoHo at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for La Pecora Bianca SoHo
✅ [Operating Hours] La Pecora Bianca SoHo: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Osteria Barocca at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Osteria Barocca
✅ [Operating Hours] Osteria Barocca: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Piccola Cucina Osteria Siciliana at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Piccola Cucina Osteria Siciliana
✅ [Operating Hours] Piccola Cucina Osteria Siciliana: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Il Corallo Trattoria at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Il Corallo Trattoria
✅ [Operating Hours] Il Corallo Trattoria: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Osteria Barocca',
  rating: 4.6,
  address: '133 Mulberry St, New York, NY 10013, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'La Pecora Bianca SoHo', rating: 4.8 },
  { name: 'Piccola Cucina Osteria Siciliana', rating: 4.6 },
  { name: 'Il Corallo Trattoria', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Osteria Barocca": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "133 Mulberry St, New York, NY 10013, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7186467,\n' +
    '      "lng": -73.99792409999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.71996042989272,\n' +
    '        "lng": -73.99646872010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.71726077010727,\n' +
    '        "lng": -73.99916837989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Osteria Barocca",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/109316318609375023721\\">Guthrie Paterson</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRuvRrs1bSAiXdzMutH4luJ8VQfCqQzbvRUGIjEjwNc6chj6PvZ4lY_MD_lk1qAvm1iu9EN3okDQUFsZ4jX9YpowrceKnoovSNy4rNzP3ci6cjOTeGiiH3MbAcuk_71A9nhmz32sCrlZRnVWYOmyEF6kOEcc8TUuxrukpLMSuHm2VJkAu2HbTgQjMb0rSeW77t4skUXPfSqTYsoWxB8_WIGdz45PdRwBn-LQTB_TyL9HZsToqCVj1Q_UxLhU9fPRZ21I4Rif9_OEGB236fr4gKD4XSMzKg6gf_dS0bXrBREmgiFIEhR_i67APwn0aS5vGaRtoBAxrTUV5cBoDdxRlGw7ABqQ3CWDqBArxk7UjZ1aWyZ-3NTNnhS2RZ5gMrZytlOberyIvtXoS8nbShglpugRTX85BpVNqwIug6Qf6rvVtqQb4-W_56VtV2oMSOCmxoyBAePnJEKh3tKg9uS9XjUsrkH1krXqH0vdeX5q_zv2v0NMivqzl1oAdK55TwgykIdyqd0iV1zOMcMLsdB56bfmajsbncY5t83NxaggxLzEeNbgT51TEr3_-T-gn5n3iPteOUi",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJK0YQvsRZwokR9r2ubFZRd7E",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P292+FR New York",\n' +
    '    "global_code": "87G8P292+FR"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJK0YQvsRZwokR9r2ubFZRd7E",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2012\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1634
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Osteria Barocca" with details
🔍 [SERVICE] Stored place "Osteria Barocca" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Osteria Barocca at 2025-06-05T17:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Lunch in New York City" for New York City with ID: 11
[Weather] Using cached data for 40.72,-74
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Osteria Barocca" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 06:43:35 INFO [API] POST /api/plan 200 (4429ms) {
  "statusCode": 200,
  "duration": 4429
}
📝 [/api/plan] Generic plan request received
Query: Italian restaurant in SoHo at 1 PM
Raw request body: { query: 'Italian restaurant in SoHo at 1 PM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Italian restaurant in SoHo at 1 PM
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Italian restaurant in SoHo at 1 PM
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Lunch","location":"SoHo","searchParameters":{"cuisine":"Italian","priceLevel":"moderate","specificRequirements":[],"venuePreference":"Italian restaurant"},"time":"13:00","venuePreference":"Italian restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":2590,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    \n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Italian restaurant in SoHo at 1 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"SoHo\",\n      \"venuePreference\": \"Italian restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"Italian restaurant\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"Italian\",\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"f01cfa91-f626-4e88-8018-33eb95909a5b","status":"success","timestamp":"2025-06-05T19:59:32.917Z","userQuery":"Italian restaurant in SoHo at 1 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Lunch at SoHo, 13:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "SoHo",
      "venuePreference": "Italian restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Italian",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "Italian restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Found raw venuePreference in Gemini fixed time entry: "Italian restaurant" for activity "Lunch"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "13:00",
    "activity": "Lunch",
    "location": "SoHo",
    "venuePreference": "Italian restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "Italian",
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "Italian restaurant"
    }
  }
]
Fixed time entry: Normalized time from "13:00" to "13:00"
Correctly interpreted time "13:00" as America/New_York time: 1:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "13:00" as New York City time: 1:00 PM (2025-06-05T17:00:00.000Z)
Found venue preference: "Italian restaurant" for activity: Lunch
Processed fixed time entry: Lunch at SoHo, time: 2025-06-05T17:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM",
      "searchPreference": "Italian restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM",
      "searchPreference": "Italian restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'SoHo',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: [],
      minRating: 4,
      displayTime: '1:00 PM',
      searchPreference: 'Italian restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"Lunch","keywords":[],"minRating":4,"displayTime":"1:00 PM","searchPreference":"Italian restaurant"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to America/New_York time: 2025-06-05 13:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'SoHo',
  keywords: [ 'Italian restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'Italian restaurant' },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best Italian restaurant in SoHo
📍 [enhancedPlaceSearch] Found specific area coordinates for "SoHo": { lat: 40.722, lng: -74.0002 }
🎯 [enhancedPlaceSearch] Using location bias: 40.722,-74.0002 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best Italian restaurant in SoHo
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for La Pecora Bianca SoHo at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for La Pecora Bianca SoHo
✅ [Operating Hours] La Pecora Bianca SoHo: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Piccola Cucina Osteria Siciliana at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Piccola Cucina Osteria Siciliana
✅ [Operating Hours] Piccola Cucina Osteria Siciliana: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Osteria Barocca at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Osteria Barocca
✅ [Operating Hours] Osteria Barocca: Could not determine operating hours
🕒 [Operating Hours] Validating hours for San Carlo Osteria Piemonte at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for San Carlo Osteria Piemonte
✅ [Operating Hours] San Carlo Osteria Piemonte: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'San Carlo Osteria Piemonte',
  rating: 4.6,
  address: '90 Thompson St, New York, NY 10012, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'La Pecora Bianca SoHo', rating: 4.8 },
  { name: 'Piccola Cucina Osteria Siciliana', rating: 4.6 },
  { name: 'Osteria Barocca', rating: 4.6 }
]
🔍 [SERVICE] Place details for "San Carlo Osteria Piemonte": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "90 Thompson St, New York, NY 10012, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7251858,\n' +
    '      "lng": -74.00223179999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72657312989273,\n' +
    '        "lng": -74.00093932010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72387347010728,\n' +
    '        "lng": -74.00363897989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "San Carlo Osteria Piemonte",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108797309755825154694\\">Alessandro Frati</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQbsbys9yA5LWjrLN_dzD4Ryl1wZAY--WcyZTvj2R29G0H_01_-OO-lg27S5PFbVnLd_AK05pllWe_oSI7jAwphDNZ5aWe_nFbB1weUsykXCysQ1VxIrAaxMfGJ9C73HSBcwkz8MXvlLM0UnaFJZu6eACuHI1puIK1WSf3ou6eJAxokgE0visFvpN5Nco4-UUm9fDnH1OShddkJIZqD1gYNeDolztEoFsUAs1rhiLGyr6miXivYUyFuAGXsYzLT-LKdIRUP-xGGlQvR80E8N9fhDaDl_MYc-VqtMGfvdl9NRgZ-XOPJDi__chs04tbp0KSJSB1hARhG_1eT1Ged-bWfRu6TkOMRI3zTTR2WiN-e9NKh0U4Z4M7Sl-qzLEdiBSIFedOleiGKcMYItlu6NhK9oXod2hkexvqhj6IHcHAFRwKxz54AVGCXBL79YAKolL0J_y9wMwnUPe0V4-_POP1cV7S-h1-NNhdZp6Roq1ciWisKV8uc1abcHEZfuK8UEyfR82azrmzdWzJBg_-VgHdcLizyAntUj2XpdWxNbIdw6V9jGF6WYRlb8rKwy3tIY9f3u9wyRA4ZCQ",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ5RzhN4xZwokRp13Jc3DxBOI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "PXGX+34 New York",\n' +
    '    "global_code": "87G7PXGX+34"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJ5RzhN4xZwokRp13Jc3DxBOI",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 937\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1648
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "San Carlo Osteria Piemonte" with details
🔍 [SERVICE] Stored place "San Carlo Osteria Piemonte" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: San Carlo Osteria Piemonte at 2025-06-05T17:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Lunch in New York City" for New York City with ID: 12
[Weather] Fetching weather for 40.73,-74
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "San Carlo Osteria Piemonte" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 12:59:34 INFO [API] POST /api/plan 200 (4150ms) {
  "statusCode": 200,
  "duration": 4150
}
📝 [/api/plan] Generic plan request received
Query: Italian restaurant in SoHo at 1 PM
Raw request body: { query: 'Italian restaurant in SoHo at 1 PM', citySlug: 'nyc' }
🔍 [Complexity] Query analysis: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🌍 [/api/plan] Parsed parameters: { city: undefined, citySlug: 'nyc', cityIdentifier: 'nyc' }
🚀 [/api/plan] Creating plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Italian restaurant in SoHo at 1 PM
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'SoHo',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: [],
      minRating: 4,
      displayTime: '1:00 PM',
      searchPreference: 'Italian restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"Lunch","keywords":[],"minRating":4,"displayTime":"1:00 PM","searchPreference":"Italian restaurant"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to America/New_York time: 2025-06-05 13:00:00 EDT
🔍 [SERVICE] Place details for "San Carlo Osteria Piemonte": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "90 Thompson St, New York, NY 10012, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7251858,\n' +
    '      "lng": -74.00223179999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72657312989273,\n' +
    '        "lng": -74.00093932010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72387347010728,\n' +
    '        "lng": -74.00363897989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "San Carlo Osteria Piemonte",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108797309755825154694\\">Alessandro Frati</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQbsbys9yA5LWjrLN_dzD4Ryl1wZAY--WcyZTvj2R29G0H_01_-OO-lg27S5PFbVnLd_AK05pllWe_oSI7jAwphDNZ5aWe_nFbB1weUsykXCysQ1VxIrAaxMfGJ9C73HSBcwkz8MXvlLM0UnaFJZu6eACuHI1puIK1WSf3ou6eJAxokgE0visFvpN5Nco4-UUm9fDnH1OShddkJIZqD1gYNeDolztEoFsUAs1rhiLGyr6miXivYUyFuAGXsYzLT-LKdIRUP-xGGlQvR80E8N9fhDaDl_MYc-VqtMGfvdl9NRgZ-XOPJDi__chs04tbp0KSJSB1hARhG_1eT1Ged-bWfRu6TkOMRI3zTTR2WiN-e9NKh0U4Z4M7Sl-qzLEdiBSIFedOleiGKcMYItlu6NhK9oXod2hkexvqhj6IHcHAFRwKxz54AVGCXBL79YAKolL0J_y9wMwnUPe0V4-_POP1cV7S-h1-NNhdZp6Roq1ciWisKV8uc1abcHEZfuK8UEyfR82azrmzdWzJBg_-VgHdcLizyAntUj2XpdWxNbIdw6V9jGF6WYRlb8rKwy3tIY9f3u9wyRA4ZCQ",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ5RzhN4xZwokRp13Jc3DxBOI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "PXGX+34 New York",\n' +
    '    "global_code": "87G7PXGX+34"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJ5RzhN4xZwokRp13Jc3DxBOI",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 937\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1648
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "San Carlo Osteria Piemonte" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Place "San Carlo Osteria Piemonte" already exists, returning existing record
🔍 [SERVICE] Stored place "San Carlo Osteria Piemonte" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: San Carlo Osteria Piemonte at 2025-06-05T17:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:199:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Lunch in New York City" for New York City with ID: 13
[Weather] Using cached data for 40.73,-74
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "San Carlo Osteria Piemonte" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 13:00:09 INFO [API] POST /api/plan 200 (1ms) {
  "statusCode": 200,
  "duration": 1
}
SIGTERM received, shutting down gracefully...
Server closed
