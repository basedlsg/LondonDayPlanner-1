
> rest-express@1.0.0 dev
> NODE_ENV=development tsx server/index.ts

🔧 [config.ts] Creating new Config instance.
🔧 [config.ts] Config constructor starting...
🔧 [config.ts] process.env.GOOGLE_PLACES_API_KEY at constructor start: NOT SET
🔧 [config.ts] process.env.GEMINI_API_KEY at constructor start: NOT SET
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] AI_PROCESSING feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] USE_GEMINI feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] WEATHER_AWARE feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] PLACES_API feature flag DISABLED (enabled: true, keysMet: false).
🔧 [config.ts] initializeFeatureFlags() finished.
🔧 [config.ts] Config constructor finished.
[CityRegistry] Registered city: London (slug: london)
[CityRegistry] Registered city: New York City (slug: nyc)
[CityRegistry] Registered city: Boston (slug: boston)
[CityRegistry] Registered city: Austin (slug: austin)
[CityRegistry] City configurations loading process completed. Registry size: 4
[CityRegistry] Registered slugs: london, nyc, boston, austin
AI_PROCESSING feature flag status: false
🔧 Loading environment variables...
📄 .env file path: /Users/carlos/LondonDayPlanner-1/.env
📄 .env file exists: true
✅ Environment variables loaded by dotenv (keys found): [
  'DATABASE_URL',
  'GOOGLE_PLACES_API_KEY',
  'GEMINI_API_KEY',
  'WEATHER_API_KEY'
]
🔍 Environment check (process.env):
   DATABASE_URL present: true
   GOOGLE_PLACES_API_KEY present: true
   GOOGLE_PLACES_API_KEY length: 39
   GEMINI_API_KEY present: true
🔧 Initializing application configuration...
🔄 [config.ts] Config.recheckEnvironment() called. Forcing reload of API keys and features...
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: SET (length: 32)
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: SET (length: 32)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] AI_PROCESSING feature flag ENABLED.
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] USE_GEMINI feature flag ENABLED.
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] WEATHER_AWARE feature flag ENABLED.
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] PLACES_API feature flag ENABLED.
🔧 [config.ts] initializeFeatureFlags() finished.
🔄 [config.ts] Environment recheck complete. Logging new status:
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
🔧 [config.ts] Config initialize() called.
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
⚠️  SESSION_SECRET not set, using fallback. SET THIS FOR PRODUCTION!
2025-06-05 14:21:08 WARN [SESSION] No SESSION_SECRET found, using development fallback {}
2025-06-05 14:21:08 INFO [SESSION] Session configuration created {
  "isProduction": false,
  "hasSecret": true,
  "cookieSecure": false,
  "sameSite": "lax"
}
🗄️  Testing database connection...
🗄️  Initializing database instance with Neon driver...
✅ Database instance initialized and tested successfully with Neon.
✅ Database connection successful
🔌 WebSocket service initialized
🚀 Server running on http://localhost:5001
🔧 Environment: development
🗄️  Database: Connected
🔑 Google Places API Key: Configured
🔑 Gemini API Key: Configured
🔌 WebSocket: Available at ws://localhost:5001/ws
📝 [/:city/plan] City-specific plan request for: New York City
Query: Coffee in Greenwich Village at 10am, then visit MoMA around noon, followed by lunch in Midtown
🔍 [Complexity] Query analysis for New York City: {
  level: 'moderate',
  score: 40,
  estimatedTime: 4,
  factors: [
    'Multiple time references',
    'Several activities',
    'Sequential planning required',
    'Detailed query'
  ]
}
🚀 [/:city/plan] Creating city-aware plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Coffee in Greenwich Village at 10am, then visit MoMA around noon, followed by lunch in Midtown
[NLP] Processing query with context for city: New York City
🔄 [nlp-fixed] Attempting lazy AI initialization for new Gemini processor...
🤖 [nlp-fixed] Checking AI_PROCESSING feature flag status: true
🔑 [nlp-fixed] GEMINI_API_KEY validation: true
✅ [nlp-fixed] Initializing Gemini API with valid API key
✅ [nlp-fixed] Gemini API successfully initialized
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee in Greenwich Village at 10am, then visit MoMA around noon, followed by lunch in Midtown
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Greenwich Village",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "12:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "tourist_attraction"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Greenwich Village","searchParameters":{"venueType":"cafe"},"time":"10:00","venuePreference":"cafe","venueRequirements":[]},{"activity":"Visit MoMA","location":"MoMA","searchParameters":{"venueType":"tourist_attraction"},"time":"12:00","venueRequirements":[]},{"activity":"Lunch","location":"Midtown","searchParameters":{"venueType":"restaurant"},"time":"12:00","venuePreference":"restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":0,"children":0}},"processingTimeMs":4349,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee in Greenwich Village at 10am, then visit MoMA around noon, followed by lunch in Midtown\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Greenwich Village\",\n      \"venuePreference\": \"cafe\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\"\n      }\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Visit MoMA\",\n      \"location\": \"MoMA\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"tourist_attraction\"\n      }\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"Midtown\",\n      \"venuePreference\": \"restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 0,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"cb1b127d-0c43-4115-9f01-e543aca77504","status":"success","timestamp":"2025-06-05T21:23:57.984Z","userQuery":"Coffee in Greenwich Village at 10am, then visit MoMA around noon, followed by lunch in Midtown"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Greenwich Village",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "12:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "tourist_attraction"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Greenwich Village, 10:00
Added fixed time entry: Visit MoMA at MoMA, 12:00
Added fixed time entry: Lunch at Midtown, 12:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Greenwich Village",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "tourist_attraction",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Greenwich Village",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "tourist_attraction",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Greenwich Village",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Visit MoMA",
      "location": "MoMA",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "tourist_attraction",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "Midtown",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 0,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Greenwich Village",
    "venuePreference": "cafe",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "cafe",
      "priceLevel": "moderate"
    }
  },
  {
    "time": "12:00",
    "activity": "Visit MoMA",
    "location": "MoMA",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "tourist_attraction",
      "priceLevel": "moderate"
    }
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "Midtown",
    "venuePreference": "restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "restaurant",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as America/New_York time: 10:00 AM (2025-06-05T14:00:00.000Z)
Correctly interpreted time "10:00" as New York City time: 10:00 AM (2025-06-05T14:00:00.000Z)
Found venue preference: "cafe" for activity: Coffee
Processed fixed time entry: Coffee at Greenwich Village, time: 2025-06-05T14:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as America/New_York time: 12:00 PM (2025-06-05T16:00:00.000Z)
Correctly interpreted time "12:00" as New York City time: 12:00 PM (2025-06-05T16:00:00.000Z)
Processed fixed time entry: Visit MoMA at MoMA, time: 2025-06-05T16:00:00.000Z, type: tourist_attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as America/New_York time: 12:00 PM (2025-06-05T16:00:00.000Z)
Correctly interpreted time "12:00" as New York City time: 12:00 PM (2025-06-05T16:00:00.000Z)
Found venue preference: "restaurant" for activity: Lunch
Processed fixed time entry: Lunch at Midtown, time: 2025-06-05T16:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Greenwich Village",
    "MoMA"
  ],
  "fixedTimes": [
    {
      "location": "Greenwich Village",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    },
    {
      "location": "MoMA",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "tourist_attraction",
      "searchTerm": "Visit MoMA",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Midtown",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Greenwich Village" with Google Maps Geocoding API
Geocoding search query: "Greenwich Village, New York City, USA"
Validated "Greenwich Village" as neighborhood: "Greenwich Village"
Validated "Greenwich Village" as neighborhood: "Greenwich Village"
Validating location: "MoMA" with Google Maps Geocoding API
Geocoding search query: "MoMA, New York City, USA"
Validated "MoMA" as locality: "New York"
Validated "MoMA" as neighborhood: "New York"
Validating location: "Greenwich Village" with Google Maps Geocoding API
Geocoding search query: "Greenwich Village, New York City, USA"
Validated "Greenwich Village" as neighborhood: "Greenwich Village"
Validating location: "MoMA" with Google Maps Geocoding API
Geocoding search query: "MoMA, New York City, USA"
Validated "MoMA" as locality: "New York"
Validating location: "Midtown" with Google Maps Geocoding API
Geocoding search query: "Midtown, New York City, USA"
Validated "Midtown" as neighborhood: "Midtown Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Greenwich Village",
    "New York"
  ],
  "fixedTimes": [
    {
      "location": "Greenwich Village",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    },
    {
      "location": "New York",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "tourist_attraction",
      "searchTerm": "Visit MoMA",
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Midtown Manhattan",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'Greenwich Village', 'New York' ],
  fixedTimes: [
    {
      location: 'Greenwich Village',
      time: '2025-06-05T14:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    },
    {
      location: 'New York',
      time: '2025-06-05T16:00:00.000Z',
      type: 'tourist_attraction',
      searchTerm: 'Visit MoMA',
      keywords: undefined,
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Midtown Manhattan',
      time: '2025-06-05T16:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: undefined,
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: 'restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greenwich Village","time":"2025-06-05T14:00:00.000Z","type":"cafe","searchTerm":"Coffee","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to America/New_York time: 2025-06-05 10:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greenwich Village',
  keywords: [ 'cafe' ],
  type: 'cafe',
  preferences: { venuePreference: 'cafe' },
  scheduledDateTime: 2025-06-05T14:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best cafes in Greenwich Village
📍 [enhancedPlaceSearch] Found specific area coordinates for "Greenwich Village": { lat: 40.7336, lng: -74.0027 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7336,-74.0027 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best cafes in Greenwich Village
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T14:00:00.000Z
🕒 [Operating Hours] Validating hours for Caffe Reggio at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Caffe Reggio
✅ [Operating Hours] Caffe Reggio: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Tartinery Café - Bar | Greenwich Village at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Tartinery Café - Bar | Greenwich Village
✅ [Operating Hours] Tartinery Café - Bar | Greenwich Village: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Hungry Llama at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Hungry Llama
✅ [Operating Hours] Hungry Llama: Could not determine operating hours
🕒 [Operating Hours] Validating hours for 787 Coffee at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for 787 Coffee
✅ [Operating Hours] 787 Coffee: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Hungry Llama',
  rating: 4.9,
  address: '679 Washington St, New York, NY 10014, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: '787 Coffee', rating: 4.9 },
  { name: 'Tartinery Café - Bar | Greenwich Village', rating: 4.8 },
  { name: 'Caffe Reggio', rating: 4.3 }
]
🔍 [SERVICE] Place details for "Hungry Llama": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [ 'cafe', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "679 Washington St, New York, NY 10014, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.73394750000001,\n' +
    '      "lng": -74.00837659999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.73529767989272,\n' +
    '        "lng": -74.00705222010727\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.73259802010728,\n' +
    '        "lng": -74.00975187989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Hungry Llama",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108785604032004599387\\">Nitzan Shapira</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSS-9DOSsa13MqSOrWmejbkUBkA6SdeWHYpDE10l-1k7PI6TRUTlgDQoy2sls-MrFfhsW2eku2mvU8kR5iEkmT-4dCWQxq7a7ORsil5oIy5OIAsd4zVkkc5ADAMsh_9Kv1aVroeIYuzxvnqQiGIKHKsMwFEMwi3IHYezNkSzd3ADvdFiV_3xqcnKCJvRLJyH9nh4mdcM-Ea5t6GVnP_icuJTcw8PfGbZtbxf86-2JmngA77B9I80NiRxQv_7scCpwblHeQnOvNIwLP6YxRVlcG0QpF557U-hpuAcNVYyYI4XiwidtGELYDYT9Ox2pn-vql6YU2z3ig7eIYqXTmV8mWgw6qJlfyI1h1fEAz8sq7R3b-fKoELtUNqWfuCcstQZq7-OEF7wx-tMQlvM0PD6fSrB7SqoysGBIJm1nxoRIqP7BkceYDZoCvS94AWfzbA0xCNqvEmTOuw3kEkTRQQaNERUt-OTkpZ_Sd0j9wnxlT-EaiFxBh_V60Rpxtf8PIuc9q6Kj5qO5sAkeKzXg0zKfMJX5BvomnNAqyZSvSB52UNJM-AUSe_kuc-zIFVw_RpgsgVD9Rh",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJFXK3-LdZwokR41IAIP81AvM",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "PXMR+HM New York",\n' +
    '    "global_code": "87G7PXMR+HM"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJFXK3-LdZwokR41IAIP81AvM",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 211\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [ 'cafe', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1602
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Hungry Llama" with details
🔍 [SERVICE] Stored place "Hungry Llama" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'cafe', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Hungry Llama at 2025-06-05T14:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"New York","time":"2025-06-05T16:00:00.000Z","type":"tourist_attraction","searchTerm":"Visit MoMA","minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-05T16:00:00.000Z" to America/New_York time: 2025-06-05 12:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit MoMA',
  location: 'New York',
  keywords: [],
  type: 'tourist_attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T16:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: MoMA
📍 [enhancedPlaceSearch] Using city center for "nyc"
🎯 [enhancedPlaceSearch] Using location bias: 40.7128,-74.006 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: MoMA
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T16:00:00.000Z
🕒 [Operating Hours] Validating hours for The Museum of Modern Art at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for The Museum of Modern Art
✅ [Operating Hours] The Museum of Modern Art: Could not determine operating hours
🕒 [Operating Hours] Validating hours for MoMA Design Store at 2025-06-05T16:00:00.000Z
⚠️ [Operating Hours] No opening hours data for MoMA Design Store
✅ [Operating Hours] MoMA Design Store: No operating hours data available
🕒 [Operating Hours] Validating hours for MoMA at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for MoMA
✅ [Operating Hours] MoMA: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Museum Store at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for The Museum Store
✅ [Operating Hours] The Museum Store: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'MoMA Design Store',
  rating: 4.5,
  address: '81 Spring St, New York, NY 10012, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'The Museum of Modern Art', rating: 4.6 },
  { name: 'The Museum Store', rating: 4.5 },
  { name: 'MoMA', rating: 4.3 }
]
🔍 [SERVICE] Place details for "MoMA Design Store": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [
    'book_store',
    'home_goods_store',
    'store',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'permanently_closed',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "CLOSED_TEMPORARILY",\n' +
    '  "formatted_address": "81 Spring St, New York, NY 10012, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7229688,\n' +
    '      "lng": -73.99799970000001\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72418547989272,\n' +
    '        "lng": -73.99664677010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72148582010728,\n' +
    '        "lng": -73.99934642989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/shopping-71.png",\n' +
    '  "icon_background_color": "#4B96F3",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/shopping_pinlet",\n' +
    '  "name": "MoMA Design Store",\n' +
    '  "permanently_closed": true,\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3456,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105711994202468669368\\">DoYeob Kim</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTurP2h2ouQOCsO-bTbY1JlW1byOFj9cqmKC-Du6rF3ds0n14taWlUBVaa_lHPDczinlKRsAjway3expmhWw7mCSJBEHl9FCjjJoZK3L5cBhuF4B0I73C7xB4TUsAciRU2UzCuz-L5Gq2KSJy-iTiT1QTP0tHo-cqyhuq9E_Kwe7VDf2ogZLZ-HVzal3f2Y3ja06Mh4wvFp7WB3SuwXDSSMkmUDNOOR-p4rQJJUDl7k_PqsTkHI9_Oxo9SR0l2G2Vw6DYHdy_TBpcG2PnzKsoOAsnUBikaYdgymQKw-KtFdp_VGZOJl9z0nRyyhIn8XeGTVpsADFqQ2k0IEu7X30bTibCmz5nLBYGsY2Ssj5a7f-Ia59z6QrHDQLcuFe7tnOXQI2rUrwZaGeYxvd2UxKy0SXYFj_Vblefi5fdCcqROUgiJZ31aGpM74S_lvEFfyJUkDP1-6MhcbeZ7e-pYQcbiJQxeVbFUD4e6x5Xsz4NYXqJ_9-dWCHJv1DvctXE_Faa3MOGfEdi4E-8YhYeM3DlFTL0ySVkkXDcgGsYQqk2N6uj5tZQnFMOwqJwIW3FZTWLmjPpxiPaCAyg",\n' +
    '      "width": 4608\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJa7WF1I5ZwokRqt0Ia4lP2_4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2F2+5R New York",\n' +
    '    "global_code": "87G8P2F2+5R"\n' +
    '  },\n' +
    '  "price_level": 3,\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJa7WF1I5ZwokRqt0Ia4lP2_4",\n' +
    '  "types": [\n' +
    '    "book_store",\n' +
    '    "home_goods_store",\n' +
    '    "store",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2231\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [
    'book_store',
    'home_goods_store',
    'store',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1647
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'permanently_closed',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "MoMA Design Store" with details
🔍 [SERVICE] Stored place "MoMA Design Store" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'permanently_closed',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [
    'book_store',
    'home_goods_store',
    'store',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: MoMA Design Store at 2025-06-05T16:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Midtown Manhattan","time":"2025-06-05T16:00:00.000Z","type":"restaurant","searchTerm":"Lunch","minRating":4,"displayTime":"12:00 PM","searchPreference":"restaurant"}
Parsed ISO timestamp "2025-06-05T16:00:00.000Z" to America/New_York time: 2025-06-05 12:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'Midtown Manhattan',
  keywords: [ 'restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'restaurant' },
  scheduledDateTime: 2025-06-05T16:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best restaurants in Midtown Manhattan
📍 [enhancedPlaceSearch] Found specific area coordinates for "Midtown Manhattan": { lat: 40.7549, lng: -73.984 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7549,-73.984 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Midtown Manhattan
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T16:00:00.000Z
🕒 [Operating Hours] Validating hours for La Grande Boucherie at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for La Grande Boucherie
✅ [Operating Hours] La Grande Boucherie: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Monkey Bar at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Monkey Bar
✅ [Operating Hours] Monkey Bar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Consulate Midtown at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for The Consulate Midtown
✅ [Operating Hours] The Consulate Midtown: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Monterey at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Monterey
✅ [Operating Hours] Monterey: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Monterey',
  rating: 4.8,
  address: '37 E 50th St, New York, NY 10022, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'The Consulate Midtown', rating: 4.7 },
  { name: 'La Grande Boucherie', rating: 4.6 },
  { name: 'Monkey Bar', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Monterey": {
  hasRating: true,
  rating: 4.8,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "37 E 50th St, New York, NY 10022, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7576033,\n' +
    '      "lng": -73.9747191\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75891637989272,\n' +
    '        "lng": -73.97339497010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75621672010728,\n' +
    '        "lng": -73.97609462989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Monterey",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3712,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/116799368200522761504\\">Monterey</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRM5DW9NWY6wg_GXN9trAj5HwJ9AlKS-tSMlVxNOPkhBnUzt0BSgGuxXIh7tehbEDNsjVoNCQQt30w5WqZnnITDzVj0gD8ONoL1Ju-zJKKwOx39aRBFx7uXCUwGvgwGv69uNG0T9IL4VVIiTmV11qkjr-IY6Ryd4BeQ0kYOdMbNQ21owN-zp2tE6CmPIl0fzyrFCp9E5aE7wW8MEKdWNh1hLGn-1G4KtXMw_fSSkpvZw1ZyZdSIhupcsCaWqiShjVXIhB2i3PHLgNaSFysL88yxabSlgq2uPKaBPm3EtXwx5QcDJXI",\n' +
    '      "width": 5568\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJzR4rRNhZwokRUtG7ziNvvPE",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q25G+24 New York",\n' +
    '    "global_code": "87G8Q25G+24"\n' +
    '  },\n' +
    '  "rating": 4.8,\n' +
    '  "reference": "ChIJzR4rRNhZwokRUtG7ziNvvPE",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 842\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1314
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Monterey" with details
🔍 [SERVICE] Stored place "Monterey" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Monterey at 2025-06-05T16:00:00.000Z
Calculating travel times for 3 places in New York City
Travel time from Hungry Llama to MoMA Design Store: 5 minutes
Travel time from MoMA Design Store to Monterey: 13 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee, Visit MoMA, Lunch in New York City" for New York City with ID: 1
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 8772.27ms
[Weather] Fetching weather for 40.73,-74.01
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T14:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 10:00 AM
🔍 [/:city/plan] Place "Hungry Llama" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Hungry Llama": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T16:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "MoMA Design Store" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "MoMA Design Store": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T16:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Monterey" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Monterey": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 3 venues
2025-06-05 14:24:02 INFO [API] POST /api/nyc/plan 200 (8885ms) {
  "statusCode": 200,
  "duration": 8885
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/nyc/plan took 8885.63ms
📝 [/:city/plan] City-specific plan request for: New York City
Query: Authentic pizza in Little Italy at 7pm, then cocktails at a rooftop bar with Manhattan skyline views around 9pm, ending with late night jazz music
🔍 [Complexity] Query analysis for New York City: {
  level: 'moderate',
  score: 32,
  estimatedTime: 4,
  factors: [
    'Multiple time references',
    'Sequential planning required',
    'Detailed query'
  ]
}
🚀 [/:city/plan] Creating city-aware plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Authentic pizza in Little Italy at 7pm, then cocktails at a rooftop bar with Manhattan skyline views around 9pm, ending with late night jazz music
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Authentic pizza in Little Italy at 7pm, then cocktails at a rooftop bar with Manhattan skyline views around 9pm, ending with late night jazz music
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Little Italy",
      "venuePreference": "authentic pizza restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "authentic pizza restaurant"
      }
    },
    {
      "time": "21:00",
      "activity": "Cocktails",
      "location": "Manhattan",
      "venuePreference": "rooftop bar",
      "venueRequirements": [
        "skyline views"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [
          "skyline views"
        ],
        "venuePreference": "rooftop bar"
      }
    },
    {
      "time": "23:00",
      "activity": "Jazz music",
      "location": "Manhattan",
      "venuePreference": "jazz club",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "jazz club"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "pizza",
      "cocktails",
      "jazz music",
      "city views"
    ]
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Dinner","location":"Little Italy","searchParameters":{"cuisine":"Pizza","priceLevel":"moderate","specificRequirements":[],"venuePreference":"authentic pizza restaurant"},"time":"19:00","venuePreference":"authentic pizza restaurant","venueRequirements":[]},{"activity":"Cocktails","location":"Manhattan","searchParameters":{"priceLevel":"moderate","specificRequirements":["skyline views"],"venuePreference":"rooftop bar"},"time":"21:00","venuePreference":"rooftop bar","venueRequirements":["skyline views"]},{"activity":"Jazz music","location":"Manhattan","searchParameters":{"priceLevel":"moderate","specificRequirements":[],"venuePreference":"jazz club"},"time":"23:00","venuePreference":"jazz club","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":["pizza","cocktails","jazz music","city views"],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":5051,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Authentic pizza in Little Italy at 7pm, then cocktails at a rooftop bar with Manhattan skyline views around 9pm, ending with late night jazz music\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"Dinner\",\n      \"location\": \"Little Italy\",\n      \"venuePreference\": \"authentic pizza restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"authentic pizza restaurant\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"Pizza\",\n        \"priceLevel\": \"moderate\"\n      }\n    },\n    {\n      \"time\": \"21:00\",\n      \"activity\": \"Cocktails\",\n      \"location\": \"Manhattan\",\n      \"venuePreference\": \"rooftop bar\",\n      \"venueRequirements\": [\"skyline views\"],\n      \"searchParameters\": {\n        \"venuePreference\": \"rooftop bar\",\n        \"specificRequirements\": [\"skyline views\"],\n        \"priceLevel\": \"moderate\"\n      }\n    },\n    {\n      \"time\": \"23:00\",\n      \"activity\": \"Jazz music\",\n      \"location\": \"Manhattan\",\n      \"venuePreference\": \"jazz club\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"jazz club\",\n        \"specificRequirements\": [],\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": [\"pizza\", \"cocktails\", \"jazz music\", \"city views\"]\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"7e1ed15f-5a15-4d37-8707-5723e6c0b121","status":"success","timestamp":"2025-06-05T21:24:07.581Z","userQuery":"Authentic pizza in Little Italy at 7pm, then cocktails at a rooftop bar with Manhattan skyline views around 9pm, ending with late night jazz music"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Little Italy",
      "venuePreference": "authentic pizza restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "authentic pizza restaurant"
      }
    },
    {
      "time": "21:00",
      "activity": "Cocktails",
      "location": "Manhattan",
      "venuePreference": "rooftop bar",
      "venueRequirements": [
        "skyline views"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [
          "skyline views"
        ],
        "venuePreference": "rooftop bar"
      }
    },
    {
      "time": "23:00",
      "activity": "Jazz music",
      "location": "Manhattan",
      "venuePreference": "jazz club",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "jazz club"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "pizza",
      "cocktails",
      "jazz music",
      "city views"
    ]
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Dinner at Little Italy, 19:00
Added fixed time entry: Cocktails at Manhattan, 21:00
Added fixed time entry: Jazz music at Manhattan, 23:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Little Italy",
      "venuePreference": "authentic pizza restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "authentic pizza restaurant"
      }
    },
    {
      "time": "21:00",
      "activity": "Cocktails",
      "location": "Manhattan",
      "venuePreference": "rooftop bar",
      "venueRequirements": [
        "skyline views"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [
          "skyline views"
        ],
        "venuePreference": "rooftop bar"
      }
    },
    {
      "time": "23:00",
      "activity": "Jazz music",
      "location": "Manhattan",
      "venuePreference": "jazz club",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "jazz club"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "pizza",
      "cocktails",
      "jazz music",
      "city views"
    ]
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Little Italy",
      "venuePreference": "authentic pizza restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "authentic pizza restaurant"
      }
    },
    {
      "time": "21:00",
      "activity": "Cocktails",
      "location": "Manhattan",
      "venuePreference": "rooftop bar",
      "venueRequirements": [
        "skyline views"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [
          "skyline views"
        ],
        "venuePreference": "rooftop bar"
      }
    },
    {
      "time": "23:00",
      "activity": "Jazz music",
      "location": "Manhattan",
      "venuePreference": "jazz club",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "jazz club"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "pizza",
      "cocktails",
      "jazz music",
      "city views"
    ]
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Little Italy",
      "venuePreference": "authentic pizza restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "Pizza",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "authentic pizza restaurant"
      }
    },
    {
      "time": "21:00",
      "activity": "Cocktails",
      "location": "Manhattan",
      "venuePreference": "rooftop bar",
      "venueRequirements": [
        "skyline views"
      ],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [
          "skyline views"
        ],
        "venuePreference": "rooftop bar"
      }
    },
    {
      "time": "23:00",
      "activity": "Jazz music",
      "location": "Manhattan",
      "venuePreference": "jazz club",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "jazz club"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "pizza",
      "cocktails",
      "jazz music",
      "city views"
    ]
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Found raw venuePreference in Gemini fixed time entry: "authentic pizza restaurant" for activity "Dinner"
Found raw venuePreference in Gemini fixed time entry: "rooftop bar" for activity "Cocktails"
Found raw venuePreference in Gemini fixed time entry: "jazz club" for activity "Jazz music"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "19:00",
    "activity": "Dinner",
    "location": "Little Italy",
    "venuePreference": "authentic pizza restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "Pizza",
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "authentic pizza restaurant"
    }
  },
  {
    "time": "21:00",
    "activity": "Cocktails",
    "location": "Manhattan",
    "venuePreference": "rooftop bar",
    "venueRequirements": [
      "skyline views"
    ],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": [
        "skyline views"
      ],
      "venuePreference": "rooftop bar"
    }
  },
  {
    "time": "23:00",
    "activity": "Jazz music",
    "location": "Manhattan",
    "venuePreference": "jazz club",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "jazz club"
    }
  }
]
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as America/New_York time: 7:00 PM (2025-06-05T23:00:00.000Z)
Correctly interpreted time "19:00" as New York City time: 7:00 PM (2025-06-05T23:00:00.000Z)
Found venue preference: "authentic pizza restaurant" for activity: Dinner
Processed fixed time entry: Dinner at Little Italy, time: 2025-06-05T23:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "21:00" to "21:00"
Correctly interpreted time "21:00" as America/New_York time: 9:00 PM (2025-06-06T01:00:00.000Z)
Correctly interpreted time "21:00" as New York City time: 9:00 PM (2025-06-06T01:00:00.000Z)
Found venue preference: "rooftop bar" for activity: Cocktails
Processed fixed time entry: Cocktails at Manhattan, time: 2025-06-06T01:00:00.000Z, type: bar
Fixed time entry: Normalized time from "23:00" to "23:00"
Correctly interpreted time "23:00" as America/New_York time: 11:00 PM (2025-06-06T03:00:00.000Z)
Correctly interpreted time "23:00" as New York City time: 11:00 PM (2025-06-06T03:00:00.000Z)
Found venue preference: "jazz club" for activity: Jazz music
Processed fixed time entry: Jazz music at Manhattan, time: 2025-06-06T03:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Little Italy",
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "Little Italy",
      "time": "2025-06-05T23:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM",
      "searchPreference": "authentic pizza restaurant"
    },
    {
      "location": "Manhattan",
      "time": "2025-06-06T01:00:00.000Z",
      "type": "bar",
      "searchTerm": "Cocktails",
      "keywords": [
        "skyline views"
      ],
      "minRating": 4,
      "displayTime": "9:00 PM",
      "searchPreference": "rooftop bar"
    },
    {
      "location": "Manhattan",
      "time": "2025-06-06T03:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Jazz music",
      "keywords": [],
      "minRating": 4,
      "displayTime": "11:00 PM",
      "searchPreference": "jazz club"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Little Italy" with Google Maps Geocoding API
Geocoding search query: "Little Italy, New York City, USA"
Validated "Little Italy" as neighborhood: "Little Italy"
Validated "Little Italy" as neighborhood: "Little Italy"
Validating location: "Manhattan" with Google Maps Geocoding API
Geocoding search query: "Manhattan, New York City, USA"
Validated "Manhattan" as neighborhood: "Manhattan"
Validated "Manhattan" as neighborhood: "Manhattan"
Validating location: "Little Italy" with Google Maps Geocoding API
Geocoding search query: "Little Italy, New York City, USA"
Validated "Little Italy" as neighborhood: "Little Italy"
Validating location: "Manhattan" with Google Maps Geocoding API
Geocoding search query: "Manhattan, New York City, USA"
Validated "Manhattan" as neighborhood: "Manhattan"
Validating location: "Manhattan" with Google Maps Geocoding API
Geocoding search query: "Manhattan, New York City, USA"
Validated "Manhattan" as neighborhood: "Manhattan"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Little Italy",
    "Manhattan"
  ],
  "fixedTimes": [
    {
      "location": "Little Italy",
      "time": "2025-06-05T23:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM",
      "searchPreference": "authentic pizza restaurant"
    },
    {
      "location": "Manhattan",
      "time": "2025-06-06T01:00:00.000Z",
      "type": "bar",
      "searchTerm": "Cocktails",
      "keywords": [
        "skyline views"
      ],
      "minRating": 4,
      "displayTime": "9:00 PM",
      "searchPreference": "rooftop bar"
    },
    {
      "location": "Manhattan",
      "time": "2025-06-06T03:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Jazz music",
      "keywords": [],
      "minRating": 4,
      "displayTime": "11:00 PM",
      "searchPreference": "jazz club"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
🐌 [Performance] Slow operation detected: nlp_processing took 5553.20ms
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'Little Italy', 'Manhattan' ],
  fixedTimes: [
    {
      location: 'Little Italy',
      time: '2025-06-05T23:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Dinner',
      keywords: [],
      minRating: 4,
      displayTime: '7:00 PM',
      searchPreference: 'authentic pizza restaurant'
    },
    {
      location: 'Manhattan',
      time: '2025-06-06T01:00:00.000Z',
      type: 'bar',
      searchTerm: 'Cocktails',
      keywords: [Array],
      minRating: 4,
      displayTime: '9:00 PM',
      searchPreference: 'rooftop bar'
    },
    {
      location: 'Manhattan',
      time: '2025-06-06T03:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Jazz music',
      keywords: [],
      minRating: 4,
      displayTime: '11:00 PM',
      searchPreference: 'jazz club'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Little Italy","time":"2025-06-05T23:00:00.000Z","type":"restaurant","searchTerm":"Dinner","keywords":[],"minRating":4,"displayTime":"7:00 PM","searchPreference":"authentic pizza restaurant"}
Parsed ISO timestamp "2025-06-05T23:00:00.000Z" to America/New_York time: 2025-06-05 19:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Dinner',
  location: 'Little Italy',
  keywords: [ 'authentic pizza restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'authentic pizza restaurant' },
  scheduledDateTime: 2025-06-05T23:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best authentic pizza restaurant in Little Italy NYC
📍 [enhancedPlaceSearch] Using city center for "nyc"
🎯 [enhancedPlaceSearch] Using location bias: 40.7128,-74.006 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best authentic pizza restaurant in Little Italy NYC
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T23:00:00.000Z
🕒 [Operating Hours] Validating hours for Zia Maria Little Italy at 2025-06-05T23:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:00:00 Thursday, Day: 4, Time: 1900
⚠️ [Operating Hours] Could not determine hours for Zia Maria Little Italy
✅ [Operating Hours] Zia Maria Little Italy: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Pep's on Grand at 2025-06-05T23:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:00:00 Thursday, Day: 4, Time: 1900
⚠️ [Operating Hours] Could not determine hours for Pep's on Grand
✅ [Operating Hours] Pep's on Grand: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Osteria Barocca at 2025-06-05T23:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:00:00 Thursday, Day: 4, Time: 1900
⚠️ [Operating Hours] Could not determine hours for Osteria Barocca
✅ [Operating Hours] Osteria Barocca: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Rubirosa at 2025-06-05T23:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:00:00 Thursday, Day: 4, Time: 1900
⚠️ [Operating Hours] Could not determine hours for Rubirosa
✅ [Operating Hours] Rubirosa: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Zia Maria Little Italy',
  rating: 4.6,
  address: '138 Mulberry St, New York, NY 10013, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: "Pep's on Grand", rating: 4.6 },
  { name: 'Osteria Barocca', rating: 4.6 },
  { name: 'Rubirosa', rating: 4.6 }
]
🔍 [SERVICE] Place details for "Zia Maria Little Italy": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'store',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "138 Mulberry St, New York, NY 10013, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7185143,\n' +
    '      "lng": -73.9974486\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.71995102989273,\n' +
    '        "lng": -73.99620392010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.71725137010728,\n' +
    '        "lng": -73.99890357989271\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Zia Maria Little Italy",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/113415333238690602598\\">Triumf Hyseni</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTDJNoeNyip6sfXwN8uAOsV5pdVRJEyMzNxHVHFmDcjU6Nz_zdqTtOI0wiiv-RY4pedqPWNELy7UzsRMnmuwO-QAh-KYJbw51raIiY97Bvqlw5fooSe0DBIotEFD8WV50lWuny2pgqYySUMUS_T4X3cvG4BAgwQlfyWOX1RD4lEM1q4ZWUX9HdnlbS2EAQFUfxGSwPCrgXQ0VsjDUMcVI8JkicRArV9Li-tq-lkhQPoNkw__e0WgL9TVGL2YQxlMpCQYcoFQmGrMuP-xyk31HK99UOASDV4ogTYhWhSKPQy6XQvvgohpc4epGl9Rt8_fsrJkgah_-PolQJxEaqgHw3YpcwZWy7Kx_N_SIcCMXmvQRWd5cNCp_grRrtLxW0OQKuvJmPwWrIWWvcZ6p-Cmkj36LI5JGN6y5JGpJIrFDG3QAA8ggOZZPw0j_hfhvbyCEBh0lSJ-_hQlU2S9aRZSQ5uWlNN602OZemUHvASqjoqFcNj9HrBoqhqlijdBHDQTghbGZnvZptIhcVnG7ttaAy7QQN-fy1T6M12rivdojUTn5SvPFgUv_RqhXof1pXCMcCuxBn9",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJm7QTo_lZwokRRnjGuJABJPQ",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P293+C2 New York",\n' +
    '    "global_code": "87G8P293+C2"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJm7QTo_lZwokRRnjGuJABJPQ",\n' +
    '  "types": [\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "store",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 5158\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'store',
    'establishment'
  ],
  detailsSize: 1644
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Zia Maria Little Italy" with details
🔍 [SERVICE] Stored place "Zia Maria Little Italy" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'store',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Zia Maria Little Italy at 2025-06-05T23:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Manhattan","time":"2025-06-06T01:00:00.000Z","type":"bar","searchTerm":"Cocktails","keywords":["skyline views"],"minRating":4,"displayTime":"9:00 PM","searchPreference":"rooftop bar"}
Parsed ISO timestamp "2025-06-06T01:00:00.000Z" to America/New_York time: 2025-06-05 21:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Cocktails',
  location: 'Manhattan',
  keywords: [ 'skyline views', 'rooftop bar' ],
  type: 'bar',
  preferences: { venuePreference: 'rooftop bar' },
  scheduledDateTime: 2025-06-06T01:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: "rooftop bar" Manhattan "skyline views"
📍 [enhancedPlaceSearch] Using city center for "nyc"
🎯 [enhancedPlaceSearch] Using location bias: 40.7128,-74.006 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "rooftop bar" Manhattan "skyline views"
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-06T01:00:00.000Z
🕒 [Operating Hours] Validating hours for Vue 180 Rooftop Bar & Lounge at 2025-06-06T01:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 21:00:00 Thursday, Day: 4, Time: 2100
⚠️ [Operating Hours] Could not determine hours for Vue 180 Rooftop Bar & Lounge
✅ [Operating Hours] Vue 180 Rooftop Bar & Lounge: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Spyglass Rooftop Bar at 2025-06-06T01:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 21:00:00 Thursday, Day: 4, Time: 2100
⚠️ [Operating Hours] Could not determine hours for Spyglass Rooftop Bar
✅ [Operating Hours] Spyglass Rooftop Bar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Skylark - Rooftop Bar at 2025-06-06T01:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 21:00:00 Thursday, Day: 4, Time: 2100
⚠️ [Operating Hours] Could not determine hours for The Skylark - Rooftop Bar
✅ [Operating Hours] The Skylark - Rooftop Bar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for 230 Fifth Rooftop Bar at 2025-06-06T01:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 21:00:00 Thursday, Day: 4, Time: 2100
⚠️ [Operating Hours] Could not determine hours for 230 Fifth Rooftop Bar
✅ [Operating Hours] 230 Fifth Rooftop Bar: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Skylark - Rooftop Bar',
  rating: 4.4,
  address: '200 W 39th St, New York, NY 10018, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Vue 180 Rooftop Bar & Lounge', rating: 4.4 },
  { name: 'Spyglass Rooftop Bar', rating: 4.3 },
  { name: '230 Fifth Rooftop Bar', rating: 4.3 }
]
🔍 [SERVICE] Place details for "The Skylark - Rooftop Bar": {
  hasRating: true,
  rating: 4.4,
  hasTypes: true,
  types: [ 'night_club', 'bar', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "200 W 39th St, New York, NY 10018, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7541889,\n' +
    '      "lng": -73.9888567\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.75563812989272,\n' +
    '        "lng": -73.98754567010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75293847010727,\n' +
    '        "lng": -73.99024532989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "The Skylark - Rooftop Bar",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3066,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/117043117783947416633\\">Dimitrios Spyropoulos</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQZ38FZpOe4eioQKlzo1IkCXBkvwpYkVOOLork-muJugX70akDjrcdSAQFx8kEpyyXNoKhy4QDESgFwVuVNpZn6xLDbfHKZ0wEZwb7dI1lmrsNLAwerBFQW4k0P_5BWAyOmPezU1b9HUQHtGNZWP6fDfpgMmvGVTFeqEXXPaXlTUcbbDPtbiID74ymskfQNeXhU4XussHAGowmuUi3fb3XLjTDZLwMbgWjXujwSBxsXIHSTy8rWA5dRsv9mxzqPXpLTYsth8MGDA3paQK7wNlEpG2-ULrfXVSz_FbS4MBPzHcWWlBSgIEL2CA2QUaOoa1lUv0iXYn76BA0VMrEdQGRh4BYJ340BBUZHURixQO4yUedJ4al4rDIv4253f-cLSGJWSHreAm-zmvoNy19fcoUY7Aeky6j7WUW0_d8HFdoZLcqjvZIXPVzz3RwOP59UHCr7UaBfHGhu9Np2WQQaRmUl5tizB4zCC-V1Gw_4bdngxVKZzhWlZ6SA735YtYtOpy8Nwgf0O0RI0QKLyxLot9gvbQYOa0RVcQk_Bi9cQ3IF-JSn15M6zql8L_3CRFDf9HAeEckj",\n' +
    '      "width": 4088\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJtcPJYqtZwokRiiFBAJz8krQ",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q236+MF New York",\n' +
    '    "global_code": "87G8Q236+MF"\n' +
    '  },\n' +
    '  "price_level": 3,\n' +
    '  "rating": 4.4,\n' +
    '  "reference": "ChIJtcPJYqtZwokRiiFBAJz8krQ",\n' +
    '  "types": [\n' +
    '    "night_club",\n' +
    '    "bar",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 1865\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.4,
  types: [ 'night_club', 'bar', 'point_of_interest', 'establishment' ],
  detailsSize: 1624
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The Skylark - Rooftop Bar" with details
🔍 [SERVICE] Stored place "The Skylark - Rooftop Bar" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.4,
  types: [ 'night_club', 'bar', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: The Skylark - Rooftop Bar at 2025-06-06T01:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Manhattan","time":"2025-06-06T03:00:00.000Z","type":"attraction","searchTerm":"Jazz music","keywords":[],"minRating":4,"displayTime":"11:00 PM","searchPreference":"jazz club"}
Parsed ISO timestamp "2025-06-06T03:00:00.000Z" to America/New_York time: 2025-06-05 23:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Jazz music',
  location: 'Manhattan',
  keywords: [ 'jazz club' ],
  type: 'attraction',
  preferences: { venuePreference: 'jazz club' },
  scheduledDateTime: 2025-06-06T03:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best jazz clubs in Manhattan
📍 [enhancedPlaceSearch] Using city center for "nyc"
🎯 [enhancedPlaceSearch] Using location bias: 40.7128,-74.006 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best jazz clubs in Manhattan
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-06T03:00:00.000Z
🕒 [Operating Hours] Validating hours for Birdland Jazz Club at 2025-06-06T03:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 23:00:00 Thursday, Day: 4, Time: 2300
⚠️ [Operating Hours] Could not determine hours for Birdland Jazz Club
✅ [Operating Hours] Birdland Jazz Club: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Smalls Jazz Club at 2025-06-06T03:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 23:00:00 Thursday, Day: 4, Time: 2300
⚠️ [Operating Hours] Could not determine hours for Smalls Jazz Club
✅ [Operating Hours] Smalls Jazz Club: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Smoke Jazz & Supper Club at 2025-06-06T03:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 23:00:00 Thursday, Day: 4, Time: 2300
⚠️ [Operating Hours] Could not determine hours for Smoke Jazz & Supper Club
✅ [Operating Hours] Smoke Jazz & Supper Club: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Village Vanguard at 2025-06-06T03:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 23:00:00 Thursday, Day: 4, Time: 2300
⚠️ [Operating Hours] Could not determine hours for Village Vanguard
✅ [Operating Hours] Village Vanguard: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Birdland Jazz Club',
  rating: 4.7,
  address: '315 W 44th St, New York, NY 10036, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Smalls Jazz Club', rating: 4.6 },
  { name: 'Village Vanguard', rating: 4.6 },
  { name: 'Smoke Jazz & Supper Club', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Birdland Jazz Club": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'night_club',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "315 W 44th St, New York, NY 10036, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7589786,\n' +
    '      "lng": -73.9896085\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.76030887989272,\n' +
    '        "lng": -73.98835327010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.75760922010727,\n' +
    '        "lng": -73.99105292989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "Birdland Jazz Club",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/113009673485845309284\\">Veruska Reho</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRin8hDfSf7z9IkMHaPDvQnzR9EN7y6vs34nZ8-Jg_cEB44_EzbVpNE0GPJDSTeWoFxDxS1TbUfQKGihUkfp3tKDgoJ4tUaCldS-K2fJdkOjGP6X50PaA9PiXsgk_R8pFf6bPvmAGfrzkjoistXfLnnzQLT95hvTzsn2dlO92j35pBrDMJisho-IbSh93ECdJx0fdWkUbDNdrULpNWAZw3DZKAO4SH08ASjsOUjESORcbnL1F0v8_xJ0ND1QKpTRo712KuG5wudhEjt57Cw1sIXh45QTjS9rPWRybKrNmQXlSOmy7yEHKemSYR3nnBc298CphKSIaKGa8aq3dPzj6sy8-I9DTLbSV2DWAhTT37rmpvMYnrEM0ePBtOrkvGIPmMTteA13Ymn1tHFs1cLInSBr3ANpxEk9GtKsjrsSAUOPDR7CdyD1KhWcxB45a9r-y115a_v-JsUN-GQJTYr0M0R48SG9KuJFABJ4y27pgQaFmeCKMI_pFbr-yuTTD85GDvGAo4GJOl3g8enDWNqNRLx3dc8GU_EYK5RVHhz2O8zT5ap8Zxti7dj4JuZVf7YY5nziUw4",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJdc9EhVNYwokR-naSYfm_Urc",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "Q256+H5 New York",\n' +
    '    "global_code": "87G8Q256+H5"\n' +
    '  },\n' +
    '  "price_level": 3,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJdc9EhVNYwokR-naSYfm_Urc",\n' +
    '  "types": [\n' +
    '    "night_club",\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 4311\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'night_club',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1628
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Birdland Jazz Club" with details
🔍 [SERVICE] Stored place "Birdland Jazz Club" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'night_club',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Birdland Jazz Club at 2025-06-06T03:00:00.000Z
Calculating travel times for 3 places in New York City
Travel time from Zia Maria Little Italy to The Skylark - Rooftop Bar: 12 minutes
Travel time from The Skylark - Rooftop Bar to Birdland Jazz Club: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Dinner, Cocktails, Jazz music in New York City" for New York City with ID: 2
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 10205.24ms
[Weather] Fetching weather for 40.72,-74
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T23:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 7:00 PM
🔍 [/:city/plan] Place "Zia Maria Little Italy" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Zia Maria Little Italy": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-06T01:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 9:00 PM
🔍 [/:city/plan] Place "The Skylark - Rooftop Bar" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "The Skylark - Rooftop Bar": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-06T03:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 11:00 PM
🔍 [/:city/plan] Place "Birdland Jazz Club" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Birdland Jazz Club": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 3 venues
2025-06-05 14:24:12 INFO [API] POST /api/nyc/plan 200 (10253ms) {
  "statusCode": 200,
  "duration": 10253
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/nyc/plan took 10253.39ms
📝 [/:city/plan] City-specific plan request for: New York City
Query: Quick breakfast near Penn Station at 8am, then business lunch in Financial District at 1pm
🔍 [Complexity] Query analysis for New York City: {
  level: 'moderate',
  score: 36,
  estimatedTime: 4,
  factors: [
    'Some time complexity',
    'Several activities',
    'Sequential planning required',
    'Special occasion planning'
  ]
}
🚀 [/:city/plan] Creating city-aware plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Quick breakfast near Penn Station at 8am, then business lunch in Financial District at 1pm
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Quick breakfast near Penn Station at 8am, then business lunch in Financial District at 1pm
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "breakfast",
      "location": "Penn Station area",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "13:00",
      "activity": "business lunch",
      "location": "Financial District",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"breakfast","location":"Penn Station area","searchParameters":{"specificRequirements":[]},"time":"08:00","venueRequirements":[]},{"activity":"business lunch","location":"Financial District","searchParameters":{"specificRequirements":[]},"time":"13:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":4657,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Quick breakfast near Penn Station at 8am, then business lunch in Financial District at 1pm\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"08:00\",\n      \"activity\": \"breakfast\",\n      \"location\": \"Penn Station area\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"business lunch\",\n      \"location\": \"Financial District\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"9b731499-1bd4-45fc-9ebe-cd1874e5cad9","status":"success","timestamp":"2025-06-05T21:24:17.453Z","userQuery":"Quick breakfast near Penn Station at 8am, then business lunch in Financial District at 1pm"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "breakfast",
      "location": "Penn Station area",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "13:00",
      "activity": "business lunch",
      "location": "Financial District",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: breakfast at Penn Station area, 08:00
Added fixed time entry: business lunch at Financial District, 13:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "breakfast",
      "location": "Penn Station area",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "13:00",
      "activity": "business lunch",
      "location": "Financial District",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "breakfast",
      "location": "Penn Station area",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "13:00",
      "activity": "business lunch",
      "location": "Financial District",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "08:00",
      "activity": "breakfast",
      "location": "Penn Station area",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "13:00",
      "activity": "business lunch",
      "location": "Financial District",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "08:00",
    "activity": "breakfast",
    "location": "Penn Station area",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "13:00",
    "activity": "business lunch",
    "location": "Financial District",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "08:00" to "08:00"
Correctly interpreted time "08:00" as America/New_York time: 8:00 AM (2025-06-05T12:00:00.000Z)
Correctly interpreted time "08:00" as New York City time: 8:00 AM (2025-06-05T12:00:00.000Z)
Processed fixed time entry: breakfast at Penn Station area, time: 2025-06-05T12:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "13:00" to "13:00"
Correctly interpreted time "13:00" as America/New_York time: 1:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "13:00" as New York City time: 1:00 PM (2025-06-05T17:00:00.000Z)
Processed fixed time entry: business lunch at Financial District, time: 2025-06-05T17:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Penn Station area",
    "Financial District"
  ],
  "fixedTimes": [
    {
      "location": "Penn Station area",
      "time": "2025-06-05T12:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "breakfast",
      "keywords": [],
      "minRating": 4,
      "displayTime": "8:00 AM"
    },
    {
      "location": "Financial District",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "business lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Penn Station area" with Google Maps Geocoding API
Geocoding search query: "Penn Station area, New York City, USA"
Preserving landmark name: "Penn Station area"
Validated "Penn Station area" as neighborhood: "Penn Station area"
Validating location: "Financial District" with Google Maps Geocoding API
Geocoding search query: "Financial District, New York City, USA"
Validated "Financial District" as neighborhood: "Financial District"
Validated "Financial District" as neighborhood: "Financial District"
Validating location: "Penn Station area" with Google Maps Geocoding API
Geocoding search query: "Penn Station area, New York City, USA"
Preserving landmark name: "Penn Station area"
Validating location: "Financial District" with Google Maps Geocoding API
Geocoding search query: "Financial District, New York City, USA"
Validated "Financial District" as neighborhood: "Financial District"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Penn Station area",
    "Financial District"
  ],
  "fixedTimes": [
    {
      "location": "Penn Station area",
      "time": "2025-06-05T12:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "breakfast",
      "keywords": [],
      "minRating": 4,
      "displayTime": "8:00 AM"
    },
    {
      "location": "Financial District",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "business lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "1:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
🐌 [Performance] Slow operation detected: nlp_processing took 5016.51ms
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'Penn Station area', 'Financial District' ],
  fixedTimes: [
    {
      location: 'Penn Station area',
      time: '2025-06-05T12:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'breakfast',
      keywords: [],
      minRating: 4,
      displayTime: '8:00 AM',
      searchPreference: undefined
    },
    {
      location: 'Financial District',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'business lunch',
      keywords: [],
      minRating: 4,
      displayTime: '1:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Penn Station area","time":"2025-06-05T12:00:00.000Z","type":"restaurant","searchTerm":"breakfast","keywords":[],"minRating":4,"displayTime":"8:00 AM"}
Parsed ISO timestamp "2025-06-05T12:00:00.000Z" to America/New_York time: 2025-06-05 08:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'breakfast',
  location: 'Penn Station area',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T12:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best breakfast restaurants near Penn Station NYC
📍 [enhancedPlaceSearch] Using city center for "nyc"
🎯 [enhancedPlaceSearch] Using location bias: 40.7128,-74.006 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best breakfast restaurants near Penn Station NYC
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T12:00:00.000Z
🕒 [Operating Hours] Validating hours for The Landing at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 08:00:00 Thursday, Day: 4, Time: 0800
⚠️ [Operating Hours] Could not determine hours for The Landing
✅ [Operating Hours] The Landing: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Good Morning Breakfast at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 08:00:00 Thursday, Day: 4, Time: 0800
⚠️ [Operating Hours] Could not determine hours for Good Morning Breakfast
✅ [Operating Hours] Good Morning Breakfast: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Friedman's Herald Square at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 08:00:00 Thursday, Day: 4, Time: 0800
⚠️ [Operating Hours] Could not determine hours for Friedman's Herald Square
✅ [Operating Hours] Friedman's Herald Square: Could not determine operating hours
🕒 [Operating Hours] Validating hours for In Common NYC - A Breakfast & Brunch Restaurant at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 08:00:00 Thursday, Day: 4, Time: 0800
⚠️ [Operating Hours] Could not determine hours for In Common NYC - A Breakfast & Brunch Restaurant
✅ [Operating Hours] In Common NYC - A Breakfast & Brunch Restaurant: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: "Friedman's Herald Square",
  rating: 4.4,
  address: '138 W 31st St, New York, NY 10001, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Good Morning Breakfast', rating: 4.9 },
  { name: 'The Landing', rating: 4.6 },
  {
    name: 'In Common NYC - A Breakfast & Brunch Restaurant',
    rating: 4.6
  }
]
🔍 [SERVICE] Place details for "Friedman's Herald Square": {
  hasRating: true,
  rating: 4.4,
  hasTypes: true,
  types: [
    'meal_takeaway',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "138 W 31st St, New York, NY 10001, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7485089,\n' +
    '      "lng": -73.9908866\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.74981837989272,\n' +
    '        "lng": -73.98933767010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.74711872010728,\n' +
    '        "lng": -73.99203732989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    `  "name": "Friedman's Herald Square",\n` +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/101532166875651454917\\">Koda Ko</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRsGD8c6Gaz2AE-P8I1oAvcancQkWX4cCSFNl8cbtNt3H-XzLA9DmvSZEdO5b9muXS90kgv8Qbx8F7wbbkolk_6_qxg99ipH8wchX4CQJzSxzGfu_UJlNVO8dkdTxpoSgdFwagTWmJhLUy7fn70VxAuNDJiv84sQOCaaAOEvvSas4DvytAFruY1SH59uN6QumNgXohRQzuIp0Bgo3s31d10ezL3rp6rd9Y83yjTr1kRsdEMMdGAOdtr9r0HZHbC1nigFOgj5dKe5yoMMxW995nUI8Osz3dhoTnin6dR4sPy1TVoGMMi1qjIaN18wxuq9Wpx-N9elggdWHsXaoF517p9AL7hntZ8MrtFTf4Ul6072Dc9TwxPg9kHwTrO95bV4aBwn2WvNv-5jFEMSSV4MQ3BLiiynbhHvKFi-EyvTf7sTKfBpU2QkNge45cU5nszxKswGQK9fCJijbkt-CJ5Rjt1qYiA6U74gh4dSYuUtCIva7GMs3ZQmtIQrmIMst__cK75gXZbq_mji4pMVo8AQ3hiw9UPqatJFXspXMEjUV0I2ZhztMq0VqaZuIsGF5z_hFxl_sEy",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJUQz7Iq9ZwokR9GUmlcrIeGs",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P2X5+CJ New York",\n' +
    '    "global_code": "87G8P2X5+CJ"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.4,\n' +
    '  "reference": "ChIJUQz7Iq9ZwokR9GUmlcrIeGs",\n' +
    '  "types": [\n' +
    '    "meal_takeaway",\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 4062\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.4,
  types: [
    'meal_takeaway',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1646
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Friedman's Herald Square" with details
🔍 [SERVICE] Stored place "Friedman's Herald Square" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.4,
  types: [
    'meal_takeaway',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Friedman's Herald Square at 2025-06-05T12:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Financial District","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"business lunch","keywords":[],"minRating":4,"displayTime":"1:00 PM"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to America/New_York time: 2025-06-05 13:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'business lunch',
  location: 'Financial District',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: best restaurants for business lunch in Financial District
📍 [enhancedPlaceSearch] Found specific area coordinates for "Financial District": { lat: 40.7075, lng: -74.0113 }
🎯 [enhancedPlaceSearch] Using location bias: 40.7075,-74.0113 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants for business lunch in Financial District
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for Manhatta at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Manhatta
✅ [Operating Hours] Manhatta: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Giardino D'Oro at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Giardino D'Oro
✅ [Operating Hours] Giardino D'Oro: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Malt House at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for The Malt House
✅ [Operating Hours] The Malt House: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Da Claudio at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Da Claudio
✅ [Operating Hours] Da Claudio: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Malt House',
  rating: 4.3,
  address: '9 Maiden Ln, New York, NY 10038, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Manhatta', rating: 4.7 },
  { name: "Giardino D'Oro", rating: 4.4 },
  { name: 'Da Claudio', rating: 4.4 }
]
🔍 [SERVICE] Place details for "The Malt House": {
  hasRating: true,
  rating: 4.3,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "9 Maiden Ln, New York, NY 10038, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7096649,\n' +
    '      "lng": -74.0093444\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.71094477989272,\n' +
    '        "lng": -74.00804082010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.70824512010727,\n' +
    '        "lng": -74.01074047989273\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "The Malt House",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1494,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105608143076785812334\\">The Malt House</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTGDVwzsF-NQv1rQj_Kz39AR9DXi4-nQrTKHuS4GZFIjuKruk6PFn1RTsBfn4WumbJCSl9tccNq2sX0F7PNezAAANxpiJst5_1SAPG_pXnqsE3bKOnV-NXZxFMSprz-YYYmGAXKbmM9sTEoWK7WuNmEElI-ctGDUv0gvIkbcfB3lQPk8gKKy284ieFChHu5INvQJCNTzfBE-0j5PQKAInC_w1uplJAA97kitrJXXr696H_e6eI4uxOxnLIP3_fZDJ4vqUPpmbX2MS99xSi8r4QGqoNkQgr7pFkZusstcV65NMkaDcQ",\n' +
    '      "width": 2232\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJT4JpKxhawokRJsGwYfLpp60",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "PX5R+V7 New York",\n' +
    '    "global_code": "87G7PX5R+V7"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.3,\n' +
    '  "reference": "ChIJT4JpKxhawokRJsGwYfLpp60",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2028\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.3,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1342
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The Malt House" with details
🔍 [SERVICE] Stored place "The Malt House" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.3,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: The Malt House at 2025-06-05T17:00:00.000Z
Calculating travel times for 2 places in New York City
Travel time from Friedman's Herald Square to The Malt House: 14 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "breakfast, business lunch in New York City" for New York City with ID: 3
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 8916.01ms
[Weather] Fetching weather for 40.75,-73.99
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T12:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 8:00 AM
🔍 [/:city/plan] Place "Friedman's Herald Square" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Friedman's Herald Square": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T17:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 1:00 PM
🔍 [/:city/plan] Place "The Malt House" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "The Malt House": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 2 venues
2025-06-05 14:24:21 INFO [API] POST /api/nyc/plan 200 (8963ms) {
  "statusCode": 200,
  "duration": 8963
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/nyc/plan took 8963.03ms
📝 [/:city/plan] City-specific plan request for: New York City
Query: Great brunch place in SoHo
🔍 [Complexity] Query analysis for New York City: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🚀 [/:city/plan] Creating city-aware plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Great brunch place in SoHo
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Great brunch place in SoHo
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "brunch",
      "location": "SoHo",
      "venuePreference": "great brunch place",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "brunch",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "great brunch place"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"brunch","location":"SoHo","searchParameters":{"cuisine":"brunch","priceLevel":"moderate","specificRequirements":[],"venuePreference":"great brunch place"},"time":"12:00","venuePreference":"great brunch place","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"relaxed"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":3630,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Great brunch place in SoHo\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"brunch\",\n      \"location\": \"SoHo\",\n      \"venuePreference\": \"great brunch place\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"great brunch place\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"brunch\",\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"relaxed\",\n    \"interests\": []\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"2f327cde-482a-45eb-baf0-a37b2a9575fb","status":"success","timestamp":"2025-06-05T21:24:25.397Z","userQuery":"Great brunch place in SoHo"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "brunch",
      "location": "SoHo",
      "venuePreference": "great brunch place",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "brunch",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "great brunch place"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: brunch at SoHo, 12:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "brunch",
      "location": "SoHo",
      "venuePreference": "great brunch place",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "brunch",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "great brunch place"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "brunch",
      "location": "SoHo",
      "venuePreference": "great brunch place",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "brunch",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "great brunch place"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "brunch",
      "location": "SoHo",
      "venuePreference": "great brunch place",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "brunch",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "great brunch place"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Midtown"
}
Found raw venuePreference in Gemini fixed time entry: "great brunch place" for activity "brunch"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "brunch",
    "location": "SoHo",
    "venuePreference": "great brunch place",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "brunch",
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "great brunch place"
    }
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as America/New_York time: 12:00 PM (2025-06-05T16:00:00.000Z)
Correctly interpreted time "12:00" as New York City time: 12:00 PM (2025-06-05T16:00:00.000Z)
Found venue preference: "great brunch place" for activity: brunch
Processed fixed time entry: brunch at SoHo, time: 2025-06-05T16:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "brunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "great brunch place"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Validated "SoHo" as neighborhood: "SoHo"
Validating location: "SoHo" with Google Maps Geocoding API
Geocoding search query: "SoHo, New York City, USA"
Validated "SoHo" as neighborhood: "SoHo"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "SoHo"
  ],
  "fixedTimes": [
    {
      "location": "SoHo",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "brunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "great brunch place"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'SoHo' ],
  fixedTimes: [
    {
      location: 'SoHo',
      time: '2025-06-05T16:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'brunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: 'great brunch place'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
Parsed time "12:00" to normalized time "12:00" and America/New_York time: 12:00 PM (2025-06-06 12:00:00 EDT)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"SoHo","time":"2025-06-05T16:00:00.000Z","type":"restaurant","searchTerm":"brunch","keywords":[],"minRating":4,"displayTime":"12:00 PM","searchPreference":"great brunch place"}
Parsed ISO timestamp "2025-06-05T16:00:00.000Z" to America/New_York time: 2025-06-05 12:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'brunch',
  location: 'SoHo',
  keywords: [ 'great brunch place' ],
  type: 'restaurant',
  preferences: { venuePreference: 'great brunch place' },
  scheduledDateTime: 2025-06-05T16:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: "great brunch place" SoHo restaurant
📍 [enhancedPlaceSearch] Found specific area coordinates for "SoHo": { lat: 40.722, lng: -74.0002 }
🎯 [enhancedPlaceSearch] Using location bias: 40.722,-74.0002 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "great brunch place" SoHo restaurant
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T16:00:00.000Z
🕒 [Operating Hours] Validating hours for Odd Sister at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Odd Sister
✅ [Operating Hours] Odd Sister: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Twenty Three Grand at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Twenty Three Grand
✅ [Operating Hours] Twenty Three Grand: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Jack's Wife Freda at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Jack's Wife Freda
✅ [Operating Hours] Jack's Wife Freda: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Sadelle's New York at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Sadelle's New York
✅ [Operating Hours] Sadelle's New York: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Twenty Three Grand',
  rating: 4.2,
  address: '23 Grand St, New York, NY 10013, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Odd Sister', rating: 4.6 },
  { name: "Jack's Wife Freda", rating: 4.4 },
  { name: "Sadelle's New York", rating: 4.3 }
]
🔍 [SERVICE] Place details for "Twenty Three Grand": {
  hasRating: true,
  rating: 4.2,
  hasTypes: true,
  types: [
    'night_club',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "23 Grand St, New York, NY 10013, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.7227566,\n' +
    '      "lng": -74.0048411\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.72415702989273,\n' +
    '        "lng": -74.00340047010728\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.72145737010728,\n' +
    '        "lng": -74.00610012989272\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Twenty Three Grand",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1616,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/100493690661652707074\\">Jenn Back</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQKhLuKZEIaImyxmXqD3kE-DgxTTy6vfmRhA536aeQ_JStlXtkfNKSfw03lNbhoI3O1a9uXuYwJO4OqaR3iRKl4Ox4EhIe0Mz5Ga39WvUIP6lTNkM9HKjgEhZH5bs8FYUAA_Trxf72jOWRsQlcXL-tDOwRkclzB1rtS9uQZk1MsybfUljvZErB-Pbh7O6zSJwWa4aDKq_isuOp18eQ1TynIXs2aT3SElmqIOXxa1Lyguao-oy4g7PqamoklhNPIUSdIm5UcWlqSquZ7QJFZ6ZzUfqgI7y-WgmwpxG_OQ3WHVTwfMJNxd-aBurH90jXP8ywEYaJPK-yuwmmGZAwVCNjT3aKeObVyrtx9dnoZpofjWtr5c9fqcHjM6LCtlJLZBZyaBU3aueuQAyV4r6iaHoazBUGzWr1nsU-_RzkneOqYNd_vAe01g42M9m3m_1wdS1Ec1i45zBIcZB08-d4Aw4oFGoR4W68SGKQLYNT49zNg_FAROQX7MBNDMfNKmRu9NFiZknjXIcf8m8Arcj7pLNBrfP0iOONMjI_a_FBjGqI2_zTf7CXrHCeQv1dmb9sLVc-cp1Bu",\n' +
    '      "width": 1080\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJNYq1o5NZwokRwA5gruCwaFo",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "PXFW+43 New York",\n' +
    '    "global_code": "87G7PXFW+43"\n' +
    '  },\n' +
    '  "rating": 4.2,\n' +
    '  "reference": "ChIJNYq1o5NZwokRwA5gruCwaFo",\n' +
    '  "types": [\n' +
    '    "night_club",\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 327\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.2,
  types: [
    'night_club',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1620
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Twenty Three Grand" with details
🔍 [SERVICE] Stored place "Twenty Three Grand" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.2,
  types: [
    'night_club',
    'bar',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Twenty Three Grand at 2025-06-05T16:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "brunch in New York City" for New York City with ID: 4
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 5494.10ms
[Weather] Using cached data for 40.72,-74
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T16:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Twenty Three Grand" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Twenty Three Grand": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 1 venues
2025-06-05 14:24:27 INFO [API] POST /api/nyc/plan 200 (5498ms) {
  "statusCode": 200,
  "duration": 5498
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/nyc/plan took 5497.84ms
📝 [/:city/plan] City-specific plan request for: New York City
Query: Third wave coffee shop with single origin beans and expert baristas in Brooklyn
🔍 [Complexity] Query analysis for New York City: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🚀 [/:city/plan] Creating city-aware plan for New York City
🏙️ Creating plan for city: nyc
🚀 Creating plan for query: Third wave coffee shop with single origin beans and expert baristas in Brooklyn
[NLP] Processing query with context for city: New York City
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Third wave coffee shop with single origin beans and expert baristas in Brooklyn
🚀 [nlp-fixed] CityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Brooklyn",
      "venuePreference": "third wave coffee shop with single origin beans and expert baristas",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": [],
        "venuePreference": "third wave coffee shop with single origin beans and expert baristas"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Brooklyn","searchParameters":{"specificRequirements":[],"venuePreference":"third wave coffee shop with single origin beans and expert baristas"},"time":"12:00","venuePreference":"third wave coffee shop with single origin beans and expert baristas","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":3181,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for New York City. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common New York City locations: \"SoHo\", \"Greenwich Village\", \"Upper East Side\", \"Midtown\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * New York City landmarks include: MoMA, Met, Natural History Museum\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (MoMA, Met, Natural History Museum)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Midtown\"\n       - No location → \"Midtown\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable New York City-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"New York City location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Third wave coffee shop with single origin beans and expert baristas in Brooklyn\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Brooklyn\",\n      \"venuePreference\": \"third wave coffee shop with single origin beans and expert baristas\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"third wave coffee shop with single origin beans and expert baristas\",\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"c254e2e6-4a6d-43e3-a7d9-5ca1d70a1bde","status":"success","timestamp":"2025-06-05T21:24:30.452Z","userQuery":"Third wave coffee shop with single origin beans and expert baristas in Brooklyn"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Brooklyn",
      "venuePreference": "third wave coffee shop with single origin beans and expert baristas",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": [],
        "venuePreference": "third wave coffee shop with single origin beans and expert baristas"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Brooklyn, 12:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Brooklyn",
      "venuePreference": "third wave coffee shop with single origin beans and expert baristas",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "third wave coffee shop with single origin beans and expert baristas"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Brooklyn",
      "venuePreference": "third wave coffee shop with single origin beans and expert baristas",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "third wave coffee shop with single origin beans and expert baristas"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Coffee",
      "location": "Brooklyn",
      "venuePreference": "third wave coffee shop with single origin beans and expert baristas",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "third wave coffee shop with single origin beans and expert baristas"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Midtown"
}
Found raw venuePreference in Gemini fixed time entry: "third wave coffee shop with single origin beans and expert baristas" for activity "Coffee"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "Coffee",
    "location": "Brooklyn",
    "venuePreference": "third wave coffee shop with single origin beans and expert baristas",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "third wave coffee shop with single origin beans and expert baristas"
    }
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as America/New_York time: 12:00 PM (2025-06-05T16:00:00.000Z)
Correctly interpreted time "12:00" as New York City time: 12:00 PM (2025-06-05T16:00:00.000Z)
Found venue preference: "third wave coffee shop with single origin beans and expert baristas" for activity: Coffee
Processed fixed time entry: Coffee at Brooklyn, time: 2025-06-05T16:00:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Midtown",
  "destinations": [
    "Brooklyn"
  ],
  "fixedTimes": [
    {
      "location": "Brooklyn",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "third wave coffee shop with single origin beans and expert baristas"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Brooklyn" with Google Maps Geocoding API
Geocoding search query: "Brooklyn, New York City, USA"
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validated "Brooklyn" as neighborhood: "Brooklyn"
Validating location: "Brooklyn" with Google Maps Geocoding API
Geocoding search query: "Brooklyn, New York City, USA"
Validated "Brooklyn" as neighborhood: "Brooklyn"
Final processed Gemini result: {
  "startLocation": "Midtown",
  "destinations": [
    "Brooklyn"
  ],
  "fixedTimes": [
    {
      "location": "Brooklyn",
      "time": "2025-06-05T16:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "third wave coffee shop with single origin beans and expert baristas"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Midtown',
  destinations: [ 'Brooklyn' ],
  fixedTimes: [
    {
      location: 'Brooklyn',
      time: '2025-06-05T16:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: 'third wave coffee shop with single origin beans and expert baristas'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Midtown
📍 Determined initial search/start location: Midtown
Parsed time "12:00" to normalized time "12:00" and America/New_York time: 12:00 PM (2025-06-06 12:00:00 EDT)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Brooklyn","time":"2025-06-05T16:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"12:00 PM","searchPreference":"third wave coffee shop with single origin beans and expert baristas"}
Parsed ISO timestamp "2025-06-05T16:00:00.000Z" to America/New_York time: 2025-06-05 12:00:00 EDT
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Brooklyn',
  keywords: [
    'third wave coffee shop with single origin beans and expert baristas'
  ],
  type: 'cafe',
  preferences: {
    venuePreference: 'third wave coffee shop with single origin beans and expert baristas'
  },
  scheduledDateTime: 2025-06-05T16:00:00.000Z,
  cityContext: { name: 'New York City', slug: 'nyc', timezone: 'America/New_York' }
}
🤖 [Gemini] Enhanced query: "third wave coffee shop with single origin beans and expert baristas" Brooklyn
📍 [enhancedPlaceSearch] Found specific area coordinates for "Brooklyn": { lat: 40.6782, lng: -73.9442 }
🎯 [enhancedPlaceSearch] Using location bias: 40.6782,-73.9442 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "third wave coffee shop with single origin beans and expert baristas" Brooklyn
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for New York City
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T16:00:00.000Z
🕒 [Operating Hours] Validating hours for Brooklyn Roasting Company at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Brooklyn Roasting Company
✅ [Operating Hours] Brooklyn Roasting Company: Could not determine operating hours
🕒 [Operating Hours] Validating hours for drip coffee makers at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for drip coffee makers
✅ [Operating Hours] drip coffee makers: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Before Coffee at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Before Coffee
✅ [Operating Hours] Before Coffee: Could not determine operating hours
🕒 [Operating Hours] Validating hours for SEY Coffee at 2025-06-05T16:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for SEY Coffee
✅ [Operating Hours] SEY Coffee: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Brooklyn Roasting Company',
  rating: 4.8,
  address: '543 Metropolitan Ave, Brooklyn, NY 11211, United States'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'drip coffee makers', rating: 4.9 },
  { name: 'Before Coffee', rating: 4.9 },
  { name: 'SEY Coffee', rating: 4.6 }
]
🔍 [SERVICE] Place details for "Brooklyn Roasting Company": {
  hasRating: true,
  rating: 4.8,
  hasTypes: true,
  types: [ 'cafe', 'food', 'store', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "543 Metropolitan Ave, Brooklyn, NY 11211, United States",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 40.714197,\n' +
    '      "lng": -73.9507988\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 40.71550637989272,\n' +
    '        "lng": -73.94986987010726\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 40.71280672010727,\n' +
    '        "lng": -73.95256952989271\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Brooklyn Roasting Company",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 512,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/116126741955535006555\\">Brooklyn Roasting Company</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNR58jsq7DQiN44I5Qbm9tO2uBnphiVZj_eNjSyHEW4VU3vnwGCrSdP-hqSpQY6o-ISUPz-SbxRCC-fry88vpCM4MbkgHX6cNSQ020Vwsa2dxzg2MGlnBgSJSwfhF1H8m4Sm5zrZEnyavoLZlQR0GObxULYzC8QoVr_leRGFA3Ivwq8MWZ36h-8YCpapF5OZHYdJiqHD9JF2g7JqbhH0ki6av6tjJpizAGhxl74qhvKvWDiPpivunBZnP_WyZoLAcXdmAWdg8gN4NStctZLgkGpXPSrj2bilejabT5EH_M_wXlvM90U",\n' +
    '      "width": 512\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJJfrC_sFZwokRLHD-4E2jvHM",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "P27X+MM Brooklyn, New York",\n' +
    '    "global_code": "87G8P27X+MM"\n' +
    '  },\n' +
    '  "price_level": 1,\n' +
    '  "rating": 4.8,\n' +
    '  "reference": "ChIJJfrC_sFZwokRLHD-4E2jvHM",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "food",\n' +
    '    "store",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 125\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.8,
  types: [ 'cafe', 'food', 'store', 'point_of_interest', 'establishment' ],
  detailsSize: 1369
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Brooklyn Roasting Company" with details
🔍 [SERVICE] Stored place "Brooklyn Roasting Company" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.8,
  types: [ 'cafe', 'food', 'store', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Brooklyn Roasting Company at 2025-06-05T16:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in New York City" for New York City with ID: 5
[Weather] Fetching weather for 40.71,-73.95
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T16:00:00.000Z
🌍 [/:city/plan] Using timezone: America/New_York
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Brooklyn Roasting Company" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Brooklyn Roasting Company": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 1 venues
2025-06-05 14:24:32 INFO [API] POST /api/nyc/plan 200 (4758ms) {
  "statusCode": 200,
  "duration": 4758
}
📝 [/:city/plan] City-specific plan request for: London
Query: Traditional English breakfast in Covent Garden at 9am, then visit Buckingham Palace around 11am, followed by afternoon tea in Mayfair at 3pm
🔍 [Complexity] Query analysis for London: {
  level: 'moderate',
  score: 40,
  estimatedTime: 4,
  factors: [
    'Multiple time references',
    'Several activities',
    'Sequential planning required',
    'Detailed query'
  ]
}
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Traditional English breakfast in Covent Garden at 9am, then visit Buckingham Palace around 11am, followed by afternoon tea in Mayfair at 3pm
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Traditional English breakfast in Covent Garden at 9am, then visit Buckingham Palace around 11am, followed by afternoon tea in Mayfair at 3pm
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Traditional English breakfast",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "specificRequirements": []
      }
    },
    {
      "time": "11:00",
      "activity": "Visit Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "Afternoon tea",
      "location": "Mayfair",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Traditional English breakfast","location":"Covent Garden","searchParameters":{"cuisine":"British","specificRequirements":[]},"time":"09:00","venueRequirements":[]},{"activity":"Visit Buckingham Palace","location":"Buckingham Palace","searchParameters":{"specificRequirements":[]},"time":"11:00","venueRequirements":[]},{"activity":"Afternoon tea","location":"Mayfair","searchParameters":{"cuisine":"British","specificRequirements":[]},"time":"15:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":4882,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * London landmarks include: British Museum, Tower of London, Hyde Park\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Traditional English breakfast in Covent Garden at 9am, then visit Buckingham Palace around 11am, followed by afternoon tea in Mayfair at 3pm\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"09:00\",\n      \"activity\": \"Traditional English breakfast\",\n      \"location\": \"Covent Garden\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": \"British\",\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"11:00\",\n      \"activity\": \"Visit Buckingham Palace\",\n      \"location\": \"Buckingham Palace\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"15:00\",\n      \"activity\": \"Afternoon tea\",\n      \"location\": \"Mayfair\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": \"British\",\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"152e7e70-3e9e-434d-836d-8f076f169bf1","status":"success","timestamp":"2025-06-05T21:24:37.929Z","userQuery":"Traditional English breakfast in Covent Garden at 9am, then visit Buckingham Palace around 11am, followed by afternoon tea in Mayfair at 3pm"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Traditional English breakfast",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "specificRequirements": []
      }
    },
    {
      "time": "11:00",
      "activity": "Visit Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "Afternoon tea",
      "location": "Mayfair",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Traditional English breakfast at Covent Garden, 09:00
Added fixed time entry: Visit Buckingham Palace at Buckingham Palace, 11:00
Added fixed time entry: Afternoon tea at Mayfair, 15:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Traditional English breakfast",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "11:00",
      "activity": "Visit Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "Afternoon tea",
      "location": "Mayfair",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Traditional English breakfast",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "11:00",
      "activity": "Visit Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "Afternoon tea",
      "location": "Mayfair",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "09:00",
      "activity": "Traditional English breakfast",
      "location": "Covent Garden",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "11:00",
      "activity": "Visit Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "Afternoon tea",
      "location": "Mayfair",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "09:00",
    "activity": "Traditional English breakfast",
    "location": "Covent Garden",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "British",
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "11:00",
    "activity": "Visit Buckingham Palace",
    "location": "Buckingham Palace",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "15:00",
    "activity": "Afternoon tea",
    "location": "Mayfair",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "British",
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "09:00" to "09:00"
Correctly interpreted time "09:00" as Europe/London time: 9:00 AM (2025-06-05T08:00:00.000Z)
Correctly interpreted time "09:00" as London time: 9:00 AM (2025-06-05T08:00:00.000Z)
Processed fixed time entry: Traditional English breakfast at Covent Garden, time: 2025-06-05T08:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "11:00" to "11:00"
Correctly interpreted time "11:00" as Europe/London time: 11:00 AM (2025-06-05T10:00:00.000Z)
Correctly interpreted time "11:00" as London time: 11:00 AM (2025-06-05T10:00:00.000Z)
Processed fixed time entry: Visit Buckingham Palace at Buckingham Palace, time: 2025-06-05T10:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "15:00" to "15:00"
Correctly interpreted time "15:00" as Europe/London time: 3:00 PM (2025-06-05T14:00:00.000Z)
Correctly interpreted time "15:00" as London time: 3:00 PM (2025-06-05T14:00:00.000Z)
Processed fixed time entry: Afternoon tea at Mayfair, time: 2025-06-05T14:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Covent Garden",
    "Buckingham Palace",
    "Mayfair"
  ],
  "fixedTimes": [
    {
      "location": "Covent Garden",
      "time": "2025-06-05T08:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Traditional English breakfast",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 AM"
    },
    {
      "location": "Buckingham Palace",
      "time": "2025-06-05T10:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Buckingham Palace",
      "keywords": [],
      "minRating": 4,
      "displayTime": "11:00 AM"
    },
    {
      "location": "Mayfair",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Afternoon tea",
      "keywords": [],
      "minRating": 4,
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Covent Garden" with Google Maps Geocoding API
Geocoding search query: "Covent Garden, London, UK, UK"
Validated "Covent Garden" as neighborhood: "Covent Garden"
Validated "Covent Garden" as neighborhood: "Covent Garden"
Validating location: "Buckingham Palace" with Google Maps Geocoding API
Geocoding search query: "Buckingham Palace, London, UK, UK"
Validated "Buckingham Palace" as admin area: "Greater London"
Validated "Buckingham Palace" as neighborhood: "Greater London"
Validating location: "Mayfair" with Google Maps Geocoding API
Geocoding search query: "Mayfair, London, UK, UK"
Validated "Mayfair" as neighborhood: "Mayfair"
Validated "Mayfair" as neighborhood: "Mayfair"
Validating location: "Covent Garden" with Google Maps Geocoding API
Geocoding search query: "Covent Garden, London, UK, UK"
Validated "Covent Garden" as neighborhood: "Covent Garden"
Validating location: "Buckingham Palace" with Google Maps Geocoding API
Geocoding search query: "Buckingham Palace, London, UK, UK"
Validated "Buckingham Palace" as admin area: "Greater London"
Validating location: "Mayfair" with Google Maps Geocoding API
Geocoding search query: "Mayfair, London, UK, UK"
Validated "Mayfair" as neighborhood: "Mayfair"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Covent Garden",
    "Greater London",
    "Mayfair"
  ],
  "fixedTimes": [
    {
      "location": "Covent Garden",
      "time": "2025-06-05T08:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Traditional English breakfast",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 AM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T10:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Buckingham Palace",
      "keywords": [],
      "minRating": 4,
      "displayTime": "11:00 AM"
    },
    {
      "location": "Mayfair",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Afternoon tea",
      "keywords": [],
      "minRating": 4,
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
🐌 [Performance] Slow operation detected: nlp_processing took 5260.98ms
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Covent Garden', 'Greater London', 'Mayfair' ],
  fixedTimes: [
    {
      location: 'Covent Garden',
      time: '2025-06-05T08:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Traditional English breakfast',
      keywords: [],
      minRating: 4,
      displayTime: '9:00 AM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T10:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Buckingham Palace',
      keywords: [],
      minRating: 4,
      displayTime: '11:00 AM',
      searchPreference: undefined
    },
    {
      location: 'Mayfair',
      time: '2025-06-05T14:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Afternoon tea',
      keywords: [],
      minRating: 4,
      displayTime: '3:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Covent Garden","time":"2025-06-05T08:00:00.000Z","type":"restaurant","searchTerm":"Traditional English breakfast","keywords":[],"minRating":4,"displayTime":"9:00 AM"}
Parsed ISO timestamp "2025-06-05T08:00:00.000Z" to Europe/London time: 2025-06-05 09:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Traditional English breakfast',
  location: 'Covent Garden',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T08:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Soho for restaurant (score: 50)
   Reasons: Known for restaurant, Very close
🤖 [Gemini] Enhanced query: "Traditional English breakfast" restaurant Soho London
📍 [enhancedPlaceSearch] Found specific area coordinates for "Covent Garden": { lat: 51.5118, lng: -0.1226 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5118,-0.1226 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "Traditional English breakfast" restaurant Soho London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T08:00:00.000Z
🕒 [Operating Hours] Validating hours for The Breakfast Club Soho at 2025-06-05T08:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 09:00:00 Thursday, Day: 4, Time: 0900
⚠️ [Operating Hours] Could not determine hours for The Breakfast Club Soho
✅ [Operating Hours] The Breakfast Club Soho: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Breakfast Club Old Compton Street at 2025-06-05T08:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 09:00:00 Thursday, Day: 4, Time: 0900
⚠️ [Operating Hours] Could not determine hours for The Breakfast Club Old Compton Street
✅ [Operating Hours] The Breakfast Club Old Compton Street: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Ivy Soho Brasserie at 2025-06-05T08:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 09:00:00 Thursday, Day: 4, Time: 0900
⚠️ [Operating Hours] Could not determine hours for The Ivy Soho Brasserie
✅ [Operating Hours] The Ivy Soho Brasserie: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Bill's Soho Restaurant at 2025-06-05T08:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 09:00:00 Thursday, Day: 4, Time: 0900
⚠️ [Operating Hours] Could not determine hours for Bill's Soho Restaurant
✅ [Operating Hours] Bill's Soho Restaurant: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Breakfast Club Old Compton Street',
  rating: 4.7,
  address: '18 Old Compton St, London W1D 4TN, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: "Bill's Soho Restaurant", rating: 4.4 },
  { name: 'The Breakfast Club Soho', rating: 4.3 },
  { name: 'The Ivy Soho Brasserie', rating: 4.3 }
]
🔍 [SERVICE] Place details for "The Breakfast Club Old Compton Street": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [ 'cafe', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "18 Old Compton St, London W1D 4TN, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5136453,\n' +
    '      "lng": -0.1302687\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51497317989272,\n' +
    '        "lng": -0.1288982201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51227352010728,\n' +
    '        "lng": -0.1315978798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "The Breakfast Club Old Compton Street",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3000,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/101857817448165319120\\">Teresa De la Cruz</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRaKpsJoDQFUEw9oWwHBHqaJ9gqYu9gkNdDIwhE3ouXTmjg1n7APixJFdVMQ_mYhqxyKG8tTArcroycNSBixmHpoM7lIHlgZPQYP_YMUnnfFR7zuqcJc21xTOwQ5Ga5KdgJknJkkpPxKMahaZe5TsANM2SkqWWvHq8PQc52lP-KXBvhrr2AEIFxAwYSdwkDlxGxKkYA_f2we-ksivx_1R1kapOuZXXIDB1JePGIK7b9665vl65KGxf7LFlw2F0P11XHvSSuA1JBF9ta6-_kbgAW08PuGSzl_i4GMEYr0fkb1KQAh0tZzufHPfJRgXtmMUCPtRLtqCJ0ZkpxagoPFFEouCgJqb-SPVh8eJb9bkNoEmeGTvnvSkRh1Vl-eQNvp7mbABFNShdA_fkFyCPKudSKmRQ7T_JQWFSnjcm3pfP6weXmCY9YbAekpW3ssy6rqanUVV3eoch_SvnFqy1uZd6NkzArOQojKUaHarxfi_eaEuLAWt7X82jpZmoX_II0ZB9msqAmDnlMPGzZWmxDy1uI_aoVU7RbRyr9Mhu_Oe3YpB7QXn87QlvAV00AtqwdVpgB_FA-3oHuzA",\n' +
    '      "width": 4000\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJhdD5OKQFdkgR07W-3C-X1io",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV79+FV London, United Kingdom",\n' +
    '    "global_code": "9C3XGV79+FV"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJhdD5OKQFdkgR07W-3C-X1io",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 619\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [ 'cafe', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1651
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The Breakfast Club Old Compton Street" with details
🔍 [SERVICE] Stored place "The Breakfast Club Old Compton Street" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [ 'cafe', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: The Breakfast Club Old Compton Street at 2025-06-05T08:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T10:00:00.000Z","type":"attraction","searchTerm":"Visit Buckingham Palace","keywords":[],"minRating":4,"displayTime":"11:00 AM"}
Parsed ISO timestamp "2025-06-05T10:00:00.000Z" to Europe/London time: 2025-06-05 11:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Buckingham Palace',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T10:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: Buckingham Palace
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: Buckingham Palace
🏙️ [enhancedPlaceSearch] After city filtering: 1 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T10:00:00.000Z
🕒 [Operating Hours] Validating hours for Buckingham Palace at 2025-06-05T10:00:00.000Z
⚠️ [Operating Hours] No opening hours data for Buckingham Palace
✅ [Operating Hours] Buckingham Palace: No operating hours data available
✅ [enhancedPlaceSearch] 1 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 1 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Buckingham Palace',
  rating: 4.5,
  address: 'London SW1A 1AA, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: []
🔍 [SERVICE] Place details for "Buckingham Palace": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "London SW1A 1AA, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.501364,\n' +
    '      "lng": -0.14189\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.50301952989273,\n' +
    '        "lng": -0.13913855\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50031987010728,\n' +
    '        "lng": -0.14280715\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png",\n' +
    '  "icon_background_color": "#7B9EB0",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",\n' +
    '  "name": "Buckingham Palace",\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 467,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108821586924726637842\\">Mohammadreza Shirazi</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSXe0wKTeiwZtpJVyWiZZakjPeBcFqgbwYqK1c1deF52Ph1SNGslzX-CFdxXkl7MW4WvLJeUqmmYr28mn7uQHVPtdVp0k9sZrlUhc-nkyypBLEfLCV6IleXP5lPXrAPgRFJOwj5fbJefbOBcMsJ53z_gSYu0CJennPJYVGPnJ2jCs2FpAXgks-wJAZDL8mCyKdCREZ4161VzriOnkWvpCOGFtD7KIEeRYe_rjumtUP5QOhJZcAYz2I8uECHqqUsW35Xzm6-IBfm_Tr1FczNixEk8pXRjd02cNYNk1zkpcgf424XfuQf3cnhH35wmtlyPgqSsbFboUBkah5CPIe2GElC5zupSoFrHGiZ576UZqKA0yKkLi6SC6Pc9Ywd5nWCgZmYwybLOE_Z8Puz1Hi44CgU_JUA67joUr9lDEJhBPWubDiLyL_lmkORO255PZ-rhxQpjMQAnd7hi6u1zGSC99lOBI1FX6Vu6T9UuU6pwOTat8rku36-3DITRJJblXSuwpBSAlHh7yliEHBZhaa69ZqbCDFIw9nzOy_u5ViGaUku3csY6MLy9OiTqCBijV5Vxo9ywgUVdYrezA",\n' +
    '      "width": 700\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJtV5bzSAFdkgRpwLZFPWrJgo",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV25+G6 London, United Kingdom",\n' +
    '    "global_code": "9C3XGV25+G6"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJtV5bzSAFdkgRpwLZFPWrJgo",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 181828\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsSize: 1569
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Buckingham Palace" with details
🔍 [SERVICE] Stored place "Buckingham Palace" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Buckingham Palace at 2025-06-05T10:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Mayfair","time":"2025-06-05T14:00:00.000Z","type":"attraction","searchTerm":"Afternoon tea","keywords":[],"minRating":4,"displayTime":"3:00 PM"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to Europe/London time: 2025-06-05 15:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Afternoon tea',
  location: 'Mayfair',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T14:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Green Park for attraction (score: 20)
   Reasons: Very close
🤖 [Gemini] Enhanced query: "afternoon tea" "Green Park" London
📍 [enhancedPlaceSearch] Found specific area coordinates for "Mayfair": { lat: 51.5096, lng: -0.1498 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5096,-0.1498 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "afternoon tea" "Green Park" London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T14:00:00.000Z
🕒 [Operating Hours] Validating hours for Afternoon Tea at The Beaumont at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Afternoon Tea at The Beaumont
✅ [Operating Hours] Afternoon Tea at The Beaumont: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Caffè Concerto Green Park at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Caffè Concerto Green Park
✅ [Operating Hours] Caffè Concerto Green Park: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Afternoon Tea at The Park Room at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Afternoon Tea at The Park Room
✅ [Operating Hours] Afternoon Tea at The Park Room: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Afternoon Tea at Claridge's at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Afternoon Tea at Claridge's
✅ [Operating Hours] Afternoon Tea at Claridge's: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: "Afternoon Tea at Claridge's",
  rating: 4.6,
  address: "Claridge's, Brook St, London W1K 4HR, United Kingdom"
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Afternoon Tea at The Beaumont', rating: 4.8 },
  { name: 'Afternoon Tea at The Park Room', rating: 4.5 },
  { name: 'Caffè Concerto Green Park', rating: 4.1 }
]
🔍 [SERVICE] Place details for "Afternoon Tea at Claridge's": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'food', 'store', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    `  "formatted_address": "Claridge's, Brook St, London W1K 4HR, United Kingdom",\n` +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5125052,\n' +
    '      "lng": -0.1474773\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51401042989272,\n' +
    '        "lng": -0.1462038701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51131077010728,\n' +
    '        "lng": -0.1489035298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png",\n' +
    '  "icon_background_color": "#7B9EB0",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",\n' +
    `  "name": "Afternoon Tea at Claridge's",\n` +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 2160,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108085346394710941608\\">Andrew Balmer</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQaMNKonb-URULGGHD5ggZUJuuCxVH8j-EZjvb2c1O-rWRCMwvvtJaGpgI5XstGdZObsFABl67Al7gy1c8YvFkRNAbCuzRa5cnnjTdfHlYhEHiSLVNXavxaoWH02FGMGWrbQtltcqSEhT5_SyyMQ-BbBAgYg3Q_n2R40AeioIebMqITTCPNHy0E7D1vWSgID9RlcmhklVEU79XfOY-VR4Ffgf5PWmjuk04yh7RGyHdRUGoVhRpnKB7uv4gPJpP6At85CHjVWSACYV-9dM7k0TOsShy_GLCNFUc6yFYxEYw0UoPA5TYM_3ZMEGvi9HYzN6oubnmGor5LLN5kTnyMKqg8uQgpbYKuR38r9PZEwmSAhIBKMA0G5FrmEnaTlcoFSTNZ4JW7bYmh9JzaN1XvuiIfYB59fTBQlXOFFzuOq4d306YIR_jGSmJEJ3-REjKwgRT51Jd0OT4broidn994EPqhDruu-lqV3XQgK0REmYl090HsO7cEgt6asWswQuYj5W41aShu1WGp4Rai6PxTHl8_-MMGBsesUBDhhwVJHbL2aVt970uhDWqZDvTE868IT35Z4ZxU7jn9fg",\n' +
    '      "width": 3840\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJq45_yF4FdkgRwv4Vdhs0shE",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV73+22 London, United Kingdom",\n' +
    '    "global_code": "9C3XGV73+22"\n' +
    '  },\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJq45_yF4FdkgRwv4Vdhs0shE",\n' +
    '  "types": [\n' +
    '    "food",\n' +
    '    "store",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 249\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'food', 'store', 'point_of_interest', 'establishment' ],
  detailsSize: 1640
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Afternoon Tea at Claridge's" with details
🔍 [SERVICE] Stored place "Afternoon Tea at Claridge's" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'food', 'store', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Afternoon Tea at Claridge's at 2025-06-05T14:00:00.000Z
🗺️ Optimizing route for 3 places in London
Calculating travel times for 3 places in London
Travel time from The Breakfast Club Old Compton Street to Buckingham Palace: 5 minutes
Travel time from Buckingham Palace to Afternoon Tea at Claridge's: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Traditional English breakfast, Visit Buckingham Palace, Afternoon tea in London" for London with ID: 6
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 9595.56ms
[Weather] Fetching weather for 51.51,-0.13
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T08:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 9:00 AM
🔍 [/:city/plan] Place "The Breakfast Club Old Compton Street" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "The Breakfast Club Old Compton Street": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T10:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 11:00 AM
🔍 [/:city/plan] Place "Buckingham Palace" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Buckingham Palace": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T14:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 3:00 PM
🔍 [/:city/plan] Place "Afternoon Tea at Claridge's" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Afternoon Tea at Claridge's": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 3 venues
2025-06-05 14:24:42 INFO [API] POST /api/london/plan 200 (9632ms) {
  "statusCode": 200,
  "duration": 9632
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/london/plan took 9631.81ms
📝 [/:city/plan] City-specific plan request for: London
Query: Historic pub in Camden at 6pm, then craft beer bar in Shoreditch at 8pm
🔍 [Complexity] Query analysis for London: {
  level: 'simple',
  score: 20,
  estimatedTime: 2,
  factors: [ 'Some time complexity', 'Sequential planning required' ]
}
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Historic pub in Camden at 6pm, then craft beer bar in Shoreditch at 8pm
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Historic pub in Camden at 6pm, then craft beer bar in Shoreditch at 8pm
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "Dinner at a historic pub",
      "location": "Camden",
      "venuePreference": "historic pub",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "pub fare",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "historic pub"
      }
    },
    {
      "time": "20:00",
      "activity": "Drinks at a craft beer bar",
      "location": "Shoreditch",
      "venuePreference": "craft beer bar",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "craft beer bar"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "historic pubs",
      "craft beer"
    ]
  },
  "travelGroup": {
    "adults": 2,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Dinner at a historic pub","location":"Camden","searchParameters":{"cuisine":"pub fare","priceLevel":"moderate","specificRequirements":[],"venuePreference":"historic pub"},"time":"18:00","venuePreference":"historic pub","venueRequirements":[]},{"activity":"Drinks at a craft beer bar","location":"Shoreditch","searchParameters":{"priceLevel":"moderate","specificRequirements":[],"venuePreference":"craft beer bar"},"time":"20:00","venuePreference":"craft beer bar","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":["historic pubs","craft beer"],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":2,"children":0}},"processingTimeMs":4044,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * London landmarks include: British Museum, Tower of London, Hyde Park\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Historic pub in Camden at 6pm, then craft beer bar in Shoreditch at 8pm\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"Dinner at a historic pub\",\n      \"location\": \"Camden\",\n      \"venuePreference\": \"historic pub\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"historic pub\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"pub fare\",\n        \"priceLevel\": \"moderate\"\n      }\n    },\n    {\n      \"time\": \"20:00\",\n      \"activity\": \"Drinks at a craft beer bar\",\n      \"location\": \"Shoreditch\",\n      \"venuePreference\": \"craft beer bar\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"craft beer bar\",\n        \"specificRequirements\": [],\n        \"priceLevel\": \"moderate\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": [\"historic pubs\", \"craft beer\"]\n  },\n  \"travelGroup\": {\n    \"adults\": 2,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"c509e8c0-2a69-44f2-8420-276bc8fc9b04","status":"success","timestamp":"2025-06-05T21:24:46.726Z","userQuery":"Historic pub in Camden at 6pm, then craft beer bar in Shoreditch at 8pm"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "Dinner at a historic pub",
      "location": "Camden",
      "venuePreference": "historic pub",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "pub fare",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "historic pub"
      }
    },
    {
      "time": "20:00",
      "activity": "Drinks at a craft beer bar",
      "location": "Shoreditch",
      "venuePreference": "craft beer bar",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "craft beer bar"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "historic pubs",
      "craft beer"
    ]
  },
  "travelGroup": {
    "adults": 2,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Dinner at a historic pub at Camden, 18:00
Added fixed time entry: Drinks at a craft beer bar at Shoreditch, 20:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "Dinner at a historic pub",
      "location": "Camden",
      "venuePreference": "historic pub",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "pub fare",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "historic pub"
      }
    },
    {
      "time": "20:00",
      "activity": "Drinks at a craft beer bar",
      "location": "Shoreditch",
      "venuePreference": "craft beer bar",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "craft beer bar"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "historic pubs",
      "craft beer"
    ]
  },
  "travelGroup": {
    "adults": 2,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "Dinner at a historic pub",
      "location": "Camden",
      "venuePreference": "historic pub",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "pub fare",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "historic pub"
      }
    },
    {
      "time": "20:00",
      "activity": "Drinks at a craft beer bar",
      "location": "Shoreditch",
      "venuePreference": "craft beer bar",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "craft beer bar"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "historic pubs",
      "craft beer"
    ]
  },
  "travelGroup": {
    "adults": 2,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "Dinner at a historic pub",
      "location": "Camden",
      "venuePreference": "historic pub",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "pub fare",
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "historic pub"
      }
    },
    {
      "time": "20:00",
      "activity": "Drinks at a craft beer bar",
      "location": "Shoreditch",
      "venuePreference": "craft beer bar",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": [],
        "venuePreference": "craft beer bar"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "historic pubs",
      "craft beer"
    ]
  },
  "travelGroup": {
    "adults": 2,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Found raw venuePreference in Gemini fixed time entry: "historic pub" for activity "Dinner at a historic pub"
Found raw venuePreference in Gemini fixed time entry: "craft beer bar" for activity "Drinks at a craft beer bar"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "18:00",
    "activity": "Dinner at a historic pub",
    "location": "Camden",
    "venuePreference": "historic pub",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "pub fare",
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "historic pub"
    }
  },
  {
    "time": "20:00",
    "activity": "Drinks at a craft beer bar",
    "location": "Shoreditch",
    "venuePreference": "craft beer bar",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": [],
      "venuePreference": "craft beer bar"
    }
  }
]
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as Europe/London time: 6:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "18:00" as London time: 6:00 PM (2025-06-05T17:00:00.000Z)
Found venue preference: "historic pub" for activity: Dinner at a historic pub
Processed fixed time entry: Dinner at a historic pub at Camden, time: 2025-06-05T17:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "20:00" to "20:00"
Correctly interpreted time "20:00" as Europe/London time: 8:00 PM (2025-06-05T19:00:00.000Z)
Correctly interpreted time "20:00" as London time: 8:00 PM (2025-06-05T19:00:00.000Z)
Found venue preference: "craft beer bar" for activity: Drinks at a craft beer bar
Processed fixed time entry: Drinks at a craft beer bar at Shoreditch, time: 2025-06-05T19:00:00.000Z, type: bar
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Camden",
    "Shoreditch"
  ],
  "fixedTimes": [
    {
      "location": "Camden",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner at a historic pub",
      "keywords": [],
      "minRating": 4,
      "displayTime": "6:00 PM",
      "searchPreference": "historic pub"
    },
    {
      "location": "Shoreditch",
      "time": "2025-06-05T19:00:00.000Z",
      "type": "bar",
      "searchTerm": "Drinks at a craft beer bar",
      "keywords": [],
      "minRating": 4,
      "displayTime": "8:00 PM",
      "searchPreference": "craft beer bar"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Camden" with Google Maps Geocoding API
Geocoding search query: "Camden, London, UK, UK"
Found result in London: Camden Town, London, UK
Validated "Camden" as neighborhood: "Camden Town"
Validated "Camden" as neighborhood: "Camden Town"
Validating location: "Shoreditch" with Google Maps Geocoding API
Geocoding search query: "Shoreditch, London, UK, UK"
Validated "Shoreditch" as admin area: "Greater London"
Validated "Shoreditch" as neighborhood: "Greater London"
Validating location: "Camden" with Google Maps Geocoding API
Geocoding search query: "Camden, London, UK, UK"
Found result in London: Camden Town, London, UK
Validated "Camden" as neighborhood: "Camden Town"
Validating location: "Shoreditch" with Google Maps Geocoding API
Geocoding search query: "Shoreditch, London, UK, UK"
Validated "Shoreditch" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Camden Town",
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Camden Town",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner at a historic pub",
      "keywords": [],
      "minRating": 4,
      "displayTime": "6:00 PM",
      "searchPreference": "historic pub"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T19:00:00.000Z",
      "type": "bar",
      "searchTerm": "Drinks at a craft beer bar",
      "keywords": [],
      "minRating": 4,
      "displayTime": "8:00 PM",
      "searchPreference": "craft beer bar"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Camden Town', 'Greater London' ],
  fixedTimes: [
    {
      location: 'Camden Town',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Dinner at a historic pub',
      keywords: [],
      minRating: 4,
      displayTime: '6:00 PM',
      searchPreference: 'historic pub'
    },
    {
      location: 'Greater London',
      time: '2025-06-05T19:00:00.000Z',
      type: 'bar',
      searchTerm: 'Drinks at a craft beer bar',
      keywords: [],
      minRating: 4,
      displayTime: '8:00 PM',
      searchPreference: 'craft beer bar'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Camden Town","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"Dinner at a historic pub","keywords":[],"minRating":4,"displayTime":"6:00 PM","searchPreference":"historic pub"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to Europe/London time: 2025-06-05 18:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Dinner at a historic pub',
  location: 'Camden Town',
  keywords: [ 'historic pub' ],
  type: 'restaurant',
  preferences: { venuePreference: 'historic pub' },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for restaurant (score: 30)
   Reasons: Known for restaurant
🤖 [Gemini] Enhanced query: "historic pub" Fitzrovia
📍 [enhancedPlaceSearch] Found specific area coordinates for "Camden Town": { lat: 51.5409, lng: -0.1419 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5409,-0.1419 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "historic pub" Fitzrovia
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for Fitzrovia at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Fitzrovia
✅ [Operating Hours] Fitzrovia: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Lore of the Land at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Lore of the Land
✅ [Operating Hours] Lore of the Land: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The George at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for The George
✅ [Operating Hours] The George: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Fitzroy Tavern at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Fitzroy Tavern
✅ [Operating Hours] Fitzroy Tavern: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The George',
  rating: 4.5,
  address: '55 Great Portland St, London W1W 7LQ, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Lore of the Land', rating: 4.6 },
  { name: 'Fitzrovia', rating: 4.2 },
  { name: 'Fitzroy Tavern', rating: 4.2 }
]
🔍 [SERVICE] Place details for "The George": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'bar', 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "55 Great Portland St, London W1W 7LQ, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5176485,\n' +
    '      "lng": -0.1418426\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51895852989272,\n' +
    '        "lng": -0.1404658701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51625887010728,\n' +
    '        "lng": -0.1431655298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "The George",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 2252,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111941996399252793572\\">Sam Aberman</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRQMmy9AklWJL3LJmA2eo8pe3bOzB1IK7cf8xVoV2Oqf0MJWtxjH2eAdRaaw_4IqA6UCtZYNl7aTKwhrZmIEZ65CxDgG0Mc4NZLbEKOw_EU6hM-z1ulS5A6eMK8zNWpx3t-pymcxINfFLwZE6soWyAypOLZdeTNGXO5oBNJon3ZP4BMX5rxluwvRYSEygpwq_cJyx3SIHfYBdyPpTFglf3bCxkYoWk5MHtOGKxC0njPcQbNzOTqYI01QqMNFJMTW7Nf5cKpUDWrHsOCxDCh4HYmCvkunnoxf3f7jwruGGuPNfBJXbSZdn4QkZitg_YmrB6iv9DOSfPuQ8swkgfU-H7fCrnI5yW3BddEnWmduTOrf8S9o6aVCpTMQxv21a7vyIlKr8T0y0pfQsmVECRV3dIErMiTsL-R-rV5FuH6mHe7WXxD81dTLe3NeQFPHcxR3Cy2gjQ6d0huuHy80ALKxH-BrTNx2LKGKMQYq3XrRyhoctMu9hhY7uoft8g1qmJ12ic8YuPdLYmlTiAU11-hibM-yhyLKJDKdZQg6I9UUd-u0sYzKLDkYAXnOJJLw38vly2YQv048989nw",\n' +
    '      "width": 3870\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJCwcandUadkgRUYnpaTZg5LA",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV95+37 London, United Kingdom",\n' +
    '    "global_code": "9C3XGV95+37"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJCwcandUadkgRUYnpaTZg5LA",\n' +
    '  "types": [\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 1049\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'bar', 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1615
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The George" with details
🔍 [SERVICE] Stored place "The George" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'bar', 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: The George at 2025-06-05T17:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T19:00:00.000Z","type":"bar","searchTerm":"Drinks at a craft beer bar","keywords":[],"minRating":4,"displayTime":"8:00 PM","searchPreference":"craft beer bar"}
Parsed ISO timestamp "2025-06-05T19:00:00.000Z" to Europe/London time: 2025-06-05 20:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Drinks at a craft beer bar',
  location: 'Greater London',
  keywords: [ 'craft beer bar' ],
  type: 'bar',
  preferences: { venuePreference: 'craft beer bar' },
  scheduledDateTime: 2025-06-05T19:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Soho for bar (score: 40)
   Reasons: Known for bar, Nearby
🤖 [Gemini] Enhanced query: best craft beer bar in Soho London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best craft beer bar in Soho London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T19:00:00.000Z
🕒 [Operating Hours] Validating hours for The Craft Beer Co. Covent Garden at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for The Craft Beer Co. Covent Garden
✅ [Operating Hours] The Craft Beer Co. Covent Garden: Could not determine operating hours
🕒 [Operating Hours] Validating hours for BrewDog Soho at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for BrewDog Soho
✅ [Operating Hours] BrewDog Soho: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Coach & Horses, Soho at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for The Coach & Horses, Soho
✅ [Operating Hours] The Coach & Horses, Soho: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Little Scarlet Door at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for The Little Scarlet Door
✅ [Operating Hours] The Little Scarlet Door: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'BrewDog Soho',
  rating: 4.4,
  address: '21 Poland St, London W1F 8QG, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'The Craft Beer Co. Covent Garden', rating: 4.5 },
  { name: 'The Little Scarlet Door', rating: 4.5 },
  { name: 'The Coach & Horses, Soho', rating: 4.3 }
]
🔍 [SERVICE] Place details for "BrewDog Soho": {
  hasRating: true,
  rating: 4.4,
  hasTypes: true,
  types: [
    'liquor_store',
    'bar',
    'restaurant',
    'food',
    'store',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "21 Poland St, London W1F 8QG, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.515105,\n' +
    '      "lng": -0.1371099\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51639102989272,\n' +
    '        "lng": -0.1358501701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51369137010728,\n' +
    '        "lng": -0.1385498298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "BrewDog Soho",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 2160,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/115280132598103797112\\">Wayne Abrahams</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSy2AUe92TDRZ1Xx0AEf0VkNkdD6qwFS3MTl8Br-d8wschmiULe144WA0gUgO2kGC9mY9y6jQMp07TN37WtLJ0WhOoFrm5b-wBDi22HzLhHdxkfZNgztT3456PWMJ-IVhUZ3TrjqNZZxUIU4KqnqElnvrTBerneyU3qghJyBy8wAMeEvJ_HxNqFuyzEYhetNXGSNDfC7gMQrq-kkyG8U0T-WCVihS7DzP5wvdAT5G8gC3sTMy6UObCh1B9-e0mMy_BiQACNotO2IxTlneovVTbrMRw1gXQm-lOw8Ei3xd1yF83-WYEJ-hRJhpXP0uZ9FVySJ3WvRwVQMNnnUIT59DBOFruJgeFLgC_CbrCIgjmRvex5iFl3_9id7U3wcbNuMRcjaUDgs-bG88td7-NZpFTNBP6svoE-U_oQ-oZp_XSPLo7eYdYZphoj1VfVCuRVlWWrNvGEIyU9NfQp_ZFJXSBxMCTkKP5Z4I_uj39hCajbxbTf0QiGFB83gEmFkDKUs_LexJF_cxrOO_AHpiyAb-CvpA8Qxp1-olIUudDL3bUZYmI2NXhEmyMbTkWQxfewKFMrytF9KRGVLg",\n' +
    '      "width": 3840\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJsdXsMisbdkgRtLu_xdWE1Kk",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV87+25 London, United Kingdom",\n' +
    '    "global_code": "9C3XGV87+25"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.4,\n' +
    '  "reference": "ChIJsdXsMisbdkgRtLu_xdWE1Kk",\n' +
    '  "types": [\n' +
    '    "liquor_store",\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "store",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 3943\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.4,
  types: [
    'liquor_store',
    'bar',
    'restaurant',
    'food',
    'store',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1650
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "BrewDog Soho" with details
🔍 [SERVICE] Stored place "BrewDog Soho" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.4,
  types: [
    'liquor_store',
    'bar',
    'restaurant',
    'food',
    'store',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: BrewDog Soho at 2025-06-05T19:00:00.000Z
Calculating travel times for 2 places in London
Travel time from The George to BrewDog Soho: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Dinner at a historic pub, Drinks at a craft beer bar in London" for London with ID: 7
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 7229.51ms
[Weather] Fetching weather for 51.52,-0.14
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T17:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 6:00 PM
🔍 [/:city/plan] Place "The George" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "The George": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T19:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 8:00 PM
🔍 [/:city/plan] Place "BrewDog Soho" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "BrewDog Soho": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 2 venues
2025-06-05 14:24:49 INFO [API] POST /api/london/plan 200 (7271ms) {
  "statusCode": 200,
  "duration": 7271
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/london/plan took 7271.38ms
📝 [/:city/plan] City-specific plan request for: London
Query: Coffee meeting in Canary Wharf at 10am, then lunch in The City at 1pm
🔍 [Complexity] Query analysis for London: {
  level: 'moderate',
  score: 28,
  estimatedTime: 4,
  factors: [
    'Some time complexity',
    'Several activities',
    'Sequential planning required'
  ]
}
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee meeting in Canary Wharf at 10am, then lunch in The City at 1pm
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee meeting in Canary Wharf at 10am, then lunch in The City at 1pm
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee meeting",
      "location": "Canary Wharf",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "The City",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee meeting","location":"Canary Wharf","searchParameters":{"venueType":"cafe"},"time":"10:00","venuePreference":"cafe","venueRequirements":[]},{"activity":"Lunch","location":"The City","searchParameters":{"venueType":"restaurant"},"time":"13:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":3249,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * London landmarks include: British Museum, Tower of London, Hyde Park\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee meeting in Canary Wharf at 10am, then lunch in The City at 1pm\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee meeting\",\n      \"location\": \"Canary Wharf\",\n      \"venuePreference\": \"cafe\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"cafe\"\n      }\n    },\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"The City\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"069f6824-3cff-4292-83c7-0de06c1dcc8e","status":"success","timestamp":"2025-06-05T21:24:53.209Z","userQuery":"Coffee meeting in Canary Wharf at 10am, then lunch in The City at 1pm"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee meeting",
      "location": "Canary Wharf",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe"
      }
    },
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "The City",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Coffee meeting at Canary Wharf, 10:00
Added fixed time entry: Lunch at The City, 13:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee meeting",
      "location": "Canary Wharf",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "The City",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee meeting",
      "location": "Canary Wharf",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "The City",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee meeting",
      "location": "Canary Wharf",
      "venuePreference": "cafe",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "cafe",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "13:00",
      "activity": "Lunch",
      "location": "The City",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee meeting",
    "location": "Canary Wharf",
    "venuePreference": "cafe",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "cafe",
      "priceLevel": "moderate"
    }
  },
  {
    "time": "13:00",
    "activity": "Lunch",
    "location": "The City",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "restaurant",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Found venue preference: "cafe" for activity: Coffee meeting
Processed fixed time entry: Coffee meeting at Canary Wharf, time: 2025-06-05T09:00:00.000Z, type: cafe
Fixed time entry: Normalized time from "13:00" to "13:00"
Correctly interpreted time "13:00" as Europe/London time: 1:00 PM (2025-06-05T12:00:00.000Z)
Correctly interpreted time "13:00" as London time: 1:00 PM (2025-06-05T12:00:00.000Z)
Processed fixed time entry: Lunch at The City, time: 2025-06-05T12:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Canary Wharf",
    "The City"
  ],
  "fixedTimes": [
    {
      "location": "Canary Wharf",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee meeting",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    },
    {
      "location": "The City",
      "time": "2025-06-05T12:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "1:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validating location: "The City" with Google Maps Geocoding API
Geocoding search query: "The City, London, UK, UK"
Found result in London: City of London, London, UK
Validated "The City" as neighborhood: "City of London"
Validated "The City" as neighborhood: "City of London"
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validating location: "The City" with Google Maps Geocoding API
Geocoding search query: "The City, London, UK, UK"
Found result in London: City of London, London, UK
Validated "The City" as neighborhood: "City of London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Canary Wharf",
    "City of London"
  ],
  "fixedTimes": [
    {
      "location": "Canary Wharf",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee meeting",
      "minRating": 4,
      "displayTime": "10:00 AM",
      "searchPreference": "cafe"
    },
    {
      "location": "City of London",
      "time": "2025-06-05T12:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "minRating": 4,
      "displayTime": "1:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Canary Wharf', 'City of London' ],
  fixedTimes: [
    {
      location: 'Canary Wharf',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee meeting',
      keywords: undefined,
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: 'cafe'
    },
    {
      location: 'City of London',
      time: '2025-06-05T12:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: undefined,
      minRating: 4,
      displayTime: '1:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Canary Wharf","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee meeting","minRating":4,"displayTime":"10:00 AM","searchPreference":"cafe"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
Adding meeting/appointment without venue search: Coffee meeting at Canary Wharf
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:525:52)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:18)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Coffee meeting" with details
Added meeting to itinerary: Coffee meeting at 2025-06-05T09:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"City of London","time":"2025-06-05T12:00:00.000Z","type":"restaurant","searchTerm":"Lunch","minRating":4,"displayTime":"1:00 PM"}
Parsed ISO timestamp "2025-06-05T12:00:00.000Z" to Europe/London time: 2025-06-05 13:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'City of London',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T12:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for restaurant (score: 30)
   Reasons: Known for restaurant
🤖 [Gemini] Enhanced query: best restaurants in Fitzrovia
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Fitzrovia
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T12:00:00.000Z
🕒 [Operating Hours] Validating hours for Circolo Popolare at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Circolo Popolare
✅ [Operating Hours] Circolo Popolare: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Faros Oxford Circus at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Faros Oxford Circus
✅ [Operating Hours] Faros Oxford Circus: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Salt Yard at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for Salt Yard
✅ [Operating Hours] Salt Yard: Could not determine operating hours
🕒 [Operating Hours] Validating hours for 64 Goodge Street at 2025-06-05T12:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 13:00:00 Thursday, Day: 4, Time: 1300
⚠️ [Operating Hours] Could not determine hours for 64 Goodge Street
✅ [Operating Hours] 64 Goodge Street: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Circolo Popolare',
  rating: 4.8,
  address: '40-41 Rathbone Pl, London W1T 1HX, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Faros Oxford Circus', rating: 4.9 },
  { name: '64 Goodge Street', rating: 4.9 },
  { name: 'Salt Yard', rating: 4.6 }
]
🔍 [SERVICE] Place details for "Circolo Popolare": {
  hasRating: true,
  rating: 4.8,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "40-41 Rathbone Pl, London W1T 1HX, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5171872,\n' +
    '      "lng": -0.1338576\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51852957989271,\n' +
    '        "lng": -0.1324303701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51582992010727,\n' +
    '        "lng": -0.1351300298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Circolo Popolare",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/102413468038010655311\\">Simon Jones</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSnEAbBcn6sJy81LzIgCIV6UQHKUq5uViofl8_4G-PqKqMmu8zHB0Ho0MzUVy513eX7u3OS8K_dcncmG1uV_E2AMOMHQXgWy7x36-bZUXPfT4PpkE0IJ9aMURjtbGzXKZlOIw-WQVsbhV-KPuEMIBEFIoMAKYYU0DGcEZOoFyXEIymzNN9QdhOQjX_9XPYgMewETzR7PpXZ0kgraRGpMBVcuczCokCh27qCU9ja_rgYCXfHxijRDjYnSIom_luAT9Eb1SqoqA796SkPI3SD5dsu5eUvw7u-h3u_iffdRBm0dLvorFOyRtuCLbd22QvBOE2SsZ6aH3fo1G-w0ENli796zsBD-RInwGwTcSs8BkOXX2d0i0u0xqlVmofdt-4aqS5mwrkUDuPAhQy8DCSfP0T5yN_VAqpww_rLbb-6k7x08vDzGPtcTmbC9itS3_hDV19gR6sQhez_ea_hNmTUzlQsgEYEZVKJezsXGIwqEaPSh0CicDXlTHOpWpjVZgfQc9A0dNXm19ukzT0rzD30EGqZb-33jDlJM3n954nSwAlpHRT_0OgWQ6JtGn3_TUT72v3kkXcW",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJK4j9CagbdkgRluwkqYLufoE",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV88+VF London, United Kingdom",\n' +
    '    "global_code": "9C3XGV88+VF"\n' +
    '  },\n' +
    '  "price_level": 3,\n' +
    '  "rating": 4.8,\n' +
    '  "reference": "ChIJK4j9CagbdkgRluwkqYLufoE",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 29569\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1637
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Circolo Popolare" with details
🔍 [SERVICE] Stored place "Circolo Popolare" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.8,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Circolo Popolare at 2025-06-05T12:00:00.000Z
Calculating travel times for 2 places in London
Travel time from Coffee meeting to Circolo Popolare: 120 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee meeting, Lunch in London" for London with ID: 8
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T09:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 10:00 AM
🔍 [/:city/plan] Place "Coffee meeting" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Coffee meeting": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T12:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 1:00 PM
🔍 [/:city/plan] Place "Circolo Popolare" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Circolo Popolare": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 2 venues
2025-06-05 14:24:54 INFO [API] POST /api/london/plan 200 (4816ms) {
  "statusCode": 200,
  "duration": 4816
}
📝 [/:city/plan] City-specific plan request for: London
Query: Best fish and chips in London
🔍 [Complexity] Query analysis for London: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Best fish and chips in London
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Best fish and chips in London
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Eat fish and chips",
      "location": "Central London",
      "venuePreference": "fish and chips restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "fish and chips",
        "specificRequirements": [],
        "venuePreference": "fish and chips restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": [
      "food"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Eat fish and chips","location":"Central London","searchParameters":{"cuisine":"fish and chips","specificRequirements":[],"venuePreference":"fish and chips restaurant"},"time":"12:00","venuePreference":"fish and chips restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":["food"],"pace":"relaxed"},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2953,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * London landmarks include: British Museum, Tower of London, Hyde Park\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Best fish and chips in London\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Eat fish and chips\",\n      \"location\": \"Central London\",\n      \"venuePreference\": \"fish and chips restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"fish and chips restaurant\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"fish and chips\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"relaxed\",\n    \"interests\": [\"food\"]\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"a9370a71-7ea7-44b7-9ebe-f087dda4676a","status":"success","timestamp":"2025-06-05T21:24:57.736Z","userQuery":"Best fish and chips in London"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Eat fish and chips",
      "location": "Central London",
      "venuePreference": "fish and chips restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "fish and chips",
        "specificRequirements": [],
        "venuePreference": "fish and chips restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": [
      "food"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Eat fish and chips at Central London, 12:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Eat fish and chips",
      "location": "Central London",
      "venuePreference": "fish and chips restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "fish and chips",
        "specificRequirements": [],
        "venuePreference": "fish and chips restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": [
      "food"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Eat fish and chips",
      "location": "Central London",
      "venuePreference": "fish and chips restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "fish and chips",
        "specificRequirements": [],
        "venuePreference": "fish and chips restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": [
      "food"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "12:00",
      "activity": "Eat fish and chips",
      "location": "Central London",
      "venuePreference": "fish and chips restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "fish and chips",
        "specificRequirements": [],
        "venuePreference": "fish and chips restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "relaxed",
    "interests": [
      "food"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Found raw venuePreference in Gemini fixed time entry: "fish and chips restaurant" for activity "Eat fish and chips"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "12:00",
    "activity": "Eat fish and chips",
    "location": "Central London",
    "venuePreference": "fish and chips restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "fish and chips",
      "specificRequirements": [],
      "venuePreference": "fish and chips restaurant",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as Europe/London time: 12:00 PM (2025-06-05T11:00:00.000Z)
Correctly interpreted time "12:00" as London time: 12:00 PM (2025-06-05T11:00:00.000Z)
Found venue preference: "fish and chips restaurant" for activity: Eat fish and chips
Processed fixed time entry: Eat fish and chips at Central London, time: 2025-06-05T11:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-05T11:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Eat fish and chips",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "fish and chips restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T11:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Eat fish and chips",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM",
      "searchPreference": "fish and chips restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T11:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Eat fish and chips',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: 'fish and chips restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "12:00" to normalized time "12:00" and Europe/London time: 12:00 PM (2025-06-06 12:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T11:00:00.000Z","type":"attraction","searchTerm":"Eat fish and chips","keywords":[],"minRating":4,"displayTime":"12:00 PM","searchPreference":"fish and chips restaurant"}
Parsed ISO timestamp "2025-06-05T11:00:00.000Z" to Europe/London time: 2025-06-05 12:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Eat fish and chips',
  location: 'Greater London',
  keywords: [ 'fish and chips restaurant' ],
  type: 'attraction',
  preferences: { venuePreference: 'fish and chips restaurant' },
  scheduledDateTime: 2025-06-05T11:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: best fish and chips restaurant in Fitzrovia
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best fish and chips restaurant in Fitzrovia
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T11:00:00.000Z
🕒 [Operating Hours] Validating hours for Carnaby Fish Bar at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Carnaby Fish Bar
✅ [Operating Hours] Carnaby Fish Bar: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Hobson's Fish & Chips Charing Cross at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Hobson's Fish & Chips Charing Cross
✅ [Operating Hours] Hobson's Fish & Chips Charing Cross: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Poppies Fish & Chips at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Poppies Fish & Chips
✅ [Operating Hours] Poppies Fish & Chips: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Golden Union at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Golden Union
✅ [Operating Hours] Golden Union: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Poppies Fish & Chips',
  rating: 4.1,
  address: '55-59 Old Compton St, London W1D 6HW, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Carnaby Fish Bar', rating: 4.9 },
  { name: "Hobson's Fish & Chips Charing Cross", rating: 4.7 },
  { name: 'Golden Union', rating: 4.3 }
]
🔍 [SERVICE] Place details for "Poppies Fish & Chips": {
  hasRating: true,
  rating: 4.1,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "55-59 Old Compton St, London W1D 6HW, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5125657,\n' +
    '      "lng": -0.1327136\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51395107989272,\n' +
    '        "lng": -0.1314356201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51125142010727,\n' +
    '        "lng": -0.1341352798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Poppies Fish & Chips",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 720,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108975197963106319523\\">Matteo Aduso</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTXuhEmyDoOkDJYKezDD9BSAUNP_6K7A6mW5ArJTde7XY9Qdk1csM62J9Dx0nU8vEnwUj2fIy_YfwZXKL6fP8CTIrvivSAyBCmjEedhB0LlIZP65hBADSE4LvPJc3NcNcpYapjiyLzuK4QOX48wUjRCS05JztOIaBknb6caebVXMea0PE5r3WrxR7S9g3bKt6JW3BK8btPTtmw9grH9lchiHM-SAcrGOrFjaGJbN4KwjulYheYeNYZM4vQ13KlJQizrz9ajIElLzHYArIHp-8i8j9V3OYjuUf_jl_Mk507HVHhiR5VsrzE3ycKuY-N774wFexUGPe3i7Wxc1732ybdj8I7Jza3rtXNXTHpMRYyqQ70GGHg3NstBld_7cDqn1w8K6_pqKNcCSi3dIVIbIJCtqW7_DD-dvsErfXEHQ53pPsX6GWkrJeQLIQvWP_kGW2Q08OXQba9aQbdB1qaeTUmpD78XeAwybSEvX6K66t31Tr0COZNtHWX8cwl6HXLwh3LqtjfZGL6enITUa5H7OZzshJKoZDHZ2q5VHLHCPP7mNJd7KjDM3WICkIKwV0w-nfEY6o7e",\n' +
    '      "width": 1280\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJRedeBtMEdkgRxRULk4P72X0",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV78+2W London, United Kingdom",\n' +
    '    "global_code": "9C3XGV78+2W"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.1,\n' +
    '  "reference": "ChIJRedeBtMEdkgRxRULk4P72X0",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 6961\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.1,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1644
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Poppies Fish & Chips" with details
🔍 [SERVICE] Stored place "Poppies Fish & Chips" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.1,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Poppies Fish & Chips at 2025-06-05T11:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Eat fish and chips in London" for London with ID: 9
[Weather] Using cached data for 51.51,-0.13
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T11:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 12:00 PM
🔍 [/:city/plan] Place "Poppies Fish & Chips" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "Poppies Fish & Chips": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 1 venues
2025-06-05 14:24:59 INFO [API] POST /api/london/plan 200 (4554ms) {
  "statusCode": 200,
  "duration": 4554
}
📝 [/:city/plan] City-specific plan request for: London
Query: Michelin-starred restaurant in Notting Hill with innovative British cuisine and wine pairing menu
🔍 [Complexity] Query analysis for London: { level: 'simple', score: 0, estimatedTime: 2, factors: [] }
🚀 [/:city/plan] Creating city-aware plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Michelin-starred restaurant in Notting Hill with innovative British cuisine and wine pairing menu
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Michelin-starred restaurant in Notting Hill with innovative British cuisine and wine pairing menu
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Notting Hill",
      "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "expensive",
        "specificRequirements": [],
        "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "expensive",
    "pace": "relaxed",
    "interests": [
      "fine dining",
      "British cuisine",
      "wine"
    ]
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Dinner","location":"Notting Hill","searchParameters":{"cuisine":"British","priceLevel":"expensive","specificRequirements":[],"venuePreference":"Michelin-starred restaurant with innovative British cuisine and wine pairing menu"},"time":"19:00","venuePreference":"Michelin-starred restaurant with innovative British cuisine and wine pairing menu","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"expensive","interests":["fine dining","British cuisine","wine"],"pace":"relaxed"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":2947,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - LANDMARK RECOGNITION (CRITICAL):\n         * Famous landmarks MUST be preserved exactly as mentioned\n         * London landmarks include: British Museum, Tower of London, Hyde Park\n         * \"Big Ben\" → location: \"Big Ben\", type: \"tourist_attraction\"\n         * \"Tower of London\" → location: \"Tower of London\", type: \"tourist_attraction\"  \n         * \"Statue of Liberty\" → location: \"Statue of Liberty\", type: \"tourist_attraction\"\n         * For \"lunch near [landmark]\" → location: \"[landmark area]\" (e.g., \"Tower Bridge area\")\n         * NEVER change landmark names to generic locations\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n       - LANDMARKS (CRITICAL):\n         * Famous landmarks → tourist_attraction\n         * \"visit [landmark]\", \"see [landmark]\" → tourist_attraction\n         * Activities near landmarks should reference the landmark in location\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    Start time: 12:00\n    Date: 2025-06-07\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Michelin-starred restaurant in Notting Hill with innovative British cuisine and wine pairing menu\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"19:00\",\n      \"activity\": \"Dinner\",\n      \"location\": \"Notting Hill\",\n      \"venuePreference\": \"Michelin-starred restaurant with innovative British cuisine and wine pairing menu\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": \"Michelin-starred restaurant with innovative British cuisine and wine pairing menu\",\n        \"specificRequirements\": [],\n        \"cuisine\": \"British\",\n        \"priceLevel\": \"expensive\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"expensive\",\n    \"pace\": \"relaxed\",\n    \"interests\": [\"fine dining\", \"British cuisine\", \"wine\"]\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"d393827f-0241-4c35-875c-7679f77dffd7","status":"success","timestamp":"2025-06-05T21:25:02.305Z","userQuery":"Michelin-starred restaurant in Notting Hill with innovative British cuisine and wine pairing menu"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:460:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at CircuitBreaker.execute (/Users/carlos/LondonDayPlanner-1/server/lib/errorRecovery.ts:268:22)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:84:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:108:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Notting Hill",
      "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "expensive",
        "specificRequirements": [],
        "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "expensive",
    "pace": "relaxed",
    "interests": [
      "fine dining",
      "British cuisine",
      "wine"
    ]
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Dinner at Notting Hill, 19:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Notting Hill",
      "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "expensive",
        "specificRequirements": [],
        "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "expensive",
    "pace": "relaxed",
    "interests": [
      "fine dining",
      "British cuisine",
      "wine"
    ]
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Notting Hill",
      "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "expensive",
        "specificRequirements": [],
        "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "expensive",
    "pace": "relaxed",
    "interests": [
      "fine dining",
      "British cuisine",
      "wine"
    ]
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "19:00",
      "activity": "Dinner",
      "location": "Notting Hill",
      "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu",
      "venueRequirements": [],
      "searchParameters": {
        "cuisine": "British",
        "priceLevel": "expensive",
        "specificRequirements": [],
        "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "expensive",
    "pace": "relaxed",
    "interests": [
      "fine dining",
      "British cuisine",
      "wine"
    ]
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Found raw venuePreference in Gemini fixed time entry: "Michelin-starred restaurant with innovative British cuisine and wine pairing menu" for activity "Dinner"
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "19:00",
    "activity": "Dinner",
    "location": "Notting Hill",
    "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu",
    "venueRequirements": [],
    "searchParameters": {
      "cuisine": "British",
      "priceLevel": "expensive",
      "specificRequirements": [],
      "venuePreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
    }
  }
]
Fixed time entry: Normalized time from "19:00" to "19:00"
Correctly interpreted time "19:00" as Europe/London time: 7:00 PM (2025-06-05T18:00:00.000Z)
Correctly interpreted time "19:00" as London time: 7:00 PM (2025-06-05T18:00:00.000Z)
Found venue preference: "Michelin-starred restaurant with innovative British cuisine and wine pairing menu" for activity: Dinner
Processed fixed time entry: Dinner at Notting Hill, time: 2025-06-05T18:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Notting Hill"
  ],
  "fixedTimes": [
    {
      "location": "Notting Hill",
      "time": "2025-06-05T18:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM",
      "searchPreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
    }
  ],
  "preferences": {
    "type": "expensive",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Notting Hill" with Google Maps Geocoding API
Geocoding search query: "Notting Hill, London, UK, UK"
Validated "Notting Hill" as neighborhood: "Notting Hill"
Validated "Notting Hill" as neighborhood: "Notting Hill"
Validating location: "Notting Hill" with Google Maps Geocoding API
Geocoding search query: "Notting Hill, London, UK, UK"
Validated "Notting Hill" as neighborhood: "Notting Hill"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Notting Hill"
  ],
  "fixedTimes": [
    {
      "location": "Notting Hill",
      "time": "2025-06-05T18:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "7:00 PM",
      "searchPreference": "Michelin-starred restaurant with innovative British cuisine and wine pairing menu"
    }
  ],
  "preferences": {
    "type": "expensive",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Notting Hill' ],
  fixedTimes: [
    {
      location: 'Notting Hill',
      time: '2025-06-05T18:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Dinner',
      keywords: [],
      minRating: 4,
      displayTime: '7:00 PM',
      searchPreference: 'Michelin-starred restaurant with innovative British cuisine and wine pairing menu'
    }
  ],
  preferences: { type: 'expensive', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
Parsed time "12:00" to normalized time "12:00" and Europe/London time: 12:00 PM (2025-06-06 12:00:00 GMT+1)
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Notting Hill","time":"2025-06-05T18:00:00.000Z","type":"restaurant","searchTerm":"Dinner","keywords":[],"minRating":4,"displayTime":"7:00 PM","searchPreference":"Michelin-starred restaurant with innovative British cuisine and wine pairing menu"}
Parsed ISO timestamp "2025-06-05T18:00:00.000Z" to Europe/London time: 2025-06-05 19:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Dinner',
  location: 'Notting Hill',
  keywords: [
    'Michelin-starred restaurant with innovative British cuisine and wine pairing menu'
  ],
  type: 'restaurant',
  preferences: {
    venuePreference: 'Michelin-starred restaurant with innovative British cuisine and wine pairing menu'
  },
  scheduledDateTime: 2025-06-05T18:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Bayswater for restaurant (score: 50)
   Reasons: Known for restaurant, Very close
🤖 [Gemini] Enhanced query: "Michelin-starred restaurant" innovative British cuisine wine pairing menu Bayswater
📍 [enhancedPlaceSearch] Found specific area coordinates for "Notting Hill": { lat: 51.5155, lng: -0.2046 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5155,-0.2046 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: "Michelin-starred restaurant" innovative British cuisine wine pairing menu Bayswater
🏙️ [enhancedPlaceSearch] After city filtering: 1 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T18:00:00.000Z
🕒 [Operating Hours] Validating hours for The Ledbury at 2025-06-05T18:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 19:00:00 Thursday, Day: 4, Time: 1900
⚠️ [Operating Hours] Could not determine hours for The Ledbury
✅ [Operating Hours] The Ledbury: Could not determine operating hours
✅ [enhancedPlaceSearch] 1 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 1 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Ledbury',
  rating: 4.7,
  address: '127 Ledbury Rd, London W11 2AQ, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: []
🔍 [SERVICE] Place details for "The Ledbury": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "127 Ledbury Rd, London W11 2AQ, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.516655,\n' +
    '      "lng": -0.200063\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51801937989272,\n' +
    '        "lng": -0.1985966201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51531972010728,\n' +
    '        "lng": -0.2012962798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "The Ledbury",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105643504606036899658\\">Alex K</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQENqvzSI87qJhiE_HZ3lm9PSeP_skOyvcVzrHVwyazEnUz3j_uo1fZpc-2DuWrlUhw-KJP4M9ksT_NhSzFLZBO5EFW8TI7Q6b29pDYwcpUJ84da7iKGRU6G6XfgUGPD-ZYS_9djjqk7U6_l-lgphxLCkQVDwK52dU3IJpVUAxC0NEgKDElfSAAfniRfWKNwzqvT6rD35R70A37yoBruK9PDUoT8aAVGDdczDPawzsFZElKGVOWKxoZdMlMWmzkMw-EKQx2RzTTOUIFqW67lJzefCHN9aKZgeYwMYnA2rchSPKnRxO9dq358P8fYQhf98xFy88Z4CgUJPq1Ea9q4NReF6e3tfswOMaoEl6CvTqWffyDpX_5bPwNJ_nleopNy6ZQHnFdIzUmR4Ddsna5QRjOB7qLoxMyP8xoelKoOLmmvaQz0T89MSWoYvH27E3KNSO3X1UpUgL5Wp9JCVFJ0Cnc2BiawCquE3tJjyoeBJ-UILs9FY3pb-f4p_fTnTX0DDU3CrjlrvQkej8D2-_u6XFf5P4WxvuzNKYmD-DXnlRVQ3SdU6-dsFfynS5DhD4aojWU4YaM",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJe29QNB0QdkgR5Kkx_0-jdo4",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GQ8X+MX London, United Kingdom",\n' +
    '    "global_code": "9C3XGQ8X+MX"\n' +
    '  },\n' +
    '  "price_level": 4,\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJe29QNB0QdkgR5Kkx_0-jdo4",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 1600\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1622
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:488:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:640:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:305:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The Ledbury" with details
🔍 [SERVICE] Stored place "The Ledbury" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: The Ledbury at 2025-06-05T18:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:144:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:642:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:384:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:439:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Dinner in London" for London with ID: 10
🐌 [Performance] Slow operation detected: ItineraryPlanningService.createPlan took 5105.43ms
[Weather] Fetching weather for 51.52,-0.2
[Weather] Success with OpenWeatherMap
🌤️ [/:city/plan] Retrieved weather data for itinerary
🕒 [/:city/plan] Place scheduledTime: 2025-06-05T18:00:00.000Z
🌍 [/:city/plan] Using timezone: Europe/London
🕒 [/:city/plan] Formatted time: 7:00 PM
🔍 [/:city/plan] Place "The Ledbury" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined,
  detailsRaw: undefined,
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
🔍 [/api/plan] Processing alternatives for "The Ledbury": {
  hasAlternatives: false,
  alternativesCount: 0,
  alternativesPreview: null
}
📤 [/:city/plan] Sending response with 1 venues
2025-06-05 14:25:04 INFO [API] POST /api/london/plan 200 (5136ms) {
  "statusCode": 200,
  "duration": 5136
}
🐌 [Performance] Slow operation detected: HTTP_POST_/api/london/plan took 5136.06ms
2025-06-05 14:25:05 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:05 WARN [API] POST /api/boston/plan 500 (3ms) {
  "statusCode": 500,
  "duration": 3
}
2025-06-05 14:25:05 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:05 WARN [API] POST /api/boston/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:25:05 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:05 WARN [API] POST /api/boston/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:25:05 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:05 WARN [API] POST /api/boston/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:25:05 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:05 WARN [API] POST /api/boston/plan 500 {
  "statusCode": 500,
  "duration": 0
}
2025-06-05 14:25:06 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:06 WARN [API] POST /api/austin/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:25:06 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:06 WARN [API] POST /api/austin/plan 500 {
  "statusCode": 500,
  "duration": 0
}
2025-06-05 14:25:06 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:06 WARN [API] POST /api/austin/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:25:06 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:06 WARN [API] POST /api/austin/plan 500 {
  "statusCode": 500,
  "duration": 0
}
2025-06-05 14:25:06 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:25:06 WARN [API] POST /api/austin/plan 500 {
  "statusCode": 500,
  "duration": 0
}
2025-06-05 14:28:10 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:10 WARN [API] POST /api/nyc/plan 500 {
  "statusCode": 500,
  "duration": 0
}
2025-06-05 14:28:13 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:13 WARN [API] POST /api/nyc/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:16 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:16 WARN [API] POST /api/nyc/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:19 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:19 WARN [API] POST /api/nyc/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:22 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:22 WARN [API] POST /api/nyc/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:27 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:27 WARN [API] POST /api/london/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:30 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:30 WARN [API] POST /api/london/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:33 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:33 WARN [API] POST /api/london/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:36 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:36 WARN [API] POST /api/london/plan 500 (1ms) {
  "statusCode": 500,
  "duration": 1
}
2025-06-05 14:28:39 ERROR  Global error handler caught: AppError: Too many planning requests. Please wait a few minutes before trying again.
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/middleware/rateLimiter.ts:65:19)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/layer.js:95:5)
    at /Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:284:15
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:365:14)
    at param (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:376:14)
    at Function.process_params (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:421:3)
    at next (/Users/carlos/LondonDayPlanner-1/node_modules/express/lib/router/index.js:280:10)
2025-06-05 14:28:39 WARN [API] POST /api/london/plan 500 {
  "statusCode": 500,
  "duration": 0
}
SIGTERM received, shutting down gracefully...
Server closed
