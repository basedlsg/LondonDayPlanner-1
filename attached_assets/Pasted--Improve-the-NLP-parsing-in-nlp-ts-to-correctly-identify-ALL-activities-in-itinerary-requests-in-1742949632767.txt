```
Improve the NLP parsing in nlp.ts to correctly identify ALL activities in itinerary requests, including vague ones like "do something nice":

Implementation:
1. Modify the parseItineraryRequest() function in nlp.ts to better capture vague activities:
   - Update the Claude system prompt to explicitly request ALL activities including vague ones
   - Add pattern matching for activity indicators like "do something", "activity", "visit", etc.
   - Ensure all time markers (afterwards, later, around X) create activity entries

2. Update the Claude prompt to be more explicit about capturing ALL activities:
```typescript
const response = await anthropic.messages.create({
  model: "claude-3-opus-20240229",
  max_tokens: 1000,
  messages: [{
    role: "user",
    content: `Parse this London itinerary request: "${query}"

Extract the core elements regardless of phrasing:
1. LOCATIONS: Any mentioned place in London (neighborhoods, landmarks, streets, stations)
2. ACTIVITIES: ALL things they want to do (dining, sightseeing, etc.) - INCLUDE vague activities like "do something nice" or "see the area"
3. TIMES: ALL time references (convert to 24-hour format) - capture EVERY time mentioned (morning, afternoon, specific times)
4. PREFERENCES: Desired qualities (quiet, fancy, cheap, etc.)

Be EXHAUSTIVE - capture EVERY activity with its corresponding time and location.

Return JSON only, no explanations, in this exact format:
{
  "startLocation": string | null,
  "destinations": string[],
  "fixedTimes": [{"location": string, "time": string, "type"?: string}],
  "preferences": {"type"?: string, "requirements"?: string[]}
}`
  }],
  system: "Extract ALL activities, times, and locations from London itinerary requests. Be comprehensive and thorough. Return as JSON."
});
```

3. Add a post-processing validation step to ensure all mentioned times have corresponding activities:
```typescript
// Add after parsing Claude's response
const timeReferences = extractAllTimeReferences(query);
for (const timeRef of timeReferences) {
  const hasMatchingActivity = parsed.fixedTimes.some(ft => 
    ft.time === timeRef.time || timeRef.timeExpression.includes(ft.time)
  );
  
  if (!hasMatchingActivity) {
    // Add a placeholder activity for this time reference
    const nearestLocation = findNearestLocationToTimeReference(timeRef, query);
    parsed.fixedTimes.push({
      location: nearestLocation || parsed.startLocation || parsed.destinations[0],
      time: timeRef.time,
      type: guessActivityTypeFromContext(timeRef, query)
    });
  }
}
```

Testing:
1. Create a comprehensive test file testNLPParsing.ts:
```typescript
import { parseItineraryRequest } from './lib/nlp';

async function testVagueActivityParsing() {
  // Test scenarios with vague activities
  const testQueries = [
    // Clear test case with 3 distinct activities including vague one
    "I want brunch in Soho at 10am, then coffee in Covent Garden at 1pm, and afterwards do something nice in the area",
    
    // Test with explicit times but vague activities
    "Visit Green Park at 9am, then around 12 I need to do something in Mayfair, and at 3pm visit a museum",
    
    // Test with relative time references
    "Start in Camden in the morning, then in the afternoon explore Shoreditch, and in the evening do something fun in Soho",
    
    // Test with mixing specific and vague activities
    "Breakfast at The Wolseley at 9am, then spend the afternoon exploring the area, finally dinner at 7pm in Mayfair"
  ];
  
  console.log("=== TESTING VAGUE ACTIVITY PARSING ===\n");
  
  for (const query of testQueries) {
    try {
      console.log(`\nTesting query: "${query}"`);
      const result = await parseItineraryRequest(query);
      
      console.log(`Found ${result.fixedTimes.length} activities:`);
      result.fixedTimes.forEach((activity, i) => {
        console.log(`  ${i+1}. [${activity.time}] ${activity.type || 'activity'} in ${activity.location}`);
      });
      
      // Check if we have at least 3 activities for queries with 3 distinct time references
      if (query.split(/then|afterwards|finally|and/).length >= 3 && result.fixedTimes.length < 3) {
        console.error(`❌ FAILED: Expected at least 3 activities, but only found ${result.fixedTimes.length}`);
      } else {
        console.log(`✅ PASSED: Found correct number of activities`);
      }
      
      console.log("\nFull result:", JSON.stringify(result, null, 2));
    } catch (error) {
      console.error(`❌ ERROR: ${error.message}`);
    }
  }
}

// Run the test
testVagueActivityParsing().catch(console.error);
```

2. Run the above test with various activity descriptions to ensure all activities are captured, including vague ones

3. Create specific test for the example that failed:
```typescript
async function testSpecificExample() {
  const query = "I would like to go to Mayfair for brunch with a friend around 12:30 -- please find a nice place. Then around 3 l will go to Islington and would like to have a coffee. Afterwards around 5, I would like to do something nice in the area";
  
  console.log("=== TESTING SPECIFIC EXAMPLE ===");
  console.log(`Query: "${query}"`);
  
  try {
    const result = await parseItineraryRequest(query);
    console.log(`Found ${result.fixedTimes.length} activities:`);
    result.fixedTimes.forEach((activity, i) => {
      console.log(`  ${i+1}. [${activity.time}] ${activity.type || 'activity'} in ${activity.location}`);
    });
    
    // Verify we captured all three activities
    if (result.fixedTimes.length < 3) {
      console.error(`❌ FAILED: Expected 3 activities, but only found ${result.fixedTimes.length}`);
    } else {
      console.log(`✅ PASSED: Found all 3 activities`);
    }
    
    // Verify specific times
    const times = result.fixedTimes.map(ft => ft.time);
    const expectedTimes = ["12:30", "15:00", "17:00"];
    
    const missingTimes = expectedTimes.filter(time => !times.includes(time));
    if (missingTimes.length > 0) {
      console.error(`❌ FAILED: Missing activities at times: ${missingTimes.join(', ')}`);
    } else {
      console.log(`✅ PASSED: Found activities for all expected times`);
    }
    
    console.log("\nFull result:", JSON.stringify(result, null, 2));
  } catch (error) {
    console.error(`❌ ERROR: ${error.message}`);
  }
}

// Run the specific test
testSpecificExample().catch(console.error);
```

Debug Steps:
- If vague activities are still not being captured, enable more verbose logging of Claude's raw responses
- Check the logic for identifying time references and their associated locations
- Verify the post-processing logic is correctly identifying all mentioned times
- For difficult cases, add more explicit pattern matching for specific activity phrases
```