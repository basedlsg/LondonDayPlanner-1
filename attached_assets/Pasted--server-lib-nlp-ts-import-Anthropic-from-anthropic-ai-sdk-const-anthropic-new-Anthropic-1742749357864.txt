// server/lib/nlp.ts
import { Anthropic } from "@anthropic-ai/sdk";

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY
});

export async function parseItineraryRequest(query) {
  // First, try to use Claude for full understanding
  try {
    const response = await anthropic.messages.create({
      model: "claude-3-opus-20240229",
      max_tokens: 1000,
      messages: [{
        role: "user",
        content: `Parse this London itinerary request: "${query}"`
      }],
      system: `You are helping parse London day planning requests.
Extract:
1. Starting location (default to first mentioned location if no explicit start)
2. All mentioned locations (neighborhoods, landmarks, streets)
3. Activities with times, formatted as ISO time strings (convert informal times like "2pm" to "14:00")
4. Activity types and preferences
Return JSON only, no explanations.`
    });
    
    // Parse Claude's response
    const content = response.content[0].text;
    const parsed = JSON.parse(content);
    
    // If Claude didn't find a starting location but found other locations,
    // use the first one as the starting point
    if (!parsed.startingLocation && parsed.locations && parsed.locations.length > 0) {
      parsed.startingLocation = parsed.locations[0];
    }
    
    // Normalize and standardize times
    if (parsed.activities) {
      parsed.activities = parsed.activities.map(activity => {
        // Ensure all times are in standard format
        if (activity.time) {
          activity.time = standardizeTimeFormat(activity.time);
        }
        return activity;
      });
    }
    
    return parsed;
  } catch (error) {
    console.error("Claude API error:", error);
    
    // Fall back to basic regex parsing as backup
    return fallbackParsing(query);
  }
}

// Convert any time format to standard HH:MM format
function standardizeTimeFormat(timeString) {
  // Handle various time formats
  
  // Case 1: Already in HH:MM format
  if (/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeString)) {
    return timeString;
  }
  
  // Case 2: 2pm, 3pm, etc.
  const amPmMatch = timeString.match(/^(\d+)\s*(am|pm)$/i);
  if (amPmMatch) {
    const hour = parseInt(amPmMatch[1]);
    const isPM = amPmMatch[2].toLowerCase() === 'pm';
    
    let hourIn24 = hour;
    if (isPM && hour < 12) hourIn24 += 12;
    if (!isPM && hour === 12) hourIn24 = 0;
    
    return `${hourIn24.toString().padStart(2, '0')}:00`;
  }
  
  // Case 3: 2:30pm, 3:45am, etc.
  const amPmWithMinutesMatch = timeString.match(/^(\d+):(\d+)\s*(am|pm)$/i);
  if (amPmWithMinutesMatch) {
    const hour = parseInt(amPmWithMinutesMatch[1]);
    const minutes = amPmWithMinutesMatch[2];
    const isPM = amPmWithMinutesMatch[3].toLowerCase() === 'pm';
    
    let hourIn24 = hour;
    if (isPM && hour < 12) hourIn24 += 12;
    if (!isPM && hour === 12) hourIn24 = 0;
    
    return `${hourIn24.toString().padStart(2, '0')}:${minutes.padStart(2, '0')}`;
  }
  
  // Default: If we can't parse it, return as is
  return timeString;
}

// Basic fallback parsing using regex as a last resort
function fallbackParsing(query) {
  const result = {
    startingLocation: null,
    locations: [],
    activities: [],
    preferences: []
  };
  
  // Look for starting location patterns
  const startingPatterns = [
    /(?:I'm|I am|starting|start|begin|beginning)\s+(?:from|at|in|near)\s+([A-Za-z\s]+?)(?:\s+(?:at|and|,|--))/i,
    /(?:from|at|in)\s+([A-Za-z\s]+?)(?:\s+(?:at|and|,|--))/i
  ];
  
  for (const pattern of startingPatterns) {
    const match = query.match(pattern);
    if (match && match[1]) {
      result.startingLocation = match[1].trim();
      result.locations.push(match[1].trim());
      break;
    }
  }
  
  // Look for any locations
  const locationMatches = query.match(/(?:in|at|near|to)\s+([A-Za-z\s]+?)(?:\s+(?:at|and|,|--|for|to))/gi);
  if (locationMatches) {
    locationMatches.forEach(match => {
      const location = match.replace(/(?:in|at|near|to)\s+/i, '').replace(/(?:\s+(?:at|and|,|--|for|to))/i, '').trim();
      if (!result.locations.includes(location)) {
        result.locations.push(location);
      }
    });
  }
  
  // If we found locations but no starting point, use the first location
  if (!result.startingLocation && result.locations.length > 0) {
    result.startingLocation = result.locations[0];
  }
  
  // Look for time patterns
  const timeMatches = query.match(/(?:at|by|around|before|after)\s+(\d{1,2}(?::\d{2})?\s*(?:am|pm)?)/gi);
  if (timeMatches) {
    timeMatches.forEach(match => {
      const timeString = match.replace(/(?:at|by|around|before|after)\s+/i, '').trim();
      const standardTime = standardizeTimeFormat(timeString);
      
      // Find the nearest mentioned location
      let nearestLocation = result.locations[0] || "Unknown location";
      
      result.activities.push({
        type: determineActivityType(query),
        location: nearestLocation,
        time: standardTime
      });
    });
  }
  
  return result;
}

function determineActivityType(query) {
  if (query.includes('lunch') || query.includes('eat') || query.includes('food')) return 'lunch';
  if (query.includes('dinner')) return 'dinner';
  if (query.includes('breakfast')) return 'breakfast';
  if (query.includes('coffee')) return 'coffee';
  if (query.includes('drink') || query.includes('pub') || query.includes('bar')) return 'drinks';
  if (query.includes('museum') || query.includes('gallery')) return 'culture';
  if (query.includes('shop')) return 'shopping';
  return 'activity';
}