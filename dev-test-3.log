
> rest-express@1.0.0 dev
> NODE_ENV=development tsx server/index.ts

🔧 [config.ts] Creating new Config instance.
🔧 [config.ts] Config constructor starting...
🔧 [config.ts] process.env.GOOGLE_PLACES_API_KEY at constructor start: NOT SET
🔧 [config.ts] process.env.GEMINI_API_KEY at constructor start: NOT SET
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: NOT SET
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] AI_PROCESSING feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] USE_GEMINI feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] WEATHER_AWARE feature flag DISABLED (enabled: true, keysMet: false).
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: false, Valid (has length): false
🚫 [config.ts] PLACES_API feature flag DISABLED (enabled: true, keysMet: false).
🔧 [config.ts] initializeFeatureFlags() finished.
🔧 [config.ts] Config constructor finished.
[CityRegistry] Registered city: London (slug: london)
[CityRegistry] Registered city: New York City (slug: nyc)
[CityRegistry] Registered city: Boston (slug: boston)
[CityRegistry] Registered city: Austin (slug: austin)
[CityRegistry] City configurations loading process completed. Registry size: 4
[CityRegistry] Registered slugs: london, nyc, boston, austin
AI_PROCESSING feature flag status: false
🔧 Loading environment variables...
📄 .env file path: /Users/carlos/LondonDayPlanner-1/.env
📄 .env file exists: true
✅ Environment variables loaded by dotenv (keys found): [
  'DATABASE_URL',
  'GOOGLE_PLACES_API_KEY',
  'GEMINI_API_KEY',
  'WEATHER_API_KEY'
]
🔍 Environment check (process.env):
   DATABASE_URL present: true
   GOOGLE_PLACES_API_KEY present: true
   GOOGLE_PLACES_API_KEY length: 39
   GEMINI_API_KEY present: true
🔧 Initializing application configuration...
🔄 [config.ts] Config.recheckEnvironment() called. Forcing reload of API keys and features...
🔧 [config.ts] loadApiKeys() starting...
🔧 [config.ts] Loading GEMINI_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GEMINI_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading GOOGLE_PLACES_API_KEY from process.env: SET (length: 39)
🔧 [config.ts] Stored GOOGLE_PLACES_API_KEY in this.apiKeys: SET (length: 39)
🔧 [config.ts] Loading WEATHER_API_KEY from process.env: SET (length: 32)
🔧 [config.ts] Stored WEATHER_API_KEY in this.apiKeys: SET (length: 32)
🔧 [config.ts] Loading GOOGLE_CLIENT_ID from process.env: NOT SET
🔧 [config.ts] Stored GOOGLE_CLIENT_ID in this.apiKeys: NOT SET (stored as empty string)
🔧 [config.ts] loadApiKeys() finished.
🔧 [config.ts] initializeFeatureFlags() starting...
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] AI_PROCESSING feature flag ENABLED.
[config.ts isApiKeyValid] Key: GEMINI_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] USE_GEMINI feature flag ENABLED.
[config.ts isApiKeyValid] Key: WEATHER_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] WEATHER_AWARE feature flag ENABLED.
[config.ts isApiKeyValid] Key: GOOGLE_PLACES_API_KEY, Present in this.apiKeys: true, Valid (has length): true
✨ [config.ts] PLACES_API feature flag ENABLED.
🔧 [config.ts] initializeFeatureFlags() finished.
🔄 [config.ts] Environment recheck complete. Logging new status:
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
🔧 [config.ts] Config initialize() called.
🔧 [config.ts] Current Application configuration: {
  features: {
    AI_PROCESSING: true,
    USE_GEMINI: true,
    WEATHER_AWARE: true,
    PLACES_API: true
  },
  apiKeysPresent: {
    GEMINI_API_KEY: true,
    GOOGLE_PLACES_API_KEY: true,
    WEATHER_API_KEY: true,
    GOOGLE_CLIENT_ID: false
  },
  environment: 'development'
}
⚠️  SESSION_SECRET not set, using fallback. SET THIS FOR PRODUCTION!
2025-06-05 01:33:03 WARN [SESSION] No SESSION_SECRET found, using development fallback {}
2025-06-05 01:33:03 INFO [SESSION] Session configuration created {
  "isProduction": false,
  "hasSecret": true,
  "cookieSecure": false,
  "sameSite": "lax"
}
🗄️  Testing database connection...
🗄️  Initializing database instance with Neon driver...
✅ Database instance initialized and tested successfully with Neon.
✅ Database connection successful
🔌 WebSocket service initialized
🚀 Server running on http://localhost:5001
🔧 Environment: development
🗄️  Database: Connected
🔑 Google Places API Key: Configured
🔑 Gemini API Key: Configured
🔌 WebSocket: Available at ws://localhost:5001/ws
📝 [/api/plan] Generic plan request received
Query: Dinner at 8 PM, drinks before dinner at 6 PM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Dinner at 8 PM, drinks before dinner at 6 PM
[NLP] Processing query with context for city: London
🔄 [nlp-fixed] Attempting lazy AI initialization for new Gemini processor...
🤖 [nlp-fixed] Checking AI_PROCESSING feature flag status: true
🔑 [nlp-fixed] GEMINI_API_KEY validation: true
✅ [nlp-fixed] Initializing Gemini API with valid API key
✅ [nlp-fixed] Gemini API successfully initialized
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Dinner at 8 PM, drinks before dinner at 6 PM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "drinks",
      "location": "Central London",
      "venuePreference": "bar",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "bar"
      }
    },
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Central London",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"drinks","location":"Central London","searchParameters":{"venueType":"bar"},"time":"18:00","venuePreference":"bar","venueRequirements":[]},{"activity":"dinner","location":"Central London","searchParameters":{"venueType":"restaurant"},"time":"20:00","venuePreference":"restaurant","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{}},"processingTimeMs":3158,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Dinner at 8 PM, drinks before dinner at 6 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"drinks\",\n      \"location\": \"Central London\",\n      \"venuePreference\": \"bar\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"bar\"\n      }\n    },\n    {\n      \"time\": \"20:00\",\n      \"activity\": \"dinner\",\n      \"location\": \"Central London\",\n      \"venuePreference\": \"restaurant\",\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venueType\": \"restaurant\"\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": \"moderate\",\n    \"pace\": \"moderate\",\n    \"interests\": []\n  },\n  \"travelGroup\": {},\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"5fb484d9-fa48-4485-a8e4-5423558979e4","status":"success","timestamp":"2025-06-05T08:36:04.938Z","userQuery":"Dinner at 8 PM, drinks before dinner at 6 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "drinks",
      "location": "Central London",
      "venuePreference": "bar",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "bar"
      }
    },
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Central London",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: drinks at Central London, 18:00
Added fixed time entry: dinner at Central London, 20:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "drinks",
      "location": "Central London",
      "venuePreference": "bar",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "bar",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Central London",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "drinks",
      "location": "Central London",
      "venuePreference": "bar",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "bar",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Central London",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "18:00",
      "activity": "drinks",
      "location": "Central London",
      "venuePreference": "bar",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "bar",
        "priceLevel": "moderate"
      }
    },
    {
      "time": "20:00",
      "activity": "dinner",
      "location": "Central London",
      "venuePreference": "restaurant",
      "venueRequirements": [],
      "searchParameters": {
        "venueType": "restaurant",
        "priceLevel": "moderate"
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": []
  },
  "travelGroup": {},
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "18:00",
    "activity": "drinks",
    "location": "Central London",
    "venuePreference": "bar",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "bar",
      "priceLevel": "moderate"
    }
  },
  {
    "time": "20:00",
    "activity": "dinner",
    "location": "Central London",
    "venuePreference": "restaurant",
    "venueRequirements": [],
    "searchParameters": {
      "venueType": "restaurant",
      "priceLevel": "moderate"
    }
  }
]
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as Europe/London time: 6:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "18:00" as London time: 6:00 PM (2025-06-05T17:00:00.000Z)
Found venue preference: "bar" for activity: drinks
Processed fixed time entry: drinks at Central London, time: 2025-06-05T17:00:00.000Z, type: bar
Fixed time entry: Normalized time from "20:00" to "20:00"
Correctly interpreted time "20:00" as Europe/London time: 8:00 PM (2025-06-05T19:00:00.000Z)
Correctly interpreted time "20:00" as London time: 8:00 PM (2025-06-05T19:00:00.000Z)
Found venue preference: "restaurant" for activity: dinner
Processed fixed time entry: dinner at Central London, time: 2025-06-05T19:00:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "bar",
      "searchTerm": "drinks",
      "minRating": 4,
      "displayTime": "6:00 PM",
      "searchPreference": "bar"
    },
    {
      "location": "Central London",
      "time": "2025-06-05T19:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "minRating": 4,
      "displayTime": "8:00 PM",
      "searchPreference": "restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "bar",
      "searchTerm": "drinks",
      "minRating": 4,
      "displayTime": "6:00 PM",
      "searchPreference": "bar"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T19:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "dinner",
      "minRating": 4,
      "displayTime": "8:00 PM",
      "searchPreference": "restaurant"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T17:00:00.000Z',
      type: 'bar',
      searchTerm: 'drinks',
      keywords: undefined,
      minRating: 4,
      displayTime: '6:00 PM',
      searchPreference: 'bar'
    },
    {
      location: 'Greater London',
      time: '2025-06-05T19:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'dinner',
      keywords: undefined,
      minRating: 4,
      displayTime: '8:00 PM',
      searchPreference: 'restaurant'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T17:00:00.000Z","type":"bar","searchTerm":"drinks","minRating":4,"displayTime":"6:00 PM","searchPreference":"bar"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to Europe/London time: 2025-06-05 18:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'drinks',
  location: 'Greater London',
  keywords: [ 'bar' ],
  type: 'bar',
  preferences: { venuePreference: 'bar' },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Soho for bar (score: 40)
   Reasons: Known for bar, Nearby
🤖 [Gemini] Enhanced query: best bars in Soho London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best bars in Soho London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for The Little Scarlet Door at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for The Little Scarlet Door
✅ [Operating Hours] The Little Scarlet Door: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Cahoots Underground at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Cahoots Underground
✅ [Operating Hours] Cahoots Underground: Could not determine operating hours
🕒 [Operating Hours] Validating hours for SOMA Soho at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for SOMA Soho
✅ [Operating Hours] SOMA Soho: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Simmons Bar | Soho at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Simmons Bar | Soho
✅ [Operating Hours] Simmons Bar | Soho: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'SOMA Soho',
  rating: 4.5,
  address: '14 Denman St, London W1D 7HJ, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Cahoots Underground', rating: 4.6 },
  { name: 'Simmons Bar | Soho', rating: 4.6 },
  { name: 'The Little Scarlet Door', rating: 4.5 }
]
🔍 [SERVICE] Place details for "SOMA Soho": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'bar', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "14 Denman St, London W1D 7HJ, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5108433,\n' +
    '      "lng": -0.1352646\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51213547989272,\n' +
    '        "lng": -0.1339459701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50943582010728,\n' +
    '        "lng": -0.1366456298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "SOMA Soho",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/109404479700629780015\\">Navid Farzadfar</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQe6p5VmkuQyntq3gd3G1b-Fd6dA4J9FV2ekQlv_Cb0T9iSghjT_JDXFtFfQwG7wbBWE-m7KL1iIXEcK-tzfV9-2fLgDAA_dZHkHDsDIKrZSVObwMsDonZvtJmHAhd2HgtjNzHDSnc1sJH0Xyz3Gt9hXttMJNZfpJ1bGuS48c2iEMbbDQVWbLbsNCK1j5zUrU-ZsDLR8LGsyeXLzjN_i02RyP7RcPUWEAJ1RJ5SvDHzQr9eiMJZeJ9uQ4O8dBvbFmtkq--WhyyHPNwi_M02nWc2okW0em0-XlBLZYPGCVRuS5IA4vHdPGuxuVp7MFHPPXBSCxAXysBXhYELV6qKmrGHhHnITJzHSp5x_60ZgsiqPMqvBbB5ZrKdcIVn-TpV_f1KzBNW1PrnHwPPsijqLyvzI03JeEl6HibLI7OGgXMoq2SQWGr6WVq-gLPCwYLstHQyyP8FdZWbTFcLjEddTslCHA-C_aZ-bfLXlhyTeiVGRMKQB8svglVJaTM7w6HS6ACHOhe_e2mpYVVVr0Mqaul8R5nOWYiJmDHjY8MIHTtp5soEcr2N-tVaX3wpUEvfFWkXxDkWTTNTQA",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJk-Pwqj8FdkgRsRgIlFZ8FNU",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV67+8V London, United Kingdom",\n' +
    '    "global_code": "9C3XGV67+8V"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJk-Pwqj8FdkgRsRgIlFZ8FNU",\n' +
    '  "types": [\n' +
    '    "bar",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 468\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'bar', 'point_of_interest', 'establishment' ],
  detailsSize: 1590
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "SOMA Soho" with details
🔍 [SERVICE] Stored place "SOMA Soho" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'bar', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: SOMA Soho at 2025-06-05T17:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T19:00:00.000Z","type":"restaurant","searchTerm":"dinner","minRating":4,"displayTime":"8:00 PM","searchPreference":"restaurant"}
Parsed ISO timestamp "2025-06-05T19:00:00.000Z" to Europe/London time: 2025-06-05 20:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'dinner',
  location: 'Greater London',
  keywords: [ 'restaurant' ],
  type: 'restaurant',
  preferences: { venuePreference: 'restaurant' },
  scheduledDateTime: 2025-06-05T19:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for restaurant (score: 40)
   Reasons: Known for restaurant, Nearby
🤖 [Gemini] Enhanced query: best restaurants in Fitzrovia
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Fitzrovia
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T19:00:00.000Z
🕒 [Operating Hours] Validating hours for Circolo Popolare at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for Circolo Popolare
✅ [Operating Hours] Circolo Popolare: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Faros Oxford Circus at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for Faros Oxford Circus
✅ [Operating Hours] Faros Oxford Circus: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Caravan Fitzrovia Restaurant at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for Caravan Fitzrovia Restaurant
✅ [Operating Hours] Caravan Fitzrovia Restaurant: Could not determine operating hours
🕒 [Operating Hours] Validating hours for 64 Goodge Street at 2025-06-05T19:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 20:00:00 Thursday, Day: 4, Time: 2000
⚠️ [Operating Hours] Could not determine hours for 64 Goodge Street
✅ [Operating Hours] 64 Goodge Street: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: '64 Goodge Street',
  rating: 4.9,
  address: '64 Goodge St, London W1T 4NF, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Faros Oxford Circus', rating: 4.9 },
  { name: 'Circolo Popolare', rating: 4.8 },
  { name: 'Caravan Fitzrovia Restaurant', rating: 4.4 }
]
🔍 [SERVICE] Place details for "64 Goodge Street": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "64 Goodge St, London W1T 4NF, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5190239,\n' +
    '      "lng": -0.1368672\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.52035482989272,\n' +
    '        "lng": -0.1354988201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51765517010728,\n' +
    '        "lng": -0.1381984798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "64 Goodge Street",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4175,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/104941929946452172160\\">64 Goodge Street</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSAcjd9XUR2Wy5JgqNivJvjpAidgTSALkJdbVT0vtWmnEdcotIcjNWuPnteC-HAdgh9IMd_QdOxsFVJUQwEANBEQetiadvy3bzuPNYncj4cC2crD7o31hiAcpppJIypBa1jkMvE2L6hTIlWGZlq7hOn6yrP6RT4Jq-NC63bznOCLlegdhbmV_M1sYrQXXhVtXUxFLxxHxg28QZs4_0eVor9P1YlQFZIobPCibuzwilU1Xdkyh5AsC0Bxd41HxjfC3rzKn93nmpRTfoUOXRN4cezj1UwTAUNujtAbybPzea-McmJVqM",\n' +
    '      "width": 6263\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJVVUuwSsbdkgRRSNEGe3BRBU",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV97+J6 London, United Kingdom",\n' +
    '    "global_code": "9C3XGV97+J6"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJVVUuwSsbdkgRRSNEGe3BRBU",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 147\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1343
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "64 Goodge Street" with details
🔍 [SERVICE] Stored place "64 Goodge Street" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: 64 Goodge Street at 2025-06-05T19:00:00.000Z
Calculating travel times for 2 places in London
Travel time from SOMA Soho to 64 Goodge Street: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "drinks, dinner in London" for London with ID: 1
[Weather] Fetching weather for 51.51,-0.14
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "SOMA Soho" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "64 Goodge Street" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 01:36:08 INFO [API] POST /api/plan 200 (6427ms) {
  "statusCode": 200,
  "duration": 6427
}
📝 [/api/plan] Generic plan request received
Query: I have a meeting at 3 PM in Canary Wharf, want lunch before that
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: I have a meeting at 3 PM in Canary Wharf, want lunch before that
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: I have a meeting at 3 PM in Canary Wharf, want lunch before that
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [
    {
      "time": "15:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Canary Wharf",
      "bufferBefore": 30,
      "bufferAfter": 15,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "12:30",
      "activity": "lunch",
      "location": "Canary Wharf",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[{"activity":"meeting","bufferAfter":15,"bufferBefore":30,"duration":60,"isFixed":true,"location":"Canary Wharf","time":"15:00"}],"fixedTimeEntries":[{"activity":"lunch","location":"Canary Wharf","searchParameters":{"specificRequirements":[]},"time":"12:30","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":3761,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    I have a meeting at 3 PM in Canary Wharf, want lunch before that\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [\n    {\n      \"time\": \"15:00\",\n      \"duration\": 60,\n      \"activity\": \"meeting\",\n      \"location\": \"Canary Wharf\",\n      \"bufferBefore\": 30,\n      \"bufferAfter\": 15,\n      \"isFixed\": true\n    }\n  ],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"12:30\",\n      \"activity\": \"lunch\",\n      \"location\": \"Canary Wharf\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"c9a76e63-a3e9-4ef2-bc6d-a55bce15c67c","status":"success","timestamp":"2025-06-05T08:43:25.842Z","userQuery":"I have a meeting at 3 PM in Canary Wharf, want lunch before that"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [
    {
      "time": "15:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Canary Wharf",
      "bufferBefore": 30,
      "bufferAfter": 15,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "12:30",
      "activity": "lunch",
      "location": "Canary Wharf",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: lunch at Canary Wharf, 12:30
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [
    {
      "time": "15:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Canary Wharf",
      "bufferBefore": 30,
      "bufferAfter": 15,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "12:30",
      "activity": "lunch",
      "location": "Canary Wharf",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [
    {
      "time": "15:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Canary Wharf",
      "bufferBefore": 30,
      "bufferAfter": 15,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "12:30",
      "activity": "lunch",
      "location": "Canary Wharf",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [
    {
      "time": "15:00",
      "duration": 60,
      "activity": "meeting",
      "location": "Canary Wharf",
      "bufferBefore": 30,
      "bufferAfter": 15,
      "isFixed": true
    }
  ],
  "fixedTimeEntries": [
    {
      "time": "12:30",
      "activity": "lunch",
      "location": "Canary Wharf",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: [
  {
    "time": "15:00",
    "duration": 60,
    "activity": "meeting",
    "location": "Canary Wharf",
    "bufferBefore": 30,
    "bufferAfter": 15,
    "isFixed": true
  }
]
Correctly interpreted time "15:00" as Europe/London time: 3:00 PM (2025-06-05T14:00:00.000Z)
Fixed appointment: meeting at 3:00 PM in Canary Wharf
Raw fixed time entries from Gemini: [
  {
    "time": "12:30",
    "activity": "lunch",
    "location": "Canary Wharf",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "12:30" to "12:30"
Correctly interpreted time "12:30" as Europe/London time: 12:30 PM (2025-06-05T11:30:00.000Z)
Correctly interpreted time "12:30" as London time: 12:30 PM (2025-06-05T11:30:00.000Z)
Processed fixed time entry: lunch at Canary Wharf, time: 2025-06-05T11:30:00.000Z, type: restaurant
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Canary Wharf"
  ],
  "fixedTimes": [
    {
      "location": "Canary Wharf",
      "time": "2025-06-05T11:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:30 PM"
    },
    {
      "location": "Canary Wharf",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "skip",
      "searchTerm": "meeting",
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Validating location: "Canary Wharf" with Google Maps Geocoding API
Geocoding search query: "Canary Wharf, London, UK, UK"
Validated "Canary Wharf" as neighborhood: "Canary Wharf"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Canary Wharf"
  ],
  "fixedTimes": [
    {
      "location": "Canary Wharf",
      "time": "2025-06-05T11:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:30 PM"
    },
    {
      "location": "Canary Wharf",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "skip",
      "searchTerm": "meeting",
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Canary Wharf' ],
  fixedTimes: [
    {
      location: 'Canary Wharf',
      time: '2025-06-05T11:30:00.000Z',
      type: 'restaurant',
      searchTerm: 'lunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:30 PM',
      searchPreference: undefined
    },
    {
      location: 'Canary Wharf',
      time: '2025-06-05T14:00:00.000Z',
      type: 'skip',
      searchTerm: 'meeting',
      displayTime: '3:00 PM'
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Canary Wharf","time":"2025-06-05T11:30:00.000Z","type":"restaurant","searchTerm":"lunch","keywords":[],"minRating":4,"displayTime":"12:30 PM"}
Parsed ISO timestamp "2025-06-05T11:30:00.000Z" to Europe/London time: 2025-06-05 12:30:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'lunch',
  location: 'Canary Wharf',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T11:30:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Covent Garden for restaurant (score: 40)
   Reasons: Known for restaurant, Nearby
🤖 [Gemini] Enhanced query: best restaurants in Covent Garden
📍 [enhancedPlaceSearch] Found specific area coordinates for "Canary Wharf": { lat: 51.5054, lng: -0.0235 }
🎯 [enhancedPlaceSearch] Using location bias: 51.5054,-0.0235 with radius 5000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Covent Garden
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T11:30:00.000Z
🕒 [Operating Hours] Validating hours for Brother Marcus Covent Garden at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Brother Marcus Covent Garden
✅ [Operating Hours] Brother Marcus Covent Garden: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Ave Mario at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Ave Mario
✅ [Operating Hours] Ave Mario: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Flat Iron Covent Garden at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Flat Iron Covent Garden
✅ [Operating Hours] Flat Iron Covent Garden: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Caravan Covent Garden Restaurant at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Caravan Covent Garden Restaurant
✅ [Operating Hours] Caravan Covent Garden Restaurant: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Brother Marcus Covent Garden',
  rating: 4.9,
  address: '23 Slingsby Pl, London WC2E 9AB, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Ave Mario', rating: 4.8 },
  { name: 'Caravan Covent Garden Restaurant', rating: 4.7 },
  { name: 'Flat Iron Covent Garden', rating: 4.6 }
]
🔍 [SERVICE] Place details for "Brother Marcus Covent Garden": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "23 Slingsby Pl, London WC2E 9AB, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5127993,\n' +
    '      "lng": -0.1263622\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51422517989273,\n' +
    '        "lng": -0.1248119201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51152552010728,\n' +
    '        "lng": -0.1275115798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Brother Marcus Covent Garden",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/114244003623254151313\\">Mohammed Alshallal</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRXttddBvzo3Izw42RFGpNsrxUOipT2kWw6EfFKKPA64HjHc1mW3Y9svuHdh6tMJO8zioY8Zo4kuIhIipMQKfSg1IyHU-RzXwsM-3_07gxUi8AxI9HLswIKC6oJ02Z-b7v-XWliTSP2Rhls9tKdqWFCbqsrdsQPLvodBObXYS6Jxf7_G23AQEdQegycxQVDwn2Z1-JBY6CGqFXdEbHCSPclX6G8-0UVf3c5vFtOU7TvQzZKlOuRUpLz6XwUp9gfa7LZCgsOPe08bSHErXXDs7XDKv3EhcggkhB4hnLzoUAD1hbyyCScASXlWeXCFLFwaLXa4ZmZO9VLTIP5StqSTErnLnPw81GctVXTdWix4CMMLnhErgsk_mRLgpmzSKgiV_iqzTSCV8oTAt9aq-KrQ0zp_CB6-88BbHUC2b3s2AwjtusewRDnGUhBblA3SYtOcGjZacoR_hTOolISz3a9TsI5UVAn5Rs61VemTybMVlmpYz8V9KhSR3I1JFJ9n16PPURckgE5U1AGYEElWYJ3fZL7eJK4RHupzOedpmsCSqKhTG4SL7ZWrHC7qG-oajKtcI41N8r8ZGX5Mw",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJp9exgRcFdkgRpjsnrbLsyto",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV7F+4F London, United Kingdom",\n' +
    '    "global_code": "9C3XGV7F+4F"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJp9exgRcFdkgRpjsnrbLsyto",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2035\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1643
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Brother Marcus Covent Garden" with details
🔍 [SERVICE] Stored place "Brother Marcus Covent Garden" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Brother Marcus Covent Garden at 2025-06-05T11:30:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Canary Wharf","time":"2025-06-05T14:00:00.000Z","type":"skip","searchTerm":"meeting","displayTime":"3:00 PM"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to Europe/London time: 2025-06-05 15:00:00 GMT+1
Adding meeting/appointment without venue search: meeting at Canary Wharf
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:439:52)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "meeting" with details
Added meeting to itinerary: meeting at 2025-06-05T14:00:00.000Z
Calculating travel times for 2 places in London
Travel time from Brother Marcus Covent Garden to meeting: 120 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "lunch, meeting in London" for London with ID: 2
[Weather] Fetching weather for 51.51,-0.13
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Brother Marcus Covent Garden" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "meeting" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 01:43:27 INFO [API] POST /api/plan 200 (5529ms) {
  "statusCode": 200,
  "duration": 5529
}
📝 [/api/plan] Generic plan request received
Query: I need to catch a flight at 9 PM from Heathrow. I want dinner before at 6 PM, and shopping before dinner at 4 PM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: I need to catch a flight at 9 PM from Heathrow. I want dinner before at 6 PM, and shopping before dinner at 4 PM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: I need to catch a flight at 9 PM from Heathrow. I want dinner before at 6 PM, and shopping before dinner at 4 PM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "16:00",
      "activity": "Shopping",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "18:00",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "Flight",
      "location": "Heathrow Airport",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Shopping","location":"Central London","searchParameters":{"specificRequirements":[]},"time":"16:00","venueRequirements":[]},{"activity":"Dinner","location":"Central London","searchParameters":{"specificRequirements":[]},"time":"18:00","venueRequirements":[]},{"activity":"Flight","location":"Heathrow Airport","searchParameters":{"specificRequirements":[]},"time":"21:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":4775,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    I need to catch a flight at 9 PM from Heathrow. I want dinner before at 6 PM, and shopping before dinner at 4 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"16:00\",\n      \"activity\": \"Shopping\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"18:00\",\n      \"activity\": \"Dinner\",\n      \"location\": \"Central London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"21:00\",\n      \"activity\": \"Flight\",\n      \"location\": \"Heathrow Airport\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"8981c946-bc08-4d04-8c25-cd046f5a22d6","status":"success","timestamp":"2025-06-05T08:43:53.773Z","userQuery":"I need to catch a flight at 9 PM from Heathrow. I want dinner before at 6 PM, and shopping before dinner at 4 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "16:00",
      "activity": "Shopping",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "18:00",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "Flight",
      "location": "Heathrow Airport",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Shopping at Central London, 16:00
Added fixed time entry: Dinner at Central London, 18:00
Added fixed time entry: Flight at Heathrow Airport, 21:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "16:00",
      "activity": "Shopping",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "18:00",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "Flight",
      "location": "Heathrow Airport",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "16:00",
      "activity": "Shopping",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "18:00",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "Flight",
      "location": "Heathrow Airport",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "16:00",
      "activity": "Shopping",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "18:00",
      "activity": "Dinner",
      "location": "Central London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "21:00",
      "activity": "Flight",
      "location": "Heathrow Airport",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "16:00",
    "activity": "Shopping",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "18:00",
    "activity": "Dinner",
    "location": "Central London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "21:00",
    "activity": "Flight",
    "location": "Heathrow Airport",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "16:00" to "16:00"
Correctly interpreted time "16:00" as Europe/London time: 4:00 PM (2025-06-05T15:00:00.000Z)
Correctly interpreted time "16:00" as London time: 4:00 PM (2025-06-05T15:00:00.000Z)
Processed fixed time entry: Shopping at Central London, time: 2025-06-05T15:00:00.000Z, type: shopping_mall
Fixed time entry: Normalized time from "18:00" to "18:00"
Correctly interpreted time "18:00" as Europe/London time: 6:00 PM (2025-06-05T17:00:00.000Z)
Correctly interpreted time "18:00" as London time: 6:00 PM (2025-06-05T17:00:00.000Z)
Processed fixed time entry: Dinner at Central London, time: 2025-06-05T17:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "21:00" to "21:00"
Correctly interpreted time "21:00" as Europe/London time: 9:00 PM (2025-06-05T20:00:00.000Z)
Correctly interpreted time "21:00" as London time: 9:00 PM (2025-06-05T20:00:00.000Z)
Processed fixed time entry: Flight at Heathrow Airport, time: 2025-06-05T20:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Central London",
    "Heathrow Airport"
  ],
  "fixedTimes": [
    {
      "location": "Central London",
      "time": "2025-06-05T15:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping",
      "keywords": [],
      "minRating": 4,
      "displayTime": "4:00 PM"
    },
    {
      "location": "Central London",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "6:00 PM"
    },
    {
      "location": "Heathrow Airport",
      "time": "2025-06-05T20:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Flight",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validated "Central London" as neighborhood: "Greater London"
Validating location: "Heathrow Airport" with Google Maps Geocoding API
Geocoding search query: "Heathrow Airport, London, UK, UK"
Preserving landmark name: "Heathrow Airport"
Validated "Heathrow Airport" as neighborhood: "Heathrow Airport"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validating location: "Central London" with Google Maps Geocoding API
Geocoding search query: "Central London, London, UK, UK"
Validated "Central London" as admin area: "Greater London"
Validating location: "Heathrow Airport" with Google Maps Geocoding API
Geocoding search query: "Heathrow Airport, London, UK, UK"
Preserving landmark name: "Heathrow Airport"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London",
    "Heathrow Airport"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T15:00:00.000Z",
      "type": "shopping_mall",
      "searchTerm": "Shopping",
      "keywords": [],
      "minRating": 4,
      "displayTime": "4:00 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T17:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Dinner",
      "keywords": [],
      "minRating": 4,
      "displayTime": "6:00 PM"
    },
    {
      "location": "Heathrow Airport",
      "time": "2025-06-05T20:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Flight",
      "keywords": [],
      "minRating": 4,
      "displayTime": "9:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London', 'Heathrow Airport' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T15:00:00.000Z',
      type: 'shopping_mall',
      searchTerm: 'Shopping',
      keywords: [],
      minRating: 4,
      displayTime: '4:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T17:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Dinner',
      keywords: [],
      minRating: 4,
      displayTime: '6:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Heathrow Airport',
      time: '2025-06-05T20:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Flight',
      keywords: [],
      minRating: 4,
      displayTime: '9:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T15:00:00.000Z","type":"shopping_mall","searchTerm":"Shopping","keywords":[],"minRating":4,"displayTime":"4:00 PM"}
Parsed ISO timestamp "2025-06-05T15:00:00.000Z" to Europe/London time: 2025-06-05 16:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Shopping',
  location: 'Greater London',
  keywords: [],
  type: 'shopping_mall',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T15:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Soho for shopping_mall (score: 40)
   Reasons: Known for shopping_mall, Nearby
🤖 [Gemini] Enhanced query: best shopping malls in Soho London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best shopping malls in Soho London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T15:00:00.000Z
🕒 [Operating Hours] Validating hours for Westfield London at 2025-06-05T15:00:00.000Z
⚠️ [Operating Hours] No opening hours data for Westfield London
✅ [Operating Hours] Westfield London: No operating hours data available
🕒 [Operating Hours] Validating hours for Covent Garden at 2025-06-05T15:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 16:00:00 Thursday, Day: 4, Time: 1600
⚠️ [Operating Hours] Could not determine hours for Covent Garden
✅ [Operating Hours] Covent Garden: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Brunswick Centre at 2025-06-05T15:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 16:00:00 Thursday, Day: 4, Time: 1600
⚠️ [Operating Hours] Could not determine hours for The Brunswick Centre
✅ [Operating Hours] The Brunswick Centre: Could not determine operating hours
🕒 [Operating Hours] Validating hours for London Designer Outlet at 2025-06-05T15:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 16:00:00 Thursday, Day: 4, Time: 1600
⚠️ [Operating Hours] Could not determine hours for London Designer Outlet
✅ [Operating Hours] London Designer Outlet: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Westfield London',
  rating: 4.5,
  address: 'Ariel Way, London W12 7GF, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Covent Garden', rating: 4.6 },
  { name: 'London Designer Outlet', rating: 4.3 },
  { name: 'The Brunswick Centre', rating: 4.2 }
]
🔍 [SERVICE] Place details for "Westfield London": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'shopping_mall', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "Ariel Way, London W12 7GF, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.50757249999999,\n' +
    '      "lng": -0.2212054\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51108079999999,\n' +
    '        "lng": -0.2154695\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.5042492,\n' +
    '        "lng": -0.2276403\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/shopping-71.png",\n' +
    '  "icon_background_color": "#4B96F3",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/shopping_pinlet",\n' +
    '  "name": "Westfield London",\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105522690074962315341\\">Navid Anayati</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQEkVuDVD-KJvARYrJudyxbUdPk6AIrvqmj4KRSdOUsG2QS1kLJ26qzj0rgZ18rNcyG8pM1lX-Ay-M-nuJMg7DtoHE_9AWYCpGn-gqKxaHmH7mBUb8Xj_HLhd7dzUdrDMlPBxstols1iUDh092imKUHxzkAJGBOaObsNGkCBlqBWNbWuBt8ZqWn4STmjZhpTUdW3Yk5RUagjJwz2i0GFDub9bO9RWyxbGhJh0uPf5P-cIcSAWtC619LjOq3mFX2xpe68VJarHUhBKH2skwIiRti7eyG3NcEi8jCcIdvH_4HvJ_2caLHrM_rXEsC_kvS3QSriYUVhMRNj6u3bMr_J6udpEt35RQsII30dr6A9tPVWepbcMS_fXx1_4gS5zKLiEn1t1SmiFkHBQPT-S9wOIXEmIFbtldcco7qRnns0AvrfWqVf4W_s9SsundJFECmHGzqSnG27m_Up0MapYJTqX7Y214dNgfACilD40cF_lpodBjNm4l4gK2vUErjRhq-nwUrUssZsOrcSEwvLkH_FA8iORICuwLFh2rKAu5bl-W1lAkFvWh_hImBV9Yd5E_TIHJ7D5X8Vg6_Mg",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJTZ98odkPdkgRDGbnRTSQUuI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GQ5H+2G London, United Kingdom",\n' +
    '    "global_code": "9C3XGQ5H+2G"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJTZ98odkPdkgRDGbnRTSQUuI",\n' +
    '  "types": [\n' +
    '    "shopping_mall",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 59584\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'shopping_mall', 'point_of_interest', 'establishment' ],
  detailsSize: 1561
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Westfield London" with details
🔍 [SERVICE] Stored place "Westfield London" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'shopping_mall', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Westfield London at 2025-06-05T15:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T17:00:00.000Z","type":"restaurant","searchTerm":"Dinner","keywords":[],"minRating":4,"displayTime":"6:00 PM"}
Parsed ISO timestamp "2025-06-05T17:00:00.000Z" to Europe/London time: 2025-06-05 18:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Dinner',
  location: 'Greater London',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T17:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for restaurant (score: 40)
   Reasons: Known for restaurant, Nearby
🤖 [Gemini] Enhanced query: best restaurants in Fitzrovia
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best restaurants in Fitzrovia
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T17:00:00.000Z
🕒 [Operating Hours] Validating hours for Circolo Popolare at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Circolo Popolare
✅ [Operating Hours] Circolo Popolare: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Faros Oxford Circus at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Faros Oxford Circus
✅ [Operating Hours] Faros Oxford Circus: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Caravan Fitzrovia Restaurant at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for Caravan Fitzrovia Restaurant
✅ [Operating Hours] Caravan Fitzrovia Restaurant: Could not determine operating hours
🕒 [Operating Hours] Validating hours for 64 Goodge Street at 2025-06-05T17:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 18:00:00 Thursday, Day: 4, Time: 1800
⚠️ [Operating Hours] Could not determine hours for 64 Goodge Street
✅ [Operating Hours] 64 Goodge Street: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Faros Oxford Circus',
  rating: 4.9,
  address: '22-24 Great Portland St, London W1W 8QS, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: '64 Goodge Street', rating: 4.9 },
  { name: 'Circolo Popolare', rating: 4.8 },
  { name: 'Caravan Fitzrovia Restaurant', rating: 4.4 }
]
🔍 [SERVICE] Place details for "Faros Oxford Circus": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "22-24 Great Portland St, London W1W 8QS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.516568,\n' +
    '      "lng": -0.1409686\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51796982989271,\n' +
    '        "lng": -0.1396523701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51527017010726,\n' +
    '        "lng": -0.1423520298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Faros Oxford Circus",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/112064571110204626656\\">Dilafruz Mamedova</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQS4P83nQrc_z6c5vqpCWaHQx4whDIu4jBC4J3aIJ1IrJ9cioebTkpw8-naunzp4PXjMRKmzdBx-bJZ483a2oAfE2zE1AO6AAQhvPHYuQtuRRyN9KrNxKoQqj2wzZD-l23xeRZwK6JTHlnHX9Nm5ptd2w5gH-rEnzKa6Ar3f6H3LplWL6qdExIM2qIiPPAk9dd1L5X9LNaR46rRZ5i2hGA6eyjF3PDAo_CU6Dhv02kqeq8KTUq-gyq0eGXme5zI3ttFONm6EtB94Po6aniuey-0oQBKxcW-Zf6RVTZlLGDpqkhFAMS7Nso0AI5N39bjuRZ4UhGgo_QwUTmntak-pb-HSFePcTGaxMXLhnX7e1dvrOtfF_YmPPvaXcAGJbJ8mIyaniPyuT0wWuXpAYDQmm6ovOmMUhvzIcOcxX_kqhGzCLGu0F-Bhx1wXkOWoCNiK2Rq0itDYj-vi0i69-dPp3oQ9NBY9KWVw9kCsDvBmsVLrftJS9xo0Hy3nLdMV6lsXWQUdlO06rsfzLTEBqpZTO8_FxSDC5263ki4ftpMD_t6CvTMSOp3CtDBFsGmXL_img6hZA",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ_7T82w8bdkgRngOFit8DkGg",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV85+JJ London, United Kingdom",\n' +
    '    "global_code": "9C3XGV85+JJ"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJ_7T82w8bdkgRngOFit8DkGg",\n' +
    '  "types": [\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2472\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1649
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Faros Oxford Circus" with details
🔍 [SERVICE] Stored place "Faros Oxford Circus" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [ 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Faros Oxford Circus at 2025-06-05T17:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Heathrow Airport","time":"2025-06-05T20:00:00.000Z","type":"attraction","searchTerm":"Flight","keywords":[],"minRating":4,"displayTime":"9:00 PM"}
Parsed ISO timestamp "2025-06-05T20:00:00.000Z" to Europe/London time: 2025-06-05 21:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Flight',
  location: 'Heathrow Airport',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T20:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Flight bar" Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Flight bar" Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 2 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T20:00:00.000Z
🕒 [Operating Hours] Validating hours for Flight Club Bloomsbury at 2025-06-05T20:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 21:00:00 Thursday, Day: 4, Time: 2100
⚠️ [Operating Hours] Could not determine hours for Flight Club Bloomsbury
✅ [Operating Hours] Flight Club Bloomsbury: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Flying Horse at 2025-06-05T20:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 21:00:00 Thursday, Day: 4, Time: 2100
⚠️ [Operating Hours] Could not determine hours for Flying Horse
✅ [Operating Hours] Flying Horse: Could not determine operating hours
✅ [enhancedPlaceSearch] 2 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 2 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Flight Club Bloomsbury',
  rating: 4.6,
  address: '55 New Oxford St, London WC1A 1BS, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [ { name: 'Flying Horse', rating: 4.2 } ]
🔍 [SERVICE] Place details for "Flight Club Bloomsbury": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'bar', 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "55 New Oxford St, London WC1A 1BS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5167444,\n' +
    '      "lng": -0.1273751\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51812252989272,\n' +
    '        "lng": -0.1260842201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51542287010728,\n' +
    '        "lng": -0.1287838798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/bar-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/bar_pinlet",\n' +
    '  "name": "Flight Club Bloomsbury",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 647,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105888504857728829896\\">Flight Club Bloomsbury</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSqZpTxCWC_w9pIFGktdCaZRVeYeQrLTg-CRZ9a01bwBkgYqYGJ8IM1C69wdxcByWFSMA3rsEME7-Bzy8jfc7WsdfD71dDw-eLO16cx2c3cszbNzhYMfqQwiWG5Zy_BP9Ppb6SlxhN_UnhyqL-8vK67gMR-0jM3MQmk_aSCEZEA_7llxD2Y7GbtfGyIFVfXYbgHfhxVWUea-3BGM6Fv-vYR4Cbzxy_4aVvZHNHAoJCVakYsGs8UdmVcSmT_6JsqzehKHi8RjqUN3Dehb2uEid6PFBdPiIPAAEUqKpxWX0bcFgh4D5Y",\n' +
    '      "width": 970\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJsSUS7zIbdkgRh4pgkn0wrP8",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV8F+M3 London, United Kingdom",\n' +
    '    "global_code": "9C3XGV8F+M3"\n' +
    '  },\n' +
    '  "price_level": 2,\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJsSUS7zIbdkgRh4pgkn0wrP8",\n' +
    '  "types": [\n' +
    '    "bar",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 3004\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'bar', 'restaurant', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1367
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Flight Club Bloomsbury" with details
🔍 [SERVICE] Stored place "Flight Club Bloomsbury" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'price_level',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'bar', 'restaurant', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Flight Club Bloomsbury at 2025-06-05T20:00:00.000Z
🗺️ Optimizing route for 3 places in London
Calculating travel times for 3 places in London
Travel time from Westfield London to Faros Oxford Circus: 17 minutes
Travel time from Faros Oxford Circus to Flight Club Bloomsbury: 5 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Shopping, Dinner, Flight in London" for London with ID: 3
[Weather] Fetching weather for 51.51,-0.22
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Westfield London" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "Faros Oxford Circus" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "Flight Club Bloomsbury" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 3 venues
2025-06-05 01:43:58 INFO [API] POST /api/plan 200 (9066ms) {
  "statusCode": 200,
  "duration": 9066
}
📝 [/api/plan] Generic plan request received
Query: I want to visit Big Ben, then have lunch near the Tower of London, then see Buckingham Palace
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: I want to visit Big Ben, then have lunch near the Tower of London, then see Buckingham Palace
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: I want to visit Big Ben, then have lunch near the Tower of London, then see Buckingham Palace
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "12:30",
      "activity": "Lunch",
      "location": "near the Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "14:30",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "sightseeing"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Visit Big Ben","location":"Big Ben","searchParameters":{"specificRequirements":[]},"time":"11:00","venueRequirements":[]},{"activity":"Lunch","location":"near the Tower of London","searchParameters":{"specificRequirements":[]},"time":"12:30","venueRequirements":[]},{"activity":"See Buckingham Palace","location":"Buckingham Palace","searchParameters":{"specificRequirements":[]},"time":"14:30","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":["sightseeing"],"pace":"moderate"},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":4759,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    I want to visit Big Ben, then have lunch near the Tower of London, then see Buckingham Palace\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"11:00\",\n      \"activity\": \"Visit Big Ben\",\n      \"location\": \"Big Ben\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"12:30\",\n      \"activity\": \"Lunch\",\n      \"location\": \"near the Tower of London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"14:30\",\n      \"activity\": \"See Buckingham Palace\",\n      \"location\": \"Buckingham Palace\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": \"moderate\",\n    \"interests\": [\"sightseeing\"]\n  },\n  \"travelGroup\": {\n    \"adults\": 1,\n    \"children\": 0\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"4079c198-e9bf-49cb-bcf8-40b7e8421d9d","status":"success","timestamp":"2025-06-05T08:46:18.091Z","userQuery":"I want to visit Big Ben, then have lunch near the Tower of London, then see Buckingham Palace"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "12:30",
      "activity": "Lunch",
      "location": "near the Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "14:30",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "sightseeing"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Visit Big Ben at Big Ben, 11:00
Added fixed time entry: Lunch at near the Tower of London, 12:30
Added fixed time entry: See Buckingham Palace at Buckingham Palace, 14:30
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:30",
      "activity": "Lunch",
      "location": "near the Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:30",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "sightseeing"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:30",
      "activity": "Lunch",
      "location": "near the Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:30",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "sightseeing"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "11:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:30",
      "activity": "Lunch",
      "location": "near the Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:30",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "pace": "moderate",
    "interests": [
      "sightseeing"
    ]
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "11:00",
    "activity": "Visit Big Ben",
    "location": "Big Ben",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "12:30",
    "activity": "Lunch",
    "location": "near the Tower of London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "14:30",
    "activity": "See Buckingham Palace",
    "location": "Buckingham Palace",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "11:00" to "11:00"
Correctly interpreted time "11:00" as Europe/London time: 11:00 AM (2025-06-05T10:00:00.000Z)
Correctly interpreted time "11:00" as London time: 11:00 AM (2025-06-05T10:00:00.000Z)
Processed fixed time entry: Visit Big Ben at Big Ben, time: 2025-06-05T10:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:30" to "12:30"
Correctly interpreted time "12:30" as Europe/London time: 12:30 PM (2025-06-05T11:30:00.000Z)
Correctly interpreted time "12:30" as London time: 12:30 PM (2025-06-05T11:30:00.000Z)
Processed fixed time entry: Lunch at near the Tower of London, time: 2025-06-05T11:30:00.000Z, type: restaurant
Fixed time entry: Normalized time from "14:30" to "14:30"
Correctly interpreted time "14:30" as Europe/London time: 2:30 PM (2025-06-05T13:30:00.000Z)
Correctly interpreted time "14:30" as London time: 2:30 PM (2025-06-05T13:30:00.000Z)
Processed fixed time entry: See Buckingham Palace at Buckingham Palace, time: 2025-06-05T13:30:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Big Ben",
    "near the Tower of London",
    "Buckingham Palace"
  ],
  "fixedTimes": [
    {
      "location": "Big Ben",
      "time": "2025-06-05T10:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Big Ben",
      "keywords": [],
      "minRating": 4,
      "displayTime": "11:00 AM"
    },
    {
      "location": "near the Tower of London",
      "time": "2025-06-05T11:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:30 PM"
    },
    {
      "location": "Buckingham Palace",
      "time": "2025-06-05T13:30:00.000Z",
      "type": "attraction",
      "searchTerm": "See Buckingham Palace",
      "keywords": [],
      "minRating": 4,
      "displayTime": "2:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Big Ben" with Google Maps Geocoding API
Geocoding search query: "Big Ben, London, UK, UK"
Validated "Big Ben" as admin area: "Greater London"
Validated "Big Ben" as neighborhood: "Greater London"
Validating location: "near the Tower of London" with Google Maps Geocoding API
Geocoding search query: "near the Tower of London, London, UK, UK"
Validated "near the Tower of London" as admin area: "Greater London"
Validated "near the Tower of London" as neighborhood: "Greater London"
Validating location: "Buckingham Palace" with Google Maps Geocoding API
Geocoding search query: "Buckingham Palace, London, UK, UK"
Validated "Buckingham Palace" as admin area: "Greater London"
Validated "Buckingham Palace" as neighborhood: "Greater London"
Validating location: "Big Ben" with Google Maps Geocoding API
Geocoding search query: "Big Ben, London, UK, UK"
Validated "Big Ben" as admin area: "Greater London"
Validating location: "near the Tower of London" with Google Maps Geocoding API
Geocoding search query: "near the Tower of London, London, UK, UK"
Validated "near the Tower of London" as admin area: "Greater London"
Validating location: "Buckingham Palace" with Google Maps Geocoding API
Geocoding search query: "Buckingham Palace, London, UK, UK"
Validated "Buckingham Palace" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London",
    "Greater London",
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T10:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Big Ben",
      "keywords": [],
      "minRating": 4,
      "displayTime": "11:00 AM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T11:30:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:30 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T13:30:00.000Z",
      "type": "attraction",
      "searchTerm": "See Buckingham Palace",
      "keywords": [],
      "minRating": 4,
      "displayTime": "2:30 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London', 'Greater London', 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T10:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Big Ben',
      keywords: [],
      minRating: 4,
      displayTime: '11:00 AM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T11:30:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:30 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T13:30:00.000Z',
      type: 'attraction',
      searchTerm: 'See Buckingham Palace',
      keywords: [],
      minRating: 4,
      displayTime: '2:30 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T10:00:00.000Z","type":"attraction","searchTerm":"Visit Big Ben","keywords":[],"minRating":4,"displayTime":"11:00 AM"}
Parsed ISO timestamp "2025-06-05T10:00:00.000Z" to Europe/London time: 2025-06-05 11:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Big Ben',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T10:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Big Ben site:fitzrovia.org.uk OR site:timeout.com/london/fitzrovia OR site:secret-london.co.uk/fitzrovia"
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Big Ben site:fitzrovia.org.uk OR site:timeout.com/london/fitzrovia OR site:secret-london.co.uk/fitzrovia"
📍 [enhancedPlaceSearch] No results found
Could not find location for fixed appointment: Visit Big Ben at Greater London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T11:30:00.000Z","type":"restaurant","searchTerm":"Lunch","keywords":[],"minRating":4,"displayTime":"12:30 PM"}
Parsed ISO timestamp "2025-06-05T11:30:00.000Z" to Europe/London time: 2025-06-05 12:30:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'Greater London',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T11:30:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for restaurant (score: 40)
   Reasons: Known for restaurant, Nearby
🤖 [Gemini] Enhanced query: best lunch restaurants in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best lunch restaurants in Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T11:30:00.000Z
🕒 [Operating Hours] Validating hours for Caravan Fitzrovia Restaurant at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Caravan Fitzrovia Restaurant
✅ [Operating Hours] Caravan Fitzrovia Restaurant: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Counter by Naroon at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Counter by Naroon
✅ [Operating Hours] Counter by Naroon: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Dal Fiorentino Fitzrovia at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Dal Fiorentino Fitzrovia
✅ [Operating Hours] Dal Fiorentino Fitzrovia: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Via Emilia by Food Roots - FITZROVIA at 2025-06-05T11:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:30:00 Thursday, Day: 4, Time: 1230
⚠️ [Operating Hours] Could not determine hours for Via Emilia by Food Roots - FITZROVIA
✅ [Operating Hours] Via Emilia by Food Roots - FITZROVIA: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Counter by Naroon',
  rating: 4.9,
  address: '63 Great Titchfield St., London W1W 7PR, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Dal Fiorentino Fitzrovia', rating: 4.8 },
  { name: 'Via Emilia by Food Roots - FITZROVIA', rating: 4.8 },
  { name: 'Caravan Fitzrovia Restaurant', rating: 4.4 }
]
🔍 [SERVICE] Place details for "Counter by Naroon": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Great Titchfield St., London W1W 7PR, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5188144,\n' +
    '      "lng": -0.1409517\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.52018762989271,\n' +
    '        "lng": -0.1394858701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51748797010727,\n' +
    '        "lng": -0.1421855298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Counter by Naroon",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/103700699984061950894\\">Hung-Chi Chu</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRhB4xzYSHw-G3gOoTu2fQO9XbGuh2XpPwgA-ApJ9P67orCizULIR9XhEEUiWozrKi0C61GQgyaIs_pm0bQ3kJ91f_fYK3Ykye0k_WTrxSijgvDraK5Jrp2mJi_6kEZnVpe6fgs9NZ9DAXWWjRnX2oi19XS2PUE-c_hZLN8x5VR0PmkvjlwbNtWnqxsfCEGJG4t0ed9tpW66lauS6nN6GHNTB6a6rHnyGd3HmK9mIidc6w8NQcmAwMAz0JMoOv2Df_wABXA4FBlDNgssxGJJSjfkBmOM4HSDMiZO8Ns1ECY3_7KBoWMh2Gt7mJCtFl77Zt2peJT6g3-DCbeZzgJ2FMXGftt9Ngf3bs1BKi67S0hItAWgLaxSsKJy2wFlZy-7n2kv4BaYSKE2m8ymXGlVp4aIEyagLflSHHjvh5WXPNsdExK1Gm6avOuaD_qPm9l-_9W1f2J706xihlZ9uGtB54mVUSv2osCHvhhixoQCwvcf_KmUyfuaYJG0DBcQoZKxrHsIWTzhiyWg8ZyJ1e5rRulD-ksaVYG3H44MJKoifZHH2FMZPqO0l_AJ7OJ_ljgvBcBX-0C",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJX3uw-0wbdkgR0uO_1fjE9bw",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV95+GJ London, United Kingdom",\n' +
    '    "global_code": "9C3XGV95+GJ"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJX3uw-0wbdkgR0uO_1fjE9bw",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 978\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1642
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Counter by Naroon" with details
🔍 [SERVICE] Stored place "Counter by Naroon" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Counter by Naroon at 2025-06-05T11:30:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T13:30:00.000Z","type":"attraction","searchTerm":"See Buckingham Palace","keywords":[],"minRating":4,"displayTime":"2:30 PM"}
Parsed ISO timestamp "2025-06-05T13:30:00.000Z" to Europe/London time: 2025-06-05 14:30:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'See Buckingham Palace',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T13:30:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Buckingham Palace replica" attraction in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Buckingham Palace replica" attraction in Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 2 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T13:30:00.000Z
🕒 [Operating Hours] Validating hours for Buckingham Palace at 2025-06-05T13:30:00.000Z
⚠️ [Operating Hours] No opening hours data for Buckingham Palace
✅ [Operating Hours] Buckingham Palace: No operating hours data available
🕒 [Operating Hours] Validating hours for The Royal Mews, Buckingham Palace at 2025-06-05T13:30:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 14:30:00 Thursday, Day: 4, Time: 1430
⚠️ [Operating Hours] Could not determine hours for The Royal Mews, Buckingham Palace
✅ [Operating Hours] The Royal Mews, Buckingham Palace: Could not determine operating hours
✅ [enhancedPlaceSearch] 2 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 2 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The Royal Mews, Buckingham Palace',
  rating: 4.5,
  address: 'Buckingham Palace Rd, London SW1W 0QH, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [ { name: 'Buckingham Palace', rating: 4.5 } ]
🔍 [SERVICE] Place details for "The Royal Mews, Buckingham Palace": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [
    'tourist_attraction',
    'museum',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "Buckingham Palace Rd, London SW1W 0QH, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.4987317,\n' +
    '      "lng": -0.143629\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.50000207989272,\n' +
    '        "lng": -0.1424193201072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.49730242010728,\n' +
    '        "lng": -0.1451189798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/museum-71.png",\n' +
    '  "icon_background_color": "#13B5C7",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/museum_pinlet",\n' +
    '  "name": "The Royal Mews, Buckingham Palace",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4640,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/104562539733821289936\\">john rees</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRLEYdi9nO_3Axy1LD9vItL0ogQvFgYNEdTdMi3V8GpqvUoIUhsYvh1uVf5WqTjlCPQPQfKzngY33fKqXE4tmFQETbC-rmsqdWd0wzHfx64CHmv4SwWKMh01rB9IALkwe5fdqFOpasnidl5NW53tKR_quyUlhZt69IpUbNMjKXO0iXL0wpa2ek1XROECLR3ENPPR8LVHcKJgLrIJPx0oEj8G0LTwiVu_VjK0WXhaiReCz87m4ikz7UZqmNa8USzTQ0kVwMZD78-qIexr53jEBLSuuW52ZaXEPz-GXETUXCSkz8sJMOawKYb85EDZzQRNXGVBpx1VLR9RCj592cIQEEGwahxWd1kRQJ8BWCWnetVOhwGUE0Rpx5_bv7kLmSRNNIAZmz1BF1MxxbBQ7eoUtXu5G6a9x1ktN0E9LBu3AiNp6FKKQZjyocSTQ8w3iWrmRDGXIsEj1wiKkYKK_8gE9TuK1pR91knX9Flj8MrATq-nZUpVD-Ipn7gKDEFJihGMN0rNNdJRByHvy-4Rtaw4eJDRkqN6uthobpqObVvK2YoRUaGjb6xf-g-nlgoN97iBdYwZQ",\n' +
    '      "width": 3472\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJU88VcScFdkgR3nJPHAxWuIM",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "FVX4+FG London, United Kingdom",\n' +
    '    "global_code": "9C3XFVX4+FG"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJU88VcScFdkgR3nJPHAxWuIM",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "museum",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 3580\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [
    'tourist_attraction',
    'museum',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1639
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The Royal Mews, Buckingham Palace" with details
🔍 [SERVICE] Stored place "The Royal Mews, Buckingham Palace" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [
    'tourist_attraction',
    'museum',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: The Royal Mews, Buckingham Palace at 2025-06-05T13:30:00.000Z
Calculating travel times for 2 places in London
Travel time from Counter by Naroon to The Royal Mews, Buckingham Palace: 7 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Visit Big Ben, Lunch, See Buckingham Palace in London" for London with ID: 4
[Weather] Fetching weather for 51.52,-0.14
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Counter by Naroon" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "The Royal Mews, Buckingham Palace" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 01:46:23 INFO [API] POST /api/plan 200 (9779ms) {
  "statusCode": 200,
  "duration": 9779
}
📝 [/api/plan] Generic plan request received
Query: Visit Big Ben at 10 AM, then Tower Bridge at noon, then British Museum at 2 PM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Visit Big Ben at 10 AM, then Tower Bridge at noon, then British Museum at 2 PM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Visit Big Ben at 10 AM, then Tower Bridge at noon, then British Museum at 2 PM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Visit Tower Bridge",
      "location": "Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit British Museum",
      "location": "British Museum",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Visit Big Ben","location":"Big Ben","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]},{"activity":"Visit Tower Bridge","location":"Tower Bridge","searchParameters":{"specificRequirements":[]},"time":"12:00","venueRequirements":[]},{"activity":"Visit British Museum","location":"British Museum","searchParameters":{"specificRequirements":[]},"time":"14:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":4783,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Visit Big Ben at 10 AM, then Tower Bridge at noon, then British Museum at 2 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit Big Ben\",\n      \"location\": \"Big Ben\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Visit Tower Bridge\",\n      \"location\": \"Tower Bridge\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Visit British Museum\",\n      \"location\": \"British Museum\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"844fd503-20f8-46d4-ad93-1dcd5efc670f","status":"success","timestamp":"2025-06-05T08:50:50.780Z","userQuery":"Visit Big Ben at 10 AM, then Tower Bridge at noon, then British Museum at 2 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Visit Tower Bridge",
      "location": "Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit British Museum",
      "location": "British Museum",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Visit Big Ben at Big Ben, 10:00
Added fixed time entry: Visit Tower Bridge at Tower Bridge, 12:00
Added fixed time entry: Visit British Museum at British Museum, 14:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Visit Tower Bridge",
      "location": "Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit British Museum",
      "location": "British Museum",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Visit Tower Bridge",
      "location": "Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit British Museum",
      "location": "British Museum",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Visit Tower Bridge",
      "location": "Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit British Museum",
      "location": "British Museum",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit Big Ben",
    "location": "Big Ben",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "12:00",
    "activity": "Visit Tower Bridge",
    "location": "Tower Bridge",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "14:00",
    "activity": "Visit British Museum",
    "location": "British Museum",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Visit Big Ben at Big Ben, time: 2025-06-05T09:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as Europe/London time: 12:00 PM (2025-06-05T11:00:00.000Z)
Correctly interpreted time "12:00" as London time: 12:00 PM (2025-06-05T11:00:00.000Z)
Processed fixed time entry: Visit Tower Bridge at Tower Bridge, time: 2025-06-05T11:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as Europe/London time: 2:00 PM (2025-06-05T13:00:00.000Z)
Correctly interpreted time "14:00" as London time: 2:00 PM (2025-06-05T13:00:00.000Z)
Processed fixed time entry: Visit British Museum at British Museum, time: 2025-06-05T13:00:00.000Z, type: museum
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Big Ben",
    "Tower Bridge",
    "British Museum"
  ],
  "fixedTimes": [
    {
      "location": "Big Ben",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Big Ben",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    },
    {
      "location": "Tower Bridge",
      "time": "2025-06-05T11:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Tower Bridge",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "British Museum",
      "time": "2025-06-05T13:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit British Museum",
      "keywords": [],
      "minRating": 4,
      "displayTime": "2:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Big Ben" with Google Maps Geocoding API
Geocoding search query: "Big Ben, London, UK, UK"
Validated "Big Ben" as admin area: "Greater London"
Validated "Big Ben" as neighborhood: "Greater London"
Validating location: "Tower Bridge" with Google Maps Geocoding API
Geocoding search query: "Tower Bridge, London, UK, UK"
Preserving landmark name: "Tower Bridge"
Validated "Tower Bridge" as neighborhood: "Tower Bridge"
Validating location: "British Museum" with Google Maps Geocoding API
Geocoding search query: "British Museum, London, UK, UK"
Validated "British Museum" as admin area: "Greater London"
Validated "British Museum" as neighborhood: "Greater London"
Validating location: "Big Ben" with Google Maps Geocoding API
Geocoding search query: "Big Ben, London, UK, UK"
Validated "Big Ben" as admin area: "Greater London"
Validating location: "Tower Bridge" with Google Maps Geocoding API
Geocoding search query: "Tower Bridge, London, UK, UK"
Preserving landmark name: "Tower Bridge"
Validating location: "British Museum" with Google Maps Geocoding API
Geocoding search query: "British Museum, London, UK, UK"
Validated "British Museum" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London",
    "Tower Bridge",
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Big Ben",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    },
    {
      "location": "Tower Bridge",
      "time": "2025-06-05T11:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Tower Bridge",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T13:00:00.000Z",
      "type": "museum",
      "searchTerm": "Visit British Museum",
      "keywords": [],
      "minRating": 4,
      "displayTime": "2:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London', 'Tower Bridge', 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Big Ben',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    },
    {
      location: 'Tower Bridge',
      time: '2025-06-05T11:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Tower Bridge',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T13:00:00.000Z',
      type: 'museum',
      searchTerm: 'Visit British Museum',
      keywords: [],
      minRating: 4,
      displayTime: '2:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"attraction","searchTerm":"Visit Big Ben","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
Could not find location for fixed appointment: Visit Big Ben at Greater London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Tower Bridge","time":"2025-06-05T11:00:00.000Z","type":"attraction","searchTerm":"Visit Tower Bridge","keywords":[],"minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-05T11:00:00.000Z" to Europe/London time: 2025-06-05 12:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Tower Bridge',
  location: 'Tower Bridge',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T11:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Tower Bridge" attraction near Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Tower Bridge" attraction near Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T11:00:00.000Z
🕒 [Operating Hours] Validating hours for Tower Wharf at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Tower Wharf
✅ [Operating Hours] Tower Wharf: Could not determine operating hours
🕒 [Operating Hours] Validating hours for South Tower at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for South Tower
✅ [Operating Hours] South Tower: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Tower Bridge at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Tower Bridge
✅ [Operating Hours] Tower Bridge: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Tower of London at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Tower of London
✅ [Operating Hours] Tower of London: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Tower Wharf',
  rating: 4.7,
  address: 'London EC3N 4AB, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'South Tower', rating: 4.9 },
  { name: 'Tower Bridge', rating: 4.8 },
  { name: 'Tower of London', rating: 4.7 }
]
🔍 [SERVICE] Place details for "Tower Wharf": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "London EC3N 4AB, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5072145,\n' +
    '      "lng": -0.07628449999999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.50834717989272,\n' +
    '        "lng": -0.07314274999999999\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50564752010727,\n' +
    '        "lng": -0.07736695\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png",\n' +
    '  "icon_background_color": "#13B5C7",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",\n' +
    '  "name": "Tower Wharf",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3024,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/105487280938243774487\\">Samy Singh</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQySrtgq2jxNNmo_FP_RhUGQ--NxRWdcE4-5METnO59hxHmZucxaTWl5gC_mqWxn0t4cuC0bidqIj3IJ03qvhUwCvoAeEKPiVQ-0zrJETKo7gJMOuPiwdYQQ5NT8ioFlF4WV8Akuiq5BgDDI9pE9uXOqSZQP5qAjM4gYqWu7kwBJDRajAgsKEME6aRcj7jKnBJwJ200xvn9Miz6OcDqiU5UN7uPn-PaDyZc8ClPeiL2c2y8q9EGutk1IOJxA1-bpHfEPl6OPCa2XNFSYnhTFX8DVZ5On9Nt-PnnmgSRxfCkqnYR5qjNyfQl-uEPxtqjWeaF0VfIGaIhYHIUETtV2l6h7f4XGQIaz7xbE_ntjpsLomncVFD1PJDl_gl7x-cDDMqCFz4dq34Fpwb6DtbLj1yQlnZqedtvlJ6jNHGJ3p8d9AfJbFxAV7o7xmmF_iobBaDs6lGLJLrggNH3pg-5ILTd4DOiJ8rH3IdslOjuK666n6s6sFHDEbsuq4d4YKbgaZ4a2SLqsq-LGJNgJAVy7Gsiq4aT2JbIgaYcyaOU7r75YoKltXNIWgP7utygRCDgjXytKHoW",\n' +
    '      "width": 4032\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJDwPEO6wDdkgRzqnlKTzBAzc",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GW4F+VF London, United Kingdom",\n' +
    '    "global_code": "9C3XGW4F+VF"\n' +
    '  },\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJDwPEO6wDdkgRzqnlKTzBAzc",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 51\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsSize: 1601
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Tower Wharf" with details
🔍 [SERVICE] Stored place "Tower Wharf" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Tower Wharf at 2025-06-05T11:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T13:00:00.000Z","type":"museum","searchTerm":"Visit British Museum","keywords":[],"minRating":4,"displayTime":"2:00 PM"}
Parsed ISO timestamp "2025-06-05T13:00:00.000Z" to Europe/London time: 2025-06-05 14:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit British Museum',
  location: 'Greater London',
  keywords: [],
  type: 'museum',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T13:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Bloomsbury for museum (score: 40)
   Reasons: Known for museum, Nearby
🤖 [Gemini] Enhanced query: best museum in Bloomsbury "British Museum"
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best museum in Bloomsbury "British Museum"
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T13:00:00.000Z
🕒 [Operating Hours] Validating hours for The British Museum at 2025-06-05T13:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 14:00:00 Thursday, Day: 4, Time: 1400
⚠️ [Operating Hours] Could not determine hours for The British Museum
✅ [Operating Hours] The British Museum: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Rosetta Stone at 2025-06-05T13:00:00.000Z
⚠️ [Operating Hours] No opening hours data for The Rosetta Stone
✅ [Operating Hours] The Rosetta Stone: No operating hours data available
🕒 [Operating Hours] Validating hours for Victoria and Albert Museum at 2025-06-05T13:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 14:00:00 Thursday, Day: 4, Time: 1400
⚠️ [Operating Hours] Could not determine hours for Victoria and Albert Museum
✅ [Operating Hours] Victoria and Albert Museum: Could not determine operating hours
🕒 [Operating Hours] Validating hours for British Museum (Stop W) at 2025-06-05T13:00:00.000Z
⚠️ [Operating Hours] No opening hours data for British Museum (Stop W)
✅ [Operating Hours] British Museum (Stop W): No operating hours data available
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Victoria and Albert Museum',
  rating: 4.7,
  address: 'Cromwell Rd, London SW7 2RL, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'The British Museum', rating: 4.7 },
  { name: 'The Rosetta Stone', rating: 4.7 },
  { name: 'British Museum (Stop W)', rating: 4.7 }
]
🔍 [SERVICE] Place details for "Victoria and Albert Museum": {
  hasRating: true,
  rating: 4.7,
  hasTypes: true,
  types: [
    'art_gallery',
    'tourist_attraction',
    'museum',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "Cromwell Rd, London SW7 2RL, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.4966392,\n' +
    '      "lng": -0.17218\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.49765002989272,\n' +
    '        "lng": -0.17072735\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.49495037010727,\n' +
    '        "lng": -0.17478515\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/museum-71.png",\n' +
    '  "icon_background_color": "#13B5C7",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/museum_pinlet",\n' +
    '  "name": "Victoria and Albert Museum",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 2952,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/106940218410473080523\\">Mr Wrong</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTs1oT1VVaCpwUy1VRGqvTOjiS6CeohEWq3rOT02nftdWNc9apFcDatx4xIDOUB4YChSJsp4AY1bKPhtYL9u8NkBnns1kb0L7kiFMGwF96Ybob8T50N0wMSWapx6mJBeEpvJEPnjQRXI9qIGNxy4fIxYBx3EuscYs5Q4K42wjQHt6Xad9xKFxpgOtjle0-ssYmez4KGsbDQshXLQh1vaPeOfngvE9X6xhmlkEGXPjFPdWh1zPYnaaBAVaBTQPvMSeDKA_bVQcLS7HtAwKRA1Pkwe1NrU9kRePZtxSdxX_3zkHAErtL9F_sXCwANeyVamvvXXS2N4NDx-SfxDyOoEZAaGPUtMA_UaukxlNxNcTIpkwUszYRT_HbLQ_AKWnDQqgskMSVYvinxwRFPhN9WVqkWI3xsd8wej94FBsetK_NGKKI4M-9x9jnrNP7uxs5qy3Irijmd_oCPdyqsyScE2HcpvxlkZvgddxo-0OUX8DSZ0Orlut1BoLj_nCltfTaHG0wD4o5JReOqqs-QwYSU-iqnIyJjena8W0_LMIVd-l7OAA4qcjW-AJ7NzLSD_n8CEdji5JiE",\n' +
    '      "width": 2952\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJw1d-sUMFdkgRH2XN_U0Jt54",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "FRWH+M4 London, United Kingdom",\n' +
    '    "global_code": "9C3XFRWH+M4"\n' +
    '  },\n' +
    '  "rating": 4.7,\n' +
    '  "reference": "ChIJw1d-sUMFdkgRH2XN_U0Jt54",\n' +
    '  "types": [\n' +
    '    "art_gallery",\n' +
    '    "tourist_attraction",\n' +
    '    "museum",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 61899\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.7,
  types: [
    'art_gallery',
    'tourist_attraction',
    'museum',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1621
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Victoria and Albert Museum" with details
🔍 [SERVICE] Stored place "Victoria and Albert Museum" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.7,
  types: [
    'art_gallery',
    'tourist_attraction',
    'museum',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Victoria and Albert Museum at 2025-06-05T13:00:00.000Z
Calculating travel times for 2 places in London
Travel time from Tower Wharf to Victoria and Albert Museum: 20 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Visit Big Ben, Visit Tower Bridge, Visit British Museum in London" for London with ID: 5
[Weather] Fetching weather for 51.51,-0.08
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Tower Wharf" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "Victoria and Albert Museum" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 01:50:54 INFO [API] POST /api/plan 200 (8193ms) {
  "statusCode": 200,
  "duration": 8193
}
📝 [/api/plan] Generic plan request received
Query: Visit Big Ben at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Visit Big Ben at 10 AM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Visit Big Ben at 10 AM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Visit Big Ben","location":"Big Ben","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2730,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Visit Big Ben at 10 AM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit Big Ben\",\n      \"location\": \"Big Ben\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"cd7ca7a9-0fd4-4da2-9f82-dfc081d7975a","status":"success","timestamp":"2025-06-05T08:52:09.430Z","userQuery":"Visit Big Ben at 10 AM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Visit Big Ben at Big Ben, 10:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Big Ben",
      "location": "Big Ben",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit Big Ben",
    "location": "Big Ben",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Visit Big Ben at Big Ben, time: 2025-06-05T09:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Big Ben"
  ],
  "fixedTimes": [
    {
      "location": "Big Ben",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Big Ben",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Big Ben" with Google Maps Geocoding API
Geocoding search query: "Big Ben, London, UK, UK"
Validated "Big Ben" as admin area: "Greater London"
Validated "Big Ben" as neighborhood: "Greater London"
Validating location: "Big Ben" with Google Maps Geocoding API
Geocoding search query: "Big Ben, London, UK, UK"
Validated "Big Ben" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Big Ben",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Big Ben',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"attraction","searchTerm":"Visit Big Ben","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Big Ben',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Big Ben" attraction in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Big Ben" attraction in Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Big Ben at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Big Ben
✅ [Operating Hours] Big Ben: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Little Ben Clock at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Little Ben Clock: Currently open
🕒 [Operating Hours] Validating hours for Big ben at 2025-06-05T09:00:00.000Z
⚠️ [Operating Hours] No opening hours data for Big ben
✅ [Operating Hours] Big ben: No operating hours data available
🕒 [Operating Hours] Validating hours for Palace of Westminster at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Palace of Westminster
✅ [Operating Hours] Palace of Westminster: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Palace of Westminster',
  rating: 4.6,
  address: 'London SW1A 0AA, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Big Ben', rating: 4.6 },
  { name: 'Big ben', rating: 4.6 },
  { name: 'Little Ben Clock', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Palace of Westminster": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "London SW1A 0AA, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.4994794,\n' +
    '      "lng": -0.1248092\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.50086682989271,\n' +
    '        "lng": -0.1241313701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.49816717010727,\n' +
    '        "lng": -0.1268310298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/civic_building-71.png",\n' +
    '  "icon_background_color": "#7B9EB0",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/civic-bldg_pinlet",\n' +
    '  "name": "Palace of Westminster",\n' +
    '  "opening_hours": {},\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 372,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/104315546018255918878\\">Misterkwa</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQotU_x4dz6rfMa7FLM5B8jNtgOyw3Uz5-bia4gbgtGYtjhBElx2yZUeTkQxQrytj9gR4VCvSUVIVwYkabJpPnnkivnZc2oxOHojNB0miI5U0Fgt9bTUgUptcxY1YGqS922gr_yBqgWUbnAhR25mLzN1W0nIyYvKsaKKZZovjyUBuFGev4jYXbEJAVGco5loAYm0igNHyfFVkUP631tLO6rz5ekHceOwX2CEjnhczTo6uBPxCXQp1M70Yh2g88n9BfOI2ZEt34Sikv9NDmoVdtd119mWHpbjQG65KRRQ9GXrvHzpSEFv-b8CzCncLVz_dEb-mh52DPJpXMaOBrbufuP40Kq-Z_XGde2QUM5sAfXvsJLK-NUV-BBIntoKXNVHim9FC8qp8J4FHHV6fC5oCexKl6FfIb0QiuJBRuWO1kXwM4gGjH31u1ROx0QlMcuLXeh5mGT9XV1rnFm5CTx7jANAiVH9m763Ca8vBV0oi0YnYIJKk32t8dPWfGmAhr_tWRczdZ637dpmR_MnxnlmIVld2f1eGLEo1c82zIDvZZuQBUbgBAGp0RCTaxPz9EucdJIGA",\n' +
    '      "width": 612\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJmZuNDMQEdkgRfB9O9456eQc",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "FVXG+Q3 London, United Kingdom",\n' +
    '    "global_code": "9C3XFVXG+Q3"\n' +
    '  },\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJmZuNDMQEdkgRfB9O9456eQc",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 4471\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsSize: 1591
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Palace of Westminster" with details
🔍 [SERVICE] Stored place "Palace of Westminster" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Palace of Westminster at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Visit Big Ben in London" for London with ID: 6
[Weather] Fetching weather for 51.5,-0.12
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Palace of Westminster" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 01:52:10 INFO [API] POST /api/plan 200 (4289ms) {
  "statusCode": 200,
  "duration": 4289
}
📝 [/api/plan] Generic plan request received
Query: Visit Tower of London at 10 AM, then lunch near Tower Bridge, then see Buckingham Palace at 3 PM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Visit Tower of London at 10 AM, then lunch near Tower Bridge, then see Buckingham Palace at 3 PM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Visit Tower of London at 10 AM, then lunch near Tower Bridge, then see Buckingham Palace at 3 PM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Tower of London",
      "location": "Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "near Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Visit Tower of London","location":"Tower of London","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]},{"activity":"Lunch","location":"near Tower Bridge","searchParameters":{"specificRequirements":[]},"time":"12:00","venueRequirements":[]},{"activity":"See Buckingham Palace","location":"Buckingham Palace","searchParameters":{"specificRequirements":[]},"time":"15:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":4631,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Visit Tower of London at 10 AM, then lunch near Tower Bridge, then see Buckingham Palace at 3 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit Tower of London\",\n      \"location\": \"Tower of London\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"12:00\",\n      \"activity\": \"Lunch\",\n      \"location\": \"near Tower Bridge\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"15:00\",\n      \"activity\": \"See Buckingham Palace\",\n      \"location\": \"Buckingham Palace\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```","service":"ai-interaction-logger","sessionId":"ec82e64d-6aac-416b-b206-ac981da88008","status":"success","timestamp":"2025-06-05T08:53:20.811Z","userQuery":"Visit Tower of London at 10 AM, then lunch near Tower Bridge, then see Buckingham Palace at 3 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Tower of London",
      "location": "Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "near Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 3 fixed time entries with duplicate detection
Added fixed time entry: Visit Tower of London at Tower of London, 10:00
Added fixed time entry: Lunch at near Tower Bridge, 12:00
Added fixed time entry: See Buckingham Palace at Buckingham Palace, 15:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Tower of London",
      "location": "Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "near Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Tower of London",
      "location": "Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "near Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Tower of London",
      "location": "Tower of London",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "12:00",
      "activity": "Lunch",
      "location": "near Tower Bridge",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "15:00",
      "activity": "See Buckingham Palace",
      "location": "Buckingham Palace",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit Tower of London",
    "location": "Tower of London",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "12:00",
    "activity": "Lunch",
    "location": "near Tower Bridge",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "15:00",
    "activity": "See Buckingham Palace",
    "location": "Buckingham Palace",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Visit Tower of London at Tower of London, time: 2025-06-05T09:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "12:00" to "12:00"
Correctly interpreted time "12:00" as Europe/London time: 12:00 PM (2025-06-05T11:00:00.000Z)
Correctly interpreted time "12:00" as London time: 12:00 PM (2025-06-05T11:00:00.000Z)
Processed fixed time entry: Lunch at near Tower Bridge, time: 2025-06-05T11:00:00.000Z, type: restaurant
Fixed time entry: Normalized time from "15:00" to "15:00"
Correctly interpreted time "15:00" as Europe/London time: 3:00 PM (2025-06-05T14:00:00.000Z)
Correctly interpreted time "15:00" as London time: 3:00 PM (2025-06-05T14:00:00.000Z)
Processed fixed time entry: See Buckingham Palace at Buckingham Palace, time: 2025-06-05T14:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 3
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Tower of London",
    "near Tower Bridge",
    "Buckingham Palace"
  ],
  "fixedTimes": [
    {
      "location": "Tower of London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Tower of London",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    },
    {
      "location": "near Tower Bridge",
      "time": "2025-06-05T11:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Buckingham Palace",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "attraction",
      "searchTerm": "See Buckingham Palace",
      "keywords": [],
      "minRating": 4,
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 3 de-duplicated activities
Validating location: "Tower of London" with Google Maps Geocoding API
Geocoding search query: "Tower of London, London, UK, UK"
Validated "Tower of London" as admin area: "Greater London"
Validated "Tower of London" as neighborhood: "Greater London"
Validating location: "near Tower Bridge" with Google Maps Geocoding API
Geocoding search query: "near Tower Bridge, London, UK, UK"
Preserving landmark name: "near Tower Bridge"
Validated "near Tower Bridge" as neighborhood: "near Tower Bridge"
Validating location: "Buckingham Palace" with Google Maps Geocoding API
Geocoding search query: "Buckingham Palace, London, UK, UK"
Validated "Buckingham Palace" as admin area: "Greater London"
Validated "Buckingham Palace" as neighborhood: "Greater London"
Validating location: "Tower of London" with Google Maps Geocoding API
Geocoding search query: "Tower of London, London, UK, UK"
Validated "Tower of London" as admin area: "Greater London"
Validating location: "near Tower Bridge" with Google Maps Geocoding API
Geocoding search query: "near Tower Bridge, London, UK, UK"
Preserving landmark name: "near Tower Bridge"
Validating location: "Buckingham Palace" with Google Maps Geocoding API
Geocoding search query: "Buckingham Palace, London, UK, UK"
Validated "Buckingham Palace" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London",
    "near Tower Bridge",
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Tower of London",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    },
    {
      "location": "near Tower Bridge",
      "time": "2025-06-05T11:00:00.000Z",
      "type": "restaurant",
      "searchTerm": "Lunch",
      "keywords": [],
      "minRating": 4,
      "displayTime": "12:00 PM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T14:00:00.000Z",
      "type": "attraction",
      "searchTerm": "See Buckingham Palace",
      "keywords": [],
      "minRating": 4,
      "displayTime": "3:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London', 'near Tower Bridge', 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Tower of London',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    },
    {
      location: 'near Tower Bridge',
      time: '2025-06-05T11:00:00.000Z',
      type: 'restaurant',
      searchTerm: 'Lunch',
      keywords: [],
      minRating: 4,
      displayTime: '12:00 PM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T14:00:00.000Z',
      type: 'attraction',
      searchTerm: 'See Buckingham Palace',
      keywords: [],
      minRating: 4,
      displayTime: '3:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"attraction","searchTerm":"Visit Tower of London","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Tower of London',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Tower of London" attraction near Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Tower of London" attraction near Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 3 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Tower of London at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Tower of London: Currently open
🕒 [Operating Hours] Validating hours for Sky Garden at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Sky Garden: Currently open
🕒 [Operating Hours] Validating hours for BT Tower at 2025-06-05T09:00:00.000Z
⚠️ [Operating Hours] No opening hours data for BT Tower
✅ [Operating Hours] BT Tower: No operating hours data available
✅ [enhancedPlaceSearch] 3 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 3 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Sky Garden',
  rating: 4.6,
  address: '1, Sky Garden Walk, London EC3M 8AF, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Tower of London', rating: 4.7 },
  { name: 'BT Tower', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Sky Garden": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [
    'tourist_attraction',
    'bar',
    'cafe',
    'restaurant',
    'food',
    'park',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "1, Sky Garden Walk, London EC3M 8AF, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5112422,\n' +
    '      "lng": -0.08354929999999999\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51252737989272,\n' +
    '        "lng": -0.08246697010727778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50982772010728,\n' +
    '        "lng": -0.08516662989272222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png",\n' +
    '  "icon_background_color": "#7B9EB0",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",\n' +
    '  "name": "Sky Garden",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 9000,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/108221194076437712799\\">svetoslav arnaudov</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNS63s0vOl8nARZhD6b18UTQZ14U6dOyMaJlUthtLBu_em7xRuYE_2xHIwv3D00fH9AhuJKCQVtPilhnsJ84vYxzsBlJ-R4kc_AMqaBpnZfM4_Z-nYl15hX9Ij91nAjWmDpCrb335sJqTQw_JswjWFE-pzTARaM2hPqFNHPwXLEFNcnRG2Wgg_C08DdhvuZ3Q1bjF9oVzyCRrwZY9M5TJ4tfrvSxyCy8L1uJmd8tdvNViQ3NGad9g9glC4Bbtb89WwaJJ1kk6ePB_tE9TXnjQyktRGm3TLBcAq0C9A6GhlG7Iy2q5rZREAXl8JQlOYGG1QcyYl9sKvYLCHvbphtHGbfhuST-x3HCw_WRsWus8JBB41tPfSqxbbgcxWkkUVWtzt-4wfAnUFGG9tKqFah1xWduaRgV1Kkj2Z9lQlzyqd2xCzPqQIUj2BoToJEJq9e06nGupC-qDiQjAZFjyzVJo03wC89MMIKLqhk9V7VPeaDN4koDwtCbRkDRcO8aLSsnQT0Ci2TDi26okQ146AEkA1qunaJF6nKJi4DYM_SXaaT04h7_YKbh4fUK4U_py3RS8GUeNW6B",\n' +
    '      "width": 12000\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJgaI8bFIDdkgRhJJqLMxsFdU",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GW68+FH London, United Kingdom",\n' +
    '    "global_code": "9C3XGW68+FH"\n' +
    '  },\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJgaI8bFIDdkgRhJJqLMxsFdU",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "bar",\n' +
    '    "cafe",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "park",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 68935\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [
    'tourist_attraction',
    'bar',
    'cafe',
    'restaurant',
    'food',
    'park',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1681
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Sky Garden" with details
🔍 [SERVICE] Stored place "Sky Garden" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [
    'tourist_attraction',
    'bar',
    'cafe',
    'restaurant',
    'food',
    'park',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Sky Garden at 2025-06-05T09:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"near Tower Bridge","time":"2025-06-05T11:00:00.000Z","type":"restaurant","searchTerm":"Lunch","keywords":[],"minRating":4,"displayTime":"12:00 PM"}
Parsed ISO timestamp "2025-06-05T11:00:00.000Z" to Europe/London time: 2025-06-05 12:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Lunch',
  location: 'near Tower Bridge',
  keywords: [],
  type: 'restaurant',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T11:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for restaurant (score: 40)
   Reasons: Known for restaurant, Nearby
🤖 [Gemini] Enhanced query: best lunch restaurants in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best lunch restaurants in Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T11:00:00.000Z
🕒 [Operating Hours] Validating hours for Circolo Popolare at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Circolo Popolare
✅ [Operating Hours] Circolo Popolare: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Faros Oxford Circus at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Faros Oxford Circus
✅ [Operating Hours] Faros Oxford Circus: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Caravan Fitzrovia Restaurant at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Caravan Fitzrovia Restaurant
✅ [Operating Hours] Caravan Fitzrovia Restaurant: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Counter by Naroon at 2025-06-05T11:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 12:00:00 Thursday, Day: 4, Time: 1200
⚠️ [Operating Hours] Could not determine hours for Counter by Naroon
✅ [Operating Hours] Counter by Naroon: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Counter by Naroon',
  rating: 4.9,
  address: '63 Great Titchfield St., London W1W 7PR, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Faros Oxford Circus', rating: 4.9 },
  { name: 'Circolo Popolare', rating: 4.8 },
  { name: 'Caravan Fitzrovia Restaurant', rating: 4.4 }
]
🔍 [SERVICE] Place details for "Counter by Naroon": {
  hasRating: true,
  rating: 4.9,
  hasTypes: true,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Great Titchfield St., London W1W 7PR, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5188144,\n' +
    '      "lng": -0.1409517\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.52018762989271,\n' +
    '        "lng": -0.1394858701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51748797010727,\n' +
    '        "lng": -0.1421855298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/restaurant-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/restaurant_pinlet",\n' +
    '  "name": "Counter by Naroon",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/103700699984061950894\\">Hung-Chi Chu</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTE3Ry4AXbgCUmC5WmrlFIOT3InpE-4jhmgAw2hqegs1A0MbkxySaZymK3eFLNQbVYed239BSqQYLZvDAZYxo_iu3zMzv9v5OLugDSwUvcVq5qYzPQwFuW2HTDKwwuJXxLhTa0GBauutA8HzTepZH2IVCiVVViGDrJsUGghEvNJNpKyIzRWceknvEqQ5vwhFlWz1W24z4SEzewFmljdfl1EyI9sYZGIohzKparruv5UktrT2qx-caI3kh2nSRZZhGfx9f4b_ulaVKeyqiT8aQLSQmUYj-fnxXkP-B2vxtOLR8xoO3_lR2LddcTw6dZaNOsN19XjbqBtjLmeid3xQXq1AYtO8lNObKA5SIU4qj1f8hA8Xk5LXCdy7IegCSrK2sgWCaasi3NJKjUPMmQSKTgFXDfaXU3R3uReC5F0VJziQGVoK6BGeDWUpQKZJuFDCpTLak_dhte9wO1l-R89sd0HNhETaoJPkCHTdMqLDvl9quYvaR69EEay3F86GmBF3UDO8n_s0USPKjD2FNcFlbQW524gQSh6UqpFGToUy2ov2z6KwpWuSFgv31uGqHHaIBsUSuZx",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJX3uw-0wbdkgR0uO_1fjE9bw",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV95+GJ London, United Kingdom",\n' +
    '    "global_code": "9C3XGV95+GJ"\n' +
    '  },\n' +
    '  "rating": 4.9,\n' +
    '  "reference": "ChIJX3uw-0wbdkgR0uO_1fjE9bw",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "restaurant",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 978\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.9,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1642
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Counter by Naroon" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Place "Counter by Naroon" already exists, returning existing record
🔍 [SERVICE] Stored place "Counter by Naroon" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.9,
  types: [
    'cafe',
    'store',
    'restaurant',
    'food',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Counter by Naroon at 2025-06-05T11:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T14:00:00.000Z","type":"attraction","searchTerm":"See Buckingham Palace","keywords":[],"minRating":4,"displayTime":"3:00 PM"}
Parsed ISO timestamp "2025-06-05T14:00:00.000Z" to Europe/London time: 2025-06-05 15:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'See Buckingham Palace',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T14:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Buckingham Palace replica" attraction in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Buckingham Palace replica" attraction in Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 3 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T14:00:00.000Z
🕒 [Operating Hours] Validating hours for Buckingham Palace at 2025-06-05T14:00:00.000Z
⚠️ [Operating Hours] No opening hours data for Buckingham Palace
✅ [Operating Hours] Buckingham Palace: No operating hours data available
🕒 [Operating Hours] Validating hours for Buckingham Palace Garden at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for Buckingham Palace Garden
✅ [Operating Hours] Buckingham Palace Garden: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The Royal Mews, Buckingham Palace at 2025-06-05T14:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 15:00:00 Thursday, Day: 4, Time: 1500
⚠️ [Operating Hours] Could not determine hours for The Royal Mews, Buckingham Palace
✅ [Operating Hours] The Royal Mews, Buckingham Palace: Could not determine operating hours
✅ [enhancedPlaceSearch] 3 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 3 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Buckingham Palace Garden',
  rating: 4.6,
  address: 'Buckingham Palace, Constitution Hill, Spur Rd, London SW1A 1AA, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Buckingham Palace', rating: 4.5 },
  { name: 'The Royal Mews, Buckingham Palace', rating: 4.5 }
]
🔍 [SERVICE] Place details for "Buckingham Palace Garden": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [
    'tourist_attraction',
    'park',
    'point_of_interest',
    'establishment'
  ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "Buckingham Palace, Constitution Hill, Spur Rd, London SW1A 1AA, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5011202,\n' +
    '      "lng": -0.1460413\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.50225135,\n' +
    '        "lng": -0.1418310999999999\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.49863074999999,\n' +
    '        "lng": -0.1474447000000001\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/park-71.png",\n' +
    '  "icon_background_color": "#4DB546",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/tree_pinlet",\n' +
    '  "name": "Buckingham Palace Garden",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1617,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/102903520404911355299\\">Jonathan Underhay</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRJ2S9FsneIWrJxyOY5NGM3CxJN-Z-1GrBabzWQTTa_R_8KZxtVL60LtaaXmiT-u-zKDMe9MMkPb8D6NT94NlXrr8_UIIQ8ZMF50iXkrsjz1wPCFK47Jz9qdK8y5ZRn2bmIb3HSJHstVDA8qfbwtRxAWMiOJcFxD2gTNEHMjL_Sa2y_iaA_OBU0FOvY-nMcTZWpWRNRcboFoZdJa4M1ZOU3Q54GBPGeK85HyUSZDfk6fAEnpEv0HQiw_yvD41Y1RMuqbkEiy6ZgE-3u_4oSZMH0V9eodC5ouJZbIkHSvLPVvR6lMjCiQ7avurkgjI0B4LAXiEnaIBBwYVOa3p9VVjOScqLU5qAVh28aiMPXy1xLisEB5X8o6mSaVi1cTUgeiNaDek5JG0LzWjmmk3w0UWyjb08AeF2oxYldfZef7BiGzxum3qYv79gMnEaYx1rsBT7VRUSYK9t9yPbx1m8kqF_jgCMz5l3ftu3Ycz3qggovPxqCqBJk0FLeY0EaarBi0L6aYPTbIQwUc9QPGcWtbyxtFXTpeUZRXvKkB7e5xa61vdzKsxIDKx7AudO2fyvicgoXFw",\n' +
    '      "width": 2795\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ2dgDviYFdkgRIY22Uk3e9rI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV23+CH London, United Kingdom",\n' +
    '    "global_code": "9C3XGV23+CH"\n' +
    '  },\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJ2dgDviYFdkgRIY22Uk3e9rI",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "park",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 2923\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [
    'tourist_attraction',
    'park',
    'point_of_interest',
    'establishment'
  ],
  detailsSize: 1651
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Buckingham Palace Garden" with details
🔍 [SERVICE] Stored place "Buckingham Palace Garden" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [
    'tourist_attraction',
    'park',
    'point_of_interest',
    'establishment'
  ]
}
Added fixed appointment to itinerary: Buckingham Palace Garden at 2025-06-05T14:00:00.000Z
🗺️ Optimizing route for 3 places in London
Calculating travel times for 3 places in London
Travel time from Sky Garden to Counter by Naroon: 12 minutes
Travel time from Counter by Naroon to Buckingham Palace Garden: 6 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Visit Tower of London, Lunch, See Buckingham Palace in London" for London with ID: 7
[Weather] Using cached data for 51.51,-0.08
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Sky Garden" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "Counter by Naroon" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "Buckingham Palace Garden" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 3 venues
2025-06-05 01:53:25 INFO [API] POST /api/plan 200 (9348ms) {
  "statusCode": 200,
  "duration": 9348
}
📝 [/api/plan] Generic plan request received
Query: Visit Statue of Liberty at 10 AM, then Empire State Building at 2 PM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Visit Statue of Liberty at 10 AM, then Empire State Building at 2 PM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Visit Statue of Liberty at 10 AM, then Empire State Building at 2 PM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Statue of Liberty",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit Empire State Building",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Visit Statue of Liberty","location":"New York City","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]},{"activity":"Visit Empire State Building","location":"New York City","searchParameters":{"specificRequirements":[]},"time":"14:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":3798,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Visit Statue of Liberty at 10 AM, then Empire State Building at 2 PM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Visit Statue of Liberty\",\n      \"location\": \"New York City\", \n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    },\n    {\n      \"time\": \"14:00\",\n      \"activity\": \"Visit Empire State Building\",\n      \"location\": \"New York City\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"5cc94fb0-378d-4503-b1ec-7311c7c2307e","status":"success","timestamp":"2025-06-05T08:55:00.478Z","userQuery":"Visit Statue of Liberty at 10 AM, then Empire State Building at 2 PM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Statue of Liberty",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit Empire State Building",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 2 fixed time entries with duplicate detection
Added fixed time entry: Visit Statue of Liberty at New York City, 10:00
Added fixed time entry: Visit Empire State Building at New York City, 14:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Statue of Liberty",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit Empire State Building",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Statue of Liberty",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit Empire State Building",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Visit Statue of Liberty",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    },
    {
      "time": "14:00",
      "activity": "Visit Empire State Building",
      "location": "New York City",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Visit Statue of Liberty",
    "location": "New York City",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  },
  {
    "time": "14:00",
    "activity": "Visit Empire State Building",
    "location": "New York City",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Visit Statue of Liberty at New York City, time: 2025-06-05T09:00:00.000Z, type: attraction
Fixed time entry: Normalized time from "14:00" to "14:00"
Correctly interpreted time "14:00" as Europe/London time: 2:00 PM (2025-06-05T13:00:00.000Z)
Correctly interpreted time "14:00" as London time: 2:00 PM (2025-06-05T13:00:00.000Z)
Processed fixed time entry: Visit Empire State Building at New York City, time: 2025-06-05T13:00:00.000Z, type: attraction
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 2
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "New York City"
  ],
  "fixedTimes": [
    {
      "location": "New York City",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Statue of Liberty",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    },
    {
      "location": "New York City",
      "time": "2025-06-05T13:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Empire State Building",
      "keywords": [],
      "minRating": 4,
      "displayTime": "2:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 2 de-duplicated activities
Validating location: "New York City" with Google Maps Geocoding API
Geocoding search query: "New York City, London, UK, UK"
Validated "New York City" as admin area: "Greater London"
Validated "New York City" as neighborhood: "Greater London"
Validating location: "New York City" with Google Maps Geocoding API
Geocoding search query: "New York City, London, UK, UK"
Validated "New York City" as admin area: "Greater London"
Validating location: "New York City" with Google Maps Geocoding API
Geocoding search query: "New York City, London, UK, UK"
Validated "New York City" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Statue of Liberty",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    },
    {
      "location": "Greater London",
      "time": "2025-06-05T13:00:00.000Z",
      "type": "attraction",
      "searchTerm": "Visit Empire State Building",
      "keywords": [],
      "minRating": 4,
      "displayTime": "2:00 PM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Statue of Liberty',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    },
    {
      location: 'Greater London',
      time: '2025-06-05T13:00:00.000Z',
      type: 'attraction',
      searchTerm: 'Visit Empire State Building',
      keywords: [],
      minRating: 4,
      displayTime: '2:00 PM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"attraction","searchTerm":"Visit Statue of Liberty","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Statue of Liberty',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Statue of Liberty replica" attraction in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Statue of Liberty replica" attraction in Fitzrovia London
🏙️ [enhancedPlaceSearch] After city filtering: 2 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Liberty London at 2025-06-05T09:00:00.000Z
❌ [Operating Hours] Liberty London: Currently closed
🕒 [Operating Hours] Validating hours for Silverman Statue at 2025-06-05T09:00:00.000Z
⚠️ [Operating Hours] No opening hours data for Silverman Statue
✅ [Operating Hours] Silverman Statue: No operating hours data available
✅ [enhancedPlaceSearch] 1 venues are open, 1 are closed
✅ [enhancedPlaceSearch] Found 1 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Silverman Statue',
  rating: 5,
  address: '33-4 James St, London WC2E 8PA, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: []
🔍 [SERVICE] Place details for "Silverman Statue": {
  hasRating: true,
  rating: 5,
  hasTypes: true,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "33-4 James St, London WC2E 8PA, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5125009,\n' +
    '      "lng": -0.1234108\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51409107989272,\n' +
    '        "lng": -0.1223520701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.51139142010728,\n' +
    '        "lng": -0.1250517298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png",\n' +
    '  "icon_background_color": "#13B5C7",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",\n' +
    '  "name": "Silverman Statue",\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 5712,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/109752415000414258882\\">Mary (Nature lover)</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSWE4vyh_XJNlb_57pE0uq55bQ0xXgmi9jCy_1h3Tp56zIX-DP9PEvSFlBeyoUzTLCeCcoh4hABQzfji1QqU_YVmrvLT6r9Ejed1rr3lmBY5Qz8t93cMWZvuHG7G9PsaaknyCEcoaY4Sfk-Zak8_l8fpivMmdUAfx0eMskf7M1jjhJEHFib58EsfP8Vb24AIBPeMl5iCRiSn-PQsIb7PNRRaKVWYp9d8sYXwkju6liNlkSS9cSbgj2PKjSFB5SrcsO_spDnfgiCz5nneoMgsTRne1GJWSvOEBt3dLG3tdxg77432aThxqIHG3lNT_exYy176frYC1GtGid5LUXHjCjubR2zIGmPN5gV1Ja9CyknpEWawbPgW5rfHL50S_hxanryJdKZXT15tle4Xbi8PO3xG8sQvuI10UfaIfn1rkpsv6W2BkayQ0gWffrYHMnxGDTo40ycOvZapPOwkBz4w_b4X12WoZEoAspOEciAjhpB6rIXHjGoDeF3tvjuGwsxBq3pTHGwzjVooH-nDHJqQD8alAIU6K6FGZf6N9wKeH6ZGNR8xuWutTtx69_uFHeqNF_JffwIun9sXg",\n' +
    '      "width": 3213\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ7fX5LPQFdkgR02wLYa48oLA",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GV7G+2J London, United Kingdom",\n' +
    '    "global_code": "9C3XGV7G+2J"\n' +
    '  },\n' +
    '  "rating": 5,\n' +
    '  "reference": "ChIJ7fX5LPQFdkgR02wLYa48oLA",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 4\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 5,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsSize: 1596
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Silverman Statue" with details
🔍 [SERVICE] Stored place "Silverman Statue" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Silverman Statue at 2025-06-05T09:00:00.000Z
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T13:00:00.000Z","type":"attraction","searchTerm":"Visit Empire State Building","keywords":[],"minRating":4,"displayTime":"2:00 PM"}
Parsed ISO timestamp "2025-06-05T13:00:00.000Z" to Europe/London time: 2025-06-05 14:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Visit Empire State Building',
  location: 'Greater London',
  keywords: [],
  type: 'attraction',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T13:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Fitzrovia for attraction (score: 10)
   Reasons: Nearby
🤖 [Gemini] Enhanced query: "Empire State Building" attraction in Fitzrovia London
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: "Empire State Building" attraction in Fitzrovia London
🚫 [enhancedPlaceSearch] Filtering out Empire State Building - address "20 W 34th St., New York, NY 10001, United States" not in London
🚫 [enhancedPlaceSearch] Filtering out Top of The Rock - address "30 Rockefeller Plaza, New York, NY 10112, United States" not in London
🏙️ [enhancedPlaceSearch] After city filtering: 2 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T13:00:00.000Z
🕒 [Operating Hours] Validating hours for The Shard at 2025-06-05T13:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 14:00:00 Thursday, Day: 4, Time: 1400
⚠️ [Operating Hours] Could not determine hours for The Shard
✅ [Operating Hours] The Shard: Could not determine operating hours
🕒 [Operating Hours] Validating hours for The View from The Shard at 2025-06-05T13:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 14:00:00 Thursday, Day: 4, Time: 1400
⚠️ [Operating Hours] Could not determine hours for The View from The Shard
✅ [Operating Hours] The View from The Shard: Could not determine operating hours
✅ [enhancedPlaceSearch] 2 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 2 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'The View from The Shard',
  rating: 4.6,
  address: '32 London Bridge St, London SE1 9SG, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [ { name: 'The Shard', rating: 4.6 } ]
🔍 [SERVICE] Place details for "The View from The Shard": {
  hasRating: true,
  rating: 4.6,
  hasTypes: true,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "32 London Bridge St, London SE1 9SG, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5044028,\n' +
    '      "lng": -0.0865331\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.50578832989272,\n' +
    '        "lng": -0.08548532010727776\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50308867010728,\n' +
    '        "lng": -0.0881849798927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png",\n' +
    '  "icon_background_color": "#7B9EB0",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",\n' +
    '  "name": "The View from The Shard",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": false\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 3000,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/117022174302755652713\\">Aleksandrs Zdanovskis</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTvM_I_bx36LkYlZnKSI1PpZbdVlSYzmVY23DH906uapMw0BiFVhUAQ_QA4-ii3ZZZ9o8fJbe0yqIn70hBeMrA1Va6NESrBNSGBemtRz-Irjvjsqw8zl8dbBT_fhlUehW_Ccw3XS3v1m9VpoUB3mtvQb81y70y8cv3sxEg7qAUDFe89KpXeT5LT2TnwRoUP-JRzc0nBJu59wytH2yR5e8YJMegA9ghYi0-xgca-p31m8jVpKoRnoVNpQfrX-bj4jSWZoBVJL-Y7Cn1spDZUaeiQKJuxvqIVrgNk6jSlTX_ic1V0Vtx8uLy-S0RczUdGwXOGz_Y9wjXizpOpENJQOgBGqEg8sCsb5ipp7LzIlxxvE79Ca1rlHTWRKgwMLE4eyUi13Du36Wp2FwMNy5lgexEGaYlyrDAyWEuJ2Exh-6O94cCzWx-6gA77lTZlVWB0cPyKO3_KxnFJeAgjnjn-sNsOtvsxnHwg19eWUp_O3BlaztidGRU7Be3vwVr3RgmRMp48vKWkp_ys2Y7eMGTDHhMnU6iNwgGk9BXvT_xmlO88a6KqtusF8PSnzgZh0gUG-nC3jJs7",\n' +
    '      "width": 4000\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJDbhTs1ADdkgR-2MjTkoJXXg",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GW37+Q9 London, United Kingdom",\n' +
    '    "global_code": "9C3XGW37+Q9"\n' +
    '  },\n' +
    '  "rating": 4.6,\n' +
    '  "reference": "ChIJDbhTs1ADdkgR-2MjTkoJXXg",\n' +
    '  "types": [\n' +
    '    "tourist_attraction",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 7059\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.6,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ],
  detailsSize: 1645
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "The View from The Shard" with details
🔍 [SERVICE] Stored place "The View from The Shard" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.6,
  types: [ 'tourist_attraction', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: The View from The Shard at 2025-06-05T13:00:00.000Z
Calculating travel times for 2 places in London
Travel time from Silverman Statue to The View from The Shard: 8 minutes
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Visit Statue of Liberty, Visit Empire State Building in London" for London with ID: 8
[Weather] Fetching weather for 51.51,-0.12
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Silverman Statue" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
🔍 [/api/plan] Place "The View from The Shard" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 2 venues
2025-06-05 01:55:03 INFO [API] POST /api/plan 200 (6512ms) {
  "statusCode": 200,
  "duration": 6512
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee in Times Square at 10 AM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Times Square","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":3152,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee in Times Square at 10 AM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Times Square\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"2d206619-6ff3-4f46-a5ea-319eb3e9ecbb","status":"success","timestamp":"2025-06-05T09:03:33.371Z","userQuery":"Coffee in Times Square at 10 AM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Times Square, 10:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Times Square",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Coffee at Times Square, time: 2025-06-05T09:00:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Times Square"
  ],
  "fixedTimes": [
    {
      "location": "Times Square",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Times Square" with Google Maps Geocoding API
Geocoding search query: "Times Square, London, UK, UK"
Validated "Times Square" as admin area: "Greater London"
Validated "Times Square" as neighborhood: "Greater London"
Validating location: "Times Square" with Google Maps Geocoding API
Geocoding search query: "Times Square, London, UK, UK"
Validated "Times Square" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Notting Hill for cafe (score: 40)
   Reasons: Known for cafe, Nearby
🤖 [Gemini] Enhanced query: best coffee shops in Notting Hill
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Notting Hill
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Farm Girl at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Farm Girl: Currently open
🕒 [Operating Hours] Validating hours for Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Notting Hill Coffee Project: Currently open
🕒 [Operating Hours] Validating hours for St Clair Cafe at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] St Clair Cafe: Currently open
🕒 [Operating Hours] Validating hours for Mawi Cafe at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Mawi Cafe: Currently open
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'St Clair Cafe',
  rating: 5,
  address: '98 Portland Rd, London W11 4QL, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Notting Hill Coffee Project', rating: 4.5 },
  { name: 'Mawi Cafe', rating: 4.5 },
  { name: 'Farm Girl', rating: 4.3 }
]
🔍 [SERVICE] Place details for "St Clair Cafe": {
  hasRating: true,
  rating: 5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "98 Portland Rd, London W11 4QL, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5101757,\n' +
    '      "lng": -0.2102784\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51148802989271,\n' +
    '        "lng": -0.2089094701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50878837010727,\n' +
    '        "lng": -0.2116091298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "St Clair Cafe",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/115503551770014605774\\">Luc Mourier-Cooper</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQzDk0EEZ99rqJh2X-G46BBhhXRguaPibpZHoFbvcGkhbBGdiAvcwt8FVtIuN1OG8xMeE_6G6hLN385TwoR_Fv3Isc9hQcyMEVsjl2wWOzJbDu2WIwjjRsXZua4EtlGrx-dgfd6JHkQ9nwcfZ2KHPef4Nt8qkw_XtBhgM1BrbKyuzS1RuUTVH-PtNhkEJBI6AjtLSXFrlYYDzOGLf2li1ZzTmAkyN3mGYO_CKBLmQk9FgacgIGYZ0YMZ8va-3G3y9Ecng6k5PPnZwFlpJ3F8UaG79R4ECIjH5FjPwbTsTT6zd-a6D2fSsbrIiYRbVVxpgCwCw7aeeS4xPOQXaoy_1OYP3WxtOQrdv2kh52gm265dUTrOmNTlsS_kp3pqY6RD1dP-4J0W82dhZs2DRkYwf5zrdQwncdsAbJ73sWG23OEVI37VfrUk2WJ37EZXS17hqRyne5yFA7mjdDOIiF2Bd1ZC8mb1ADkZdWn4jKvlCxdeolei7n4fbXELLBneyjI94PtQ3uic3dnwKF-XgOHGMCUq34_n_RnTxLPOHnCVRvN2eo0o9iUWbVTXb5yIkCjUqP1KIQ5",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GQ6Q+3V London, United Kingdom",\n' +
    '    "global_code": "9C3XGQ6Q+3V"\n' +
    '  },\n' +
    '  "rating": 5,\n' +
    '  "reference": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 60\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1607
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "St Clair Cafe" with details
🔍 [SERVICE] Stored place "St Clair Cafe" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: St Clair Cafe at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 9
[Weather] Fetching weather for 51.51,-0.21
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "St Clair Cafe" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 02:03:34 INFO [API] POST /api/plan 200 (4721ms) {
  "statusCode": 200,
  "duration": 4721
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [SERVICE] Place details for "St Clair Cafe": {
  hasRating: true,
  rating: 5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "98 Portland Rd, London W11 4QL, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5101757,\n' +
    '      "lng": -0.2102784\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51148802989271,\n' +
    '        "lng": -0.2089094701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50878837010727,\n' +
    '        "lng": -0.2116091298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "St Clair Cafe",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/115503551770014605774\\">Luc Mourier-Cooper</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNQzDk0EEZ99rqJh2X-G46BBhhXRguaPibpZHoFbvcGkhbBGdiAvcwt8FVtIuN1OG8xMeE_6G6hLN385TwoR_Fv3Isc9hQcyMEVsjl2wWOzJbDu2WIwjjRsXZua4EtlGrx-dgfd6JHkQ9nwcfZ2KHPef4Nt8qkw_XtBhgM1BrbKyuzS1RuUTVH-PtNhkEJBI6AjtLSXFrlYYDzOGLf2li1ZzTmAkyN3mGYO_CKBLmQk9FgacgIGYZ0YMZ8va-3G3y9Ecng6k5PPnZwFlpJ3F8UaG79R4ECIjH5FjPwbTsTT6zd-a6D2fSsbrIiYRbVVxpgCwCw7aeeS4xPOQXaoy_1OYP3WxtOQrdv2kh52gm265dUTrOmNTlsS_kp3pqY6RD1dP-4J0W82dhZs2DRkYwf5zrdQwncdsAbJ73sWG23OEVI37VfrUk2WJ37EZXS17hqRyne5yFA7mjdDOIiF2Bd1ZC8mb1ADkZdWn4jKvlCxdeolei7n4fbXELLBneyjI94PtQ3uic3dnwKF-XgOHGMCUq34_n_RnTxLPOHnCVRvN2eo0o9iUWbVTXb5yIkCjUqP1KIQ5",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GQ6Q+3V London, United Kingdom",\n' +
    '    "global_code": "9C3XGQ6Q+3V"\n' +
    '  },\n' +
    '  "rating": 5,\n' +
    '  "reference": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 60\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1607
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "St Clair Cafe" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "St Clair Cafe" already exists, returning existing record
🔍 [SERVICE] Stored place "St Clair Cafe" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: St Clair Cafe at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 10
[Weather] Using cached data for 51.51,-0.21
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "St Clair Cafe" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 02:05:39 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Notting Hill for cafe (score: 40)
   Reasons: Known for cafe, Nearby
🤖 [Gemini] Enhanced query: best coffee shops in Notting Hill
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Notting Hill
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Farm Girl at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Farm Girl: Currently open
🕒 [Operating Hours] Validating hours for Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Notting Hill Coffee Project: Currently open
🕒 [Operating Hours] Validating hours for St Clair Cafe at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] St Clair Cafe: Currently open
🕒 [Operating Hours] Validating hours for Mawi Cafe at 2025-06-05T09:00:00.000Z
✅ [Operating Hours] Mawi Cafe: Currently open
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Notting Hill Coffee Project',
  rating: 4.5,
  address: '63 Notting Hill Gate, London W11 3JS, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'St Clair Cafe', rating: 5 },
  { name: 'Mawi Cafe', rating: 4.5 },
  { name: 'Farm Girl', rating: 4.3 }
]
🔍 [SERVICE] Place details for "Notting Hill Coffee Project": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Notting Hill Gate, London W11 3JS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5088921,\n' +
    '      "lng": -0.1966258\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51027477989272,\n' +
    '        "lng": -0.1952558201072777\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50757512010728,\n' +
    '        "lng": -0.1979554798927221\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Notting Hill Coffee Project",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1555,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111205543629304504553\\">Maryam Al</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRcEOiSSlPwG9GbV2zBgEwV_6o_12Mr5P39XwSMyKXpc2iRJlDM3WaqyNXkGGrwRJ3Y_Jt6K6rNta2M8c7O_Y9p46CFDWIwPlkhsKh2qVdEFoSH5IK9zoZr1qnvgTh0xfnxsz-TJ2pxavx9MRTPgvKhq29BKfcZsrq3XUyU-yIOvUdcBsJb-UKP6S8HC6-9noOz6gToFlcndcY0vPmKjzOlIK44aw38-bCKqhzoPJJcn7MJp1oIgzYkmaBSSBoYLbwttEnGQRr_xpouHZ8Ntacwkpo1y36w0c8B3bcxI3W9rOF-cVoM71IvwnUkc1eSlDzCgmtTjOoQek-gUBnx7l6PR7WcGKXZRyU5LU-t1Onm62F7N83noqE-LNx7a_dfuWmepa2rpRUfILLFwz778ip5NIbEmC25GoKX0ykfvYh_xbjmP6WIer6ml4i0q-fJ4TlLDutqnk44mdpjDURB2ZfZm9exW1xu32nYYIPhwGXlfR56gqqkmwcOwFXFsQLeMINRB758VeCI1WnC0XCUh3KBRxVGHOOhqskt74rN0YJ4L-T9G5cJuAR6HjMnpSPHRl4CH7Md",\n' +
    '      "width": 1170\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GR53+H9 London, United Kingdom",\n' +
    '    "global_code": "9C3XGR53+H9"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 362\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1621
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🆕 [MEM-FALLBACK] Created new place "Notting Hill Coffee Project" with details
🔍 [SERVICE] Stored place "Notting Hill Coffee Project" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 11
[Weather] Fetching weather for 51.51,-0.2
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Notting Hill Coffee Project" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 02:11:33 INFO [API] POST /api/plan 200 (1452ms) {
  "statusCode": 200,
  "duration": 1452
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee in Times Square at 10 AM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Times Square","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2830,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee in Times Square at 10 AM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Times Square\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"c29ebaff-f4bd-4469-9a3e-25f99a347421","status":"success","timestamp":"2025-06-05T10:39:51.467Z","userQuery":"Coffee in Times Square at 10 AM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Times Square, 10:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Times Square",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Coffee at Times Square, time: 2025-06-05T09:00:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Times Square"
  ],
  "fixedTimes": [
    {
      "location": "Times Square",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Times Square" with Google Maps Geocoding API
Geocoding search query: "Times Square, London, UK, UK"
Validated "Times Square" as admin area: "Greater London"
Validated "Times Square" as neighborhood: "Greater London"
Validating location: "Times Square" with Google Maps Geocoding API
Geocoding search query: "Times Square, London, UK, UK"
Validated "Times Square" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Notting Hill for cafe (score: 40)
   Reasons: Known for cafe, Nearby
🤖 [Gemini] Enhanced query: best coffee shops in Notting Hill
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Notting Hill
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Farm Girl at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Farm Girl
✅ [Operating Hours] Farm Girl: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Notting Hill Coffee Project
✅ [Operating Hours] Notting Hill Coffee Project: Could not determine operating hours
🕒 [Operating Hours] Validating hours for St Clair Cafe at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for St Clair Cafe
✅ [Operating Hours] St Clair Cafe: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Mawi Cafe at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Mawi Cafe
✅ [Operating Hours] Mawi Cafe: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'St Clair Cafe',
  rating: 5,
  address: '98 Portland Rd, London W11 4QL, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Notting Hill Coffee Project', rating: 4.5 },
  { name: 'Mawi Cafe', rating: 4.5 },
  { name: 'Farm Girl', rating: 4.3 }
]
🔍 [SERVICE] Place details for "St Clair Cafe": {
  hasRating: true,
  rating: 5,
  hasTypes: true,
  types: [ 'cafe', 'food', 'point_of_interest', 'store', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "98 Portland Rd, London W11 4QL, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5101757,\n' +
    '      "lng": -0.2102784\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51148802989271,\n' +
    '        "lng": -0.2089094701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50878837010727,\n' +
    '        "lng": -0.2116091298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "St Clair Cafe",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/115503551770014605774\\">Luc Mourier-Cooper</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNSCk2M--sM-6tIZKwxJqcgAGX5YLOyxJBKfEEye0XMD1yQ6_GWeOOW31RyWxZrEz2tZagsZuWucQvWWPoqI9aWhIC05gPmEAbmgsi5zMq8UR0_-In88xInu5CDQx1UdkpWvSrQGjkG-unbrnDuuhogo2bWWNBh0hw_1YHLm4cYE-UXV19r2R1ZJL23t4fA8kELBqem4kamflmOdfRr9Wi4h6txnYCr4mcmBaTP3KvCbcsvOl4c98EJG1WsBq9Z5ToUAoxQFC3IAhoCgWb71K-UoOIr1wn6yoPGhZBZwJ4jsCX6ypd7ryeOu7TXqqcxfJmDVzy8c_sKshPz_ayvkuLzzjCj_QSFMz2EkMz0KYy_XsIRDh7ssYavMZW9JvPPlPCcT6xnUd6g-JJQ6bIiAtVT_7YzMHjmujZsizObIF3duIRu_ID4oKub07pPcKRIIMwvmBejvxS2eKWqQU5yvg-0qFVYm7tDsu9sCVTN2ggmhEiEj1NDqlIiY9ZH_xyRZm_9FsYOH-8xRqUOCVsLmVh9e-p7xE2cYo4TTYf5MPIBMw934wAD-XU1Uq0vvcqWiEHH-8lNZ",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GQ6Q+3V London, United Kingdom",\n' +
    '    "global_code": "9C3XGQ6Q+3V"\n' +
    '  },\n' +
    '  "rating": 5,\n' +
    '  "reference": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "store",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 60\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 5,
  types: [ 'cafe', 'food', 'point_of_interest', 'store', 'establishment' ],
  detailsSize: 1607
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "St Clair Cafe" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "St Clair Cafe" already exists, returning existing record
🔍 [SERVICE] Stored place "St Clair Cafe" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: St Clair Cafe at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 12
[Weather] Fetching weather for 51.51,-0.21
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "St Clair Cafe" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 03:39:53 INFO [API] POST /api/plan 200 (4791ms) {
  "statusCode": 200,
  "duration": 4791
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Notting Hill for cafe (score: 40)
   Reasons: Known for cafe, Nearby
🤖 [Gemini] Enhanced query: best coffee shops in Notting Hill
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Notting Hill
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Farm Girl at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Farm Girl
✅ [Operating Hours] Farm Girl: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Notting Hill Coffee Project
✅ [Operating Hours] Notting Hill Coffee Project: Could not determine operating hours
🕒 [Operating Hours] Validating hours for St Clair Cafe at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for St Clair Cafe
✅ [Operating Hours] St Clair Cafe: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Mawi Cafe at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Mawi Cafe
✅ [Operating Hours] Mawi Cafe: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'St Clair Cafe',
  rating: 5,
  address: '98 Portland Rd, London W11 4QL, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'Notting Hill Coffee Project', rating: 4.5 },
  { name: 'Mawi Cafe', rating: 4.5 },
  { name: 'Farm Girl', rating: 4.3 }
]
🔍 [SERVICE] Place details for "St Clair Cafe": {
  hasRating: true,
  rating: 5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "98 Portland Rd, London W11 4QL, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5101757,\n' +
    '      "lng": -0.2102784\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51148802989271,\n' +
    '        "lng": -0.2089094701072778\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50878837010727,\n' +
    '        "lng": -0.2116091298927222\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "St Clair Cafe",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 4032,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/115503551770014605774\\">Luc Mourier-Cooper</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNRbfdTGfS-auh492ECHzQvTlNKjxSvCug8OwP9ycyIjwP-F4X2VFw75AcwXduyFm-2soaVBy2oKWib9OmWoJcDGhF2rZDioCZt_CbYyt6c_CEXepgkMiy2C83WTUNQYnxXkEinpfOvQrS3epIqkbgpumRRvVEizwohItMWAz7Tm9IrmtjSKtjfabf6YAR-h2QWUu88JVrD6P1fR7KhXaf1qHPYfDiCfXo_pOmiZb5Bx_SJVXeUSb-tF6eDsirTTF4exhxIf3prcipnbcGYeEzV7uWTDz7yb9a9xHzmlSq_xgjiDFZYs03Nc8yf1DKo6msYrLKBcQPjNAXRMknKOkUz5iij7dRfiS80h0ULoja5CJ2cJLDYNfs_XNKfMvlOt5h82NodGX3M3xMgl0PcgHgp9tT-Tx6FwXsDoExxXrYmadMeFNPequntloV4wWKFPTSrsTbU43sRfuUWIUcZM7WPGwrGhVK1NS7WheawwgeOUrfcPC8KCTjM27l8CWf0mkR-c7rFg6DjTL4UYis-fF1hzmTntNut-ePrvhcCwQztgpgUB0dEMVQYoeZxqwoo1tqzll19J",\n' +
    '      "width": 3024\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GQ6Q+3V London, United Kingdom",\n' +
    '    "global_code": "9C3XGQ6Q+3V"\n' +
    '  },\n' +
    '  "rating": 5,\n' +
    '  "reference": "ChIJCVQkeZ0PdkgR6oepEsiz4DA",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 60\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1607
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "St Clair Cafe" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "St Clair Cafe" already exists, returning existing record
🔍 [SERVICE] Stored place "St Clair Cafe" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: St Clair Cafe at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 13
[Weather] Using cached data for 51.51,-0.21
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "St Clair Cafe" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 04:02:28 INFO [API] POST /api/plan 200 (1404ms) {
  "statusCode": 200,
  "duration": 1404
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
[NLP] Processing query with context for city: London
🚀 [nlp-fixed] Attempting to process query with new Gemini processor
🚀 [nlp-fixed] Query: Coffee in Times Square at 10 AM
🚀 [nlp-fixed] CityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
Raw Gemini structured data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
[32minfo[39m: AI Interaction {"modelName":"gemini-1.5-pro","parsedResponse":{"fixedAppointments":[],"fixedTimeEntries":[{"activity":"Coffee","location":"Times Square","searchParameters":{"specificRequirements":[]},"time":"10:00","venueRequirements":[]}],"flexibleTimeEntries":[],"preferences":{"budget":"moderate","interests":[]},"specialRequests":[],"timeBlocks":[],"travelGroup":{"adults":1,"children":0}},"processingTimeMs":2756,"rawRequest":{"prompt":"\n    You are an expert travel planning assistant for London. Extract structured information from this itinerary request with extreme attention to detail.\n    \n    CRITICAL PARSING RULES:\n    \n    1. JSON FORMAT: Return ONLY valid JSON matching the schema - no markdown, no extra text\n    \n    2. TIME EXTRACTION:\n       - Use 24-hour format (e.g., \"09:00\", \"15:30\")\n       - \"at 6\" without context = \"18:00\" (assume evening for dinner/drinks)\n       - \"at 6\" with morning context = \"06:00\"\n       - Default meal times: breakfast=\"09:00\", lunch=\"12:00\", dinner=\"19:00\"\n       - \"morning\"=\"09:00\", \"afternoon\"=\"14:00\", \"evening\"=\"18:00\", \"night\"=\"21:00\"\n       - \"early morning\"=\"07:00\", \"late morning\"=\"11:00\", \"late afternoon\"=\"16:00\"\n       - \"sunset\" = \"18:30\", \"sunrise\" = \"06:30\"\n       - RELATIVE TIME HANDLING (CRITICAL):\n         * \"in X hours\" = add X hours to the start time or previous activity time\n         * \"X hours later\" = add X hours to the previous activity time\n         * Example: If start is 10:00, \"in 1 hour\" = \"11:00\", \"in 3 hours\" = \"13:00\"\n         * Example: If last activity is 12:00, \"2 hours later\" = \"14:00\"\n       - REVERSE PLANNING (CRITICAL):\n         * \"before that\" = calculate earlier time from the reference activity\n         * \"end with X at Y time\" = X happens at Y time, earlier activities before\n         * \"working backwards from X\" = X is the last/latest activity\n         * Example: \"meeting at 3 PM, lunch before that\" = lunch at 12:00-13:00\n         * Example: \"flight at 8 PM, dinner before\" = dinner at 18:00-19:00\n         * ALWAYS include ALL mentioned activities, even reference points like meetings/flights\n    \n    3. TIME BLOCKS & APPOINTMENTS - NEW CRITICAL PARSING:\n       - TIME BLOCKS: \"work from X to Y\", \"spend X hours at\", \"need X hours for\"\n         * Example: \"work from 10 AM to 3 PM\" → timeBlocks entry with startTime: \"10:00\", endTime: \"15:00\"\n         * Example: \"need a quiet place to work for 5 hours\" → timeBlocks entry with duration reflected in end time\n         * Extract venue requirements: \"quiet\", \"good wifi\", \"suitable for calls\"\n       - FIXED APPOINTMENTS: \"meeting at X\", \"appointment at Y\", \"reservation at Z\"\n         * Example: \"meeting in Mayfair at 5\" → fixedAppointments entry with time: \"17:00\", location: \"Mayfair\"\n         * Add buffers: meeting = 30 min before, dinner = 15 min before\n       - REGULAR ACTIVITIES: Everything else goes in fixedTimeEntries\n    \n    4. ACTIVITY SEQUENCE - CRITICAL:\n       - Preserve the EXACT order mentioned by the user\n       - \"then\", \"after that\", \"after\", \"followed by\", \"next\", \"afterwards\" indicate sequence\n       - Count ALL activities mentioned (coffee, lunch, drinks, etc.)\n       - If no times given, space activities 1.5-2 hours apart\n       - Parse compound sentences carefully: \"I have a meeting... and would like to go to a restaurant\" = 2 activities\n    \n    5. VENUE PREFERENCES - CRITICAL:\n       - ALWAYS extract venue descriptors to venuePreference field\n       - SPECIFIC FOOD MENTIONS must be captured exactly:\n         * \"fish and chips\" → venuePreference: \"fish and chips restaurant\"\n         * \"pizza\" → venuePreference: \"pizza restaurant\"\n         * \"sushi\" → venuePreference: \"sushi restaurant\"\n         * \"tacos\" → venuePreference: \"taco restaurant\"\n         * \"burgers\" → venuePreference: \"burger restaurant\"\n         * \"chinese food\" → venuePreference: \"chinese restaurant\"\n         * \"italian\" → venuePreference: \"italian restaurant\"\n         * \"breakfast tacos\" → venuePreference: \"breakfast taco restaurant\"\n       - STYLE DESCRIPTORS:\n         * \"hipster cafe\" → venuePreference: \"hipster cafe\"\n         * \"authentic Jewish deli\" → venuePreference: \"authentic Jewish deli\"\n         * \"trendy brunch spot\" → venuePreference: \"trendy brunch spot\"\n         * \"hole-in-the-wall\" → venuePreference: \"hole-in-the-wall\"\n         * \"michelin star\" → venuePreference: \"michelin star restaurant\"\n         * \"rooftop bar\" → venuePreference: \"rooftop bar\"\n         * \"sports bar\" → venuePreference: \"sports bar\"\n         * \"family-friendly\" → venuePreference: \"family-friendly restaurant\"\n       - REQUIREMENTS (NOT preferences):\n         * \"outdoor seating\" → specificRequirements: [\"outdoor seating\"]\n         * \"with a view\" → specificRequirements: [\"with a view\"]\n         * \"good wifi\" → specificRequirements: [\"wifi\"]\n    \n    6. LOCATION INTELLIGENCE - CRITICAL:\n       - PRESERVE ALL LOCATION MENTIONS from the user's query!\n       - Common London locations: \"Shoreditch\", \"Notting Hill\", \"Covent Garden\", \"Camden\"\n       - If user mentions a specific place (e.g., \"Barton Springs\", \"4th st\"), USE IT EXACTLY\n       - Keep landmark names as-is\n       - \"that famous museum\" → Try to infer (British Museum, Tower of London, Hyde Park)\n       - \"nearby\" → Use previous activity's location\n       - \"somewhere nice\" or generic location → \"Central London\"\n       - No location → \"Central London\"\n       - NEVER replace specific location mentions with generic ones\n    \n    6. SPECIAL REQUIREMENTS:\n       - Budget mentions: \"cheap\"/\"budget\" → budget: \"budget\", \"upscale\"/\"fancy\" → budget: \"expensive\"\n       - Group size: \"family\", \"group of X\" → travelGroup numbers\n       - Dietary: \"kosher\", \"vegan\", \"halal\" → specificRequirements\n       - Accessibility: \"wheelchair\", \"accessible\" → accessibility requirements\n       - Weather: \"if nice weather\" → note in specialRequests\n    \n    7. ACTIVITY TYPES:\n       - Meals: breakfast/brunch/lunch/dinner → restaurant\n       - Coffee/work at cafe → cafe\n       - Drinks/cocktails/lounge → bar (NOT attraction)\n       - Shopping → shopping\n       - Museums/galleries → museum\n       - Parks/outdoor/walk → park\n       - Shows/entertainment → entertainment\n       - Meeting/appointment → MUST include in fixedAppointments or fixedTimeEntries with type: \"skip\"\n    \n    8. EDGE CASES:\n       - Conflicting requirements: Choose most logical interpretation\n       - Vague queries: Make reasonable London-appropriate suggestions\n       - Multi-day: Note day changes in flexibleTimeEntries\n    \n    SCHEMA STRUCTURE:\n    {\n      \"timeBlocks\": [\n        {\n          \"startTime\": \"10:00\",\n          \"endTime\": \"15:00\",\n          \"activity\": \"work session\",\n          \"location\": \"Canary Wharf\",\n          \"venueRequirements\": [\"quiet\", \"good wifi\", \"suitable for calls\"],\n          \"searchParameters\": {\n            \"venueType\": \"cafe\",\n            \"specificRequirements\": [\"quiet\", \"wifi\", \"power outlets\"],\n            \"ambience\": \"quiet\"\n          }\n        }\n      ],\n      \"fixedAppointments\": [\n        {\n          \"time\": \"17:00\",\n          \"duration\": 60,\n          \"activity\": \"meeting\",\n          \"location\": \"Mayfair\",\n          \"bufferBefore\": 30,\n          \"bufferAfter\": 15,\n          \"isFixed\": true\n        }\n      ],\n      \"fixedTimeEntries\": [\n        {\n          \"time\": \"HH:MM\",\n          \"activity\": \"Brief description\",\n          \"location\": \"London location\",\n          \"venuePreference\": \"specific venue type if mentioned\",\n          \"venueRequirements\": [\"quiet\", \"non-crowded\"],\n          \"searchParameters\": {\n            \"venuePreference\": \"DUPLICATE venue preference here\",\n            \"specificRequirements\": [\"array of requirements\"],\n            \"cuisine\": \"if food related\",\n            \"priceLevel\": \"budget/moderate/expensive\"\n          }\n        }\n      ],\n      \"flexibleTimeEntries\": [...same structure...],\n      \"preferences\": {\n        \"budget\": \"overall budget level\",\n        \"pace\": \"relaxed/moderate/busy\",\n        \"interests\": [\"user interests\"]\n      },\n      \"travelGroup\": {\n        \"adults\": number,\n        \"children\": number\n      },\n      \"specialRequests\": [\"any special notes\"]\n    }\n\n    \n    Date: 2025-06-04\n    \n    IMPORTANT: Count ALL activities in this request and ensure each one appears in the output.\n    \n    Here's the request to analyze:\n    Coffee in Times Square at 10 AM\n    \n    CRITICAL REMINDER: Extract EVERY SINGLE activity mentioned above. Do not skip any activities even if there are many. Each distinct activity should have its own entry in fixedTimeEntries.\n    ","temperature":0.2},"rawResponse":"```json\n{\n  \"timeBlocks\": [],\n  \"fixedAppointments\": [],\n  \"fixedTimeEntries\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Coffee\",\n      \"location\": \"Times Square\",\n      \"venuePreference\": null,\n      \"venueRequirements\": [],\n      \"searchParameters\": {\n        \"venuePreference\": null,\n        \"specificRequirements\": [],\n        \"cuisine\": null,\n        \"priceLevel\": null\n      }\n    }\n  ],\n  \"flexibleTimeEntries\": [],\n  \"preferences\": {\n    \"budget\": null,\n    \"pace\": null,\n    \"interests\": []\n  },\n  \"travelGroup\": {\n    \"adults\": null,\n    \"children\": null\n  },\n  \"specialRequests\": []\n}\n```\n","service":"ai-interaction-logger","sessionId":"3017fcc1-b914-4503-8e68-805b6d2bcfbf","status":"success","timestamp":"2025-06-05T11:15:39.787Z","userQuery":"Coffee in Times Square at 10 AM"}
Failed to log AI interaction to database: TypeError: db.insert is not a function
    at logAiInteraction (/Users/carlos/LondonDayPlanner-1/server/lib/aiLogging.ts:93:16)
    at attemptGeminiProcessing (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:449:15)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at processWithGemini (/Users/carlos/LondonDayPlanner-1/server/lib/geminiProcessor.ts:176:22)
    at parseItineraryRequest (/Users/carlos/LondonDayPlanner-1/server/lib/nlp-fixed.ts:526:25)
    at MemoryCache.getOrSet (/Users/carlos/LondonDayPlanner-1/server/lib/cache.ts:59:23)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:71:37)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Processing Gemini response with raw data: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": []
}
Processing 1 fixed time entries with duplicate detection
Added fixed time entry: Coffee at Times Square, 10:00
Final processed result: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
✅ [nlp-fixed] processWithGemini completed successfully, result: VALID
Successfully processed query with new Gemini processor
Raw Gemini API response: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Converting Gemini result to app format: {
  "timeBlocks": [],
  "fixedAppointments": [],
  "fixedTimeEntries": [
    {
      "time": "10:00",
      "activity": "Coffee",
      "location": "Times Square",
      "venueRequirements": [],
      "searchParameters": {
        "priceLevel": "moderate",
        "specificRequirements": []
      }
    }
  ],
  "flexibleTimeEntries": [],
  "preferences": {
    "budget": "moderate",
    "interests": []
  },
  "travelGroup": {
    "adults": 1,
    "children": 0
  },
  "specialRequests": [],
  "startLocation": "Central London"
}
Raw time blocks from Gemini: []
Raw fixed appointments from Gemini: []
Raw fixed time entries from Gemini: [
  {
    "time": "10:00",
    "activity": "Coffee",
    "location": "Times Square",
    "venueRequirements": [],
    "searchParameters": {
      "priceLevel": "moderate",
      "specificRequirements": []
    }
  }
]
Fixed time entry: Normalized time from "10:00" to "10:00"
Correctly interpreted time "10:00" as Europe/London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Correctly interpreted time "10:00" as London time: 10:00 AM (2025-06-05T09:00:00.000Z)
Processed fixed time entry: Coffee at Times Square, time: 2025-06-05T09:00:00.000Z, type: cafe
Raw flexible time entries from Gemini: []
Final de-duplicated activities count: 1
Converted app format request: {
  "startLocation": "Central London",
  "destinations": [
    "Times Square"
  ],
  "fixedTimes": [
    {
      "location": "Times Square",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
Using optimized Gemini result that was converted by convertGeminiToAppFormat function
Gemini result contains 1 de-duplicated activities
Validating location: "Times Square" with Google Maps Geocoding API
Geocoding search query: "Times Square, London, UK, UK"
Validated "Times Square" as admin area: "Greater London"
Validated "Times Square" as neighborhood: "Greater London"
Validating location: "Times Square" with Google Maps Geocoding API
Geocoding search query: "Times Square, London, UK, UK"
Validated "Times Square" as admin area: "Greater London"
Final processed Gemini result: {
  "startLocation": "Central London",
  "destinations": [
    "Greater London"
  ],
  "fixedTimes": [
    {
      "location": "Greater London",
      "time": "2025-06-05T09:00:00.000Z",
      "type": "cafe",
      "searchTerm": "Coffee",
      "keywords": [],
      "minRating": 4,
      "displayTime": "10:00 AM"
    }
  ],
  "preferences": {
    "type": "moderate",
    "requirements": []
  }
}
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [enhancedPlaceSearch] Starting enhanced search with options: {
  query: 'Coffee',
  location: 'Greater London',
  keywords: [],
  type: 'cafe',
  preferences: { venuePreference: undefined },
  scheduledDateTime: 2025-06-05T09:00:00.000Z,
  cityContext: { name: 'London', slug: 'london', timezone: 'Europe/London' }
}
🏙️ [Area Intelligence] Recommending Notting Hill for cafe (score: 40)
   Reasons: Known for cafe, Nearby
🤖 [Gemini] Enhanced query: best coffee shops in Notting Hill
📍 [enhancedPlaceSearch] Using city center for "london"
🎯 [enhancedPlaceSearch] Using location bias: 51.5074,-0.1278 with radius 25000m
🌐 [enhancedPlaceSearch] Searching with query: best coffee shops in Notting Hill
🏙️ [enhancedPlaceSearch] After city filtering: 4 venues remain for London
🕒 [enhancedPlaceSearch] Filtering venues by operating hours for 2025-06-05T09:00:00.000Z
🕒 [Operating Hours] Validating hours for Farm Girl at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Farm Girl
✅ [Operating Hours] Farm Girl: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Notting Hill Coffee Project
✅ [Operating Hours] Notting Hill Coffee Project: Could not determine operating hours
🕒 [Operating Hours] Validating hours for St Clair Cafe at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for St Clair Cafe
✅ [Operating Hours] St Clair Cafe: Could not determine operating hours
🕒 [Operating Hours] Validating hours for Mawi Cafe at 2025-06-05T09:00:00.000Z
📅 [Operating Hours] Scheduled: 2025-06-05 10:00:00 Thursday, Day: 4, Time: 1000
⚠️ [Operating Hours] Could not determine hours for Mawi Cafe
✅ [Operating Hours] Mawi Cafe: Could not determine operating hours
✅ [enhancedPlaceSearch] 4 venues are open, 0 are closed
✅ [enhancedPlaceSearch] Found 4 places with ratings
🎲 [enhancedPlaceSearch] Selected venue (with variety): {
  name: 'Notting Hill Coffee Project',
  rating: 4.5,
  address: '63 Notting Hill Gate, London W11 3JS, United Kingdom'
}
🔄 [enhancedPlaceSearch] Alternatives: [
  { name: 'St Clair Cafe', rating: 5 },
  { name: 'Mawi Cafe', rating: 4.5 },
  { name: 'Farm Girl', rating: 4.3 }
]
🔍 [SERVICE] Place details for "Notting Hill Coffee Project": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Notting Hill Gate, London W11 3JS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5088921,\n' +
    '      "lng": -0.1966258\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51027477989272,\n' +
    '        "lng": -0.1952558201072777\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50757512010728,\n' +
    '        "lng": -0.1979554798927221\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Notting Hill Coffee Project",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1555,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111205543629304504553\\">Maryam Al</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTxNWfzBQqrpFJ5nHFdpb3BHCBnve1yWl4sBSVNbr5CQPS8w2-KEiQ_qqyj4_8ryzefSzTTaczGhnKsYzH7Op1zU7GkoV18PiRkxu4vW_kRotYpMjBQ5S4K4vp3ZMnggz3PfU2tTXAzLf_TMyXljJ3RbF6H8HF86wbMGy5np5iB45zwxUrvx9FIsjuGJRFLBtL_nFUKP9liA58jPlNpEf76N7GS6b_cPnvmP7DPZAM5c2s0WJFkCGdyPG-5vkVoEgCnPxa6RQiHMSYIyuXtUwOMvG9i1O2QW6UkdjLA0bDrZI4KN0aNXsxS-SPFwVRmDuvWCoZESOPlJ3fne9CtToEHW9D6UAufce96sHOKeAW7n0LLlhKVwdxqGWtngNstIocNv_OuUgKefuHKgcObw-FNSq36xNWg4aGbTIptJXjD47DwYgzCZMOkWhroqcxmTEpF84rCSZq-mHGwxLW7-Pmu3DFX7kIYgAwJasgRjETVBcOu1Qug-mnpdOD8QXChTzvznGTZ9gA3AxUJU0j9J71larwWDWOKzy7iaDSwE_MKRVO0Otuywcz61abwGP5M8-ilNVjC",\n' +
    '      "width": 1170\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GR53+H9 London, United Kingdom",\n' +
    '    "global_code": "9C3XGR53+H9"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 362\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1621
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Notting Hill Coffee Project" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "Notting Hill Coffee Project" already exists, returning existing record
🔍 [SERVICE] Stored place "Notting Hill Coffee Project" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 14
[Weather] Fetching weather for 51.51,-0.2
[Weather] Success with OpenWeatherMap
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Notting Hill Coffee Project" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 04:15:41 INFO [API] POST /api/plan 200 (4465ms) {
  "statusCode": 200,
  "duration": 4465
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [SERVICE] Place details for "Notting Hill Coffee Project": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Notting Hill Gate, London W11 3JS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5088921,\n' +
    '      "lng": -0.1966258\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51027477989272,\n' +
    '        "lng": -0.1952558201072777\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50757512010728,\n' +
    '        "lng": -0.1979554798927221\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Notting Hill Coffee Project",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1555,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111205543629304504553\\">Maryam Al</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTxNWfzBQqrpFJ5nHFdpb3BHCBnve1yWl4sBSVNbr5CQPS8w2-KEiQ_qqyj4_8ryzefSzTTaczGhnKsYzH7Op1zU7GkoV18PiRkxu4vW_kRotYpMjBQ5S4K4vp3ZMnggz3PfU2tTXAzLf_TMyXljJ3RbF6H8HF86wbMGy5np5iB45zwxUrvx9FIsjuGJRFLBtL_nFUKP9liA58jPlNpEf76N7GS6b_cPnvmP7DPZAM5c2s0WJFkCGdyPG-5vkVoEgCnPxa6RQiHMSYIyuXtUwOMvG9i1O2QW6UkdjLA0bDrZI4KN0aNXsxS-SPFwVRmDuvWCoZESOPlJ3fne9CtToEHW9D6UAufce96sHOKeAW7n0LLlhKVwdxqGWtngNstIocNv_OuUgKefuHKgcObw-FNSq36xNWg4aGbTIptJXjD47DwYgzCZMOkWhroqcxmTEpF84rCSZq-mHGwxLW7-Pmu3DFX7kIYgAwJasgRjETVBcOu1Qug-mnpdOD8QXChTzvznGTZ9gA3AxUJU0j9J71larwWDWOKzy7iaDSwE_MKRVO0Otuywcz61abwGP5M8-ilNVjC",\n' +
    '      "width": 1170\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GR53+H9 London, United Kingdom",\n' +
    '    "global_code": "9C3XGR53+H9"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 362\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1621
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Notting Hill Coffee Project" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "Notting Hill Coffee Project" already exists, returning existing record
🔍 [SERVICE] Stored place "Notting Hill Coffee Project" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 15
[Weather] Using cached data for 51.51,-0.2
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Notting Hill Coffee Project" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 04:16:00 INFO [API] POST /api/plan 200 (1ms) {
  "statusCode": 200,
  "duration": 1
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [SERVICE] Place details for "Notting Hill Coffee Project": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Notting Hill Gate, London W11 3JS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5088921,\n' +
    '      "lng": -0.1966258\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51027477989272,\n' +
    '        "lng": -0.1952558201072777\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50757512010728,\n' +
    '        "lng": -0.1979554798927221\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Notting Hill Coffee Project",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1555,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111205543629304504553\\">Maryam Al</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTxNWfzBQqrpFJ5nHFdpb3BHCBnve1yWl4sBSVNbr5CQPS8w2-KEiQ_qqyj4_8ryzefSzTTaczGhnKsYzH7Op1zU7GkoV18PiRkxu4vW_kRotYpMjBQ5S4K4vp3ZMnggz3PfU2tTXAzLf_TMyXljJ3RbF6H8HF86wbMGy5np5iB45zwxUrvx9FIsjuGJRFLBtL_nFUKP9liA58jPlNpEf76N7GS6b_cPnvmP7DPZAM5c2s0WJFkCGdyPG-5vkVoEgCnPxa6RQiHMSYIyuXtUwOMvG9i1O2QW6UkdjLA0bDrZI4KN0aNXsxS-SPFwVRmDuvWCoZESOPlJ3fne9CtToEHW9D6UAufce96sHOKeAW7n0LLlhKVwdxqGWtngNstIocNv_OuUgKefuHKgcObw-FNSq36xNWg4aGbTIptJXjD47DwYgzCZMOkWhroqcxmTEpF84rCSZq-mHGwxLW7-Pmu3DFX7kIYgAwJasgRjETVBcOu1Qug-mnpdOD8QXChTzvznGTZ9gA3AxUJU0j9J71larwWDWOKzy7iaDSwE_MKRVO0Otuywcz61abwGP5M8-ilNVjC",\n' +
    '      "width": 1170\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GR53+H9 London, United Kingdom",\n' +
    '    "global_code": "9C3XGR53+H9"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 362\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1621
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Notting Hill Coffee Project" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "Notting Hill Coffee Project" already exists, returning existing record
🔍 [SERVICE] Stored place "Notting Hill Coffee Project" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 16
[Weather] Using cached data for 51.51,-0.2
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Notting Hill Coffee Project" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 04:16:45 INFO [API] POST /api/plan 200 (1ms) {
  "statusCode": 200,
  "duration": 1
}
📝 [/api/plan] Generic plan request received
Query: Coffee in Times Square at 10 AM
🚀 [/api/plan] Creating plan for London
🏙️ Creating plan for city: london
🚀 Creating plan for query: Coffee in Times Square at 10 AM
📝 Parsed request from cache/fetch: {
  startLocation: 'Central London',
  destinations: [ 'Greater London' ],
  fixedTimes: [
    {
      location: 'Greater London',
      time: '2025-06-05T09:00:00.000Z',
      type: 'cafe',
      searchTerm: 'Coffee',
      keywords: [],
      minRating: 4,
      displayTime: '10:00 AM',
      searchPreference: undefined
    }
  ],
  preferences: { type: 'moderate', requirements: [] }
}
📍 Using explicit start location from NLP: Central London
📍 Determined initial search/start location: Central London
[SERVICE DEBUG] Raw timeSlot being processed: {"location":"Greater London","time":"2025-06-05T09:00:00.000Z","type":"cafe","searchTerm":"Coffee","keywords":[],"minRating":4,"displayTime":"10:00 AM"}
Parsed ISO timestamp "2025-06-05T09:00:00.000Z" to Europe/London time: 2025-06-05 10:00:00 GMT+1
🔍 [SERVICE] Place details for "Notting Hill Coffee Project": {
  hasRating: true,
  rating: 4.5,
  hasTypes: true,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  fullDetails: '{\n' +
    '  "business_status": "OPERATIONAL",\n' +
    '  "formatted_address": "63 Notting Hill Gate, London W11 3JS, United Kingdom",\n' +
    '  "geometry": {\n' +
    '    "location": {\n' +
    '      "lat": 51.5088921,\n' +
    '      "lng": -0.1966258\n' +
    '    },\n' +
    '    "viewport": {\n' +
    '      "northeast": {\n' +
    '        "lat": 51.51027477989272,\n' +
    '        "lng": -0.1952558201072777\n' +
    '      },\n' +
    '      "southwest": {\n' +
    '        "lat": 51.50757512010728,\n' +
    '        "lng": -0.1979554798927221\n' +
    '      }\n' +
    '    }\n' +
    '  },\n' +
    '  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/cafe-71.png",\n' +
    '  "icon_background_color": "#FF9E67",\n' +
    '  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/cafe_pinlet",\n' +
    '  "name": "Notting Hill Coffee Project",\n' +
    '  "opening_hours": {\n' +
    '    "open_now": true\n' +
    '  },\n' +
    '  "photos": [\n' +
    '    {\n' +
    '      "height": 1555,\n' +
    '      "html_attributions": [\n' +
    '        "<a href=\\"https://maps.google.com/maps/contrib/111205543629304504553\\">Maryam Al</a>"\n' +
    '      ],\n' +
    '      "photo_reference": "AXQCQNTxNWfzBQqrpFJ5nHFdpb3BHCBnve1yWl4sBSVNbr5CQPS8w2-KEiQ_qqyj4_8ryzefSzTTaczGhnKsYzH7Op1zU7GkoV18PiRkxu4vW_kRotYpMjBQ5S4K4vp3ZMnggz3PfU2tTXAzLf_TMyXljJ3RbF6H8HF86wbMGy5np5iB45zwxUrvx9FIsjuGJRFLBtL_nFUKP9liA58jPlNpEf76N7GS6b_cPnvmP7DPZAM5c2s0WJFkCGdyPG-5vkVoEgCnPxa6RQiHMSYIyuXtUwOMvG9i1O2QW6UkdjLA0bDrZI4KN0aNXsxS-SPFwVRmDuvWCoZESOPlJ3fne9CtToEHW9D6UAufce96sHOKeAW7n0LLlhKVwdxqGWtngNstIocNv_OuUgKefuHKgcObw-FNSq36xNWg4aGbTIptJXjD47DwYgzCZMOkWhroqcxmTEpF84rCSZq-mHGwxLW7-Pmu3DFX7kIYgAwJasgRjETVBcOu1Qug-mnpdOD8QXChTzvznGTZ9gA3AxUJU0j9J71larwWDWOKzy7iaDSwE_MKRVO0Otuywcz61abwGP5M8-ilNVjC",\n' +
    '      "width": 1170\n' +
    '    }\n' +
    '  ],\n' +
    '  "place_id": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "plus_code": {\n' +
    '    "compound_code": "GR53+H9 London, United Kingdom",\n' +
    '    "global_code": "9C3XGR53+H9"\n' +
    '  },\n' +
    '  "rating": 4.5,\n' +
    '  "reference": "ChIJ96J8YLoPdkgRcZKOzdQweuI",\n' +
    '  "types": [\n' +
    '    "cafe",\n' +
    '    "store",\n' +
    '    "food",\n' +
    '    "point_of_interest",\n' +
    '    "establishment"\n' +
    '  ],\n' +
    '  "user_ratings_total": 362\n' +
    '}'
}
🔍 [SERVICE] About to store place with details: {
  hasDetails: true,
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ],
  detailsSize: 1621
}
🔍 [SERVICE] placeToInsert details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ]
}
Error checking for existing place: TypeError: db.select is not a function
    at DbStorageWithLogging.createPlace (/Users/carlos/LondonDayPlanner-1/server/storage.ts:481:42)
    at ItineraryPlanningService._processFixedAppointments (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:554:44)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:221:7)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Database error in createPlace, using in-memory fallback: db.select is not a function
🔍 [MEM-FALLBACK] Existing place "Notting Hill Coffee Project" details check: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Place "Notting Hill Coffee Project" already exists, returning existing record
🔍 [SERVICE] Stored place "Notting Hill Coffee Project" details: {
  hasDetails: true,
  detailsType: 'object',
  detailsKeys: [
    'business_status',
    'formatted_address',
    'geometry',
    'icon',
    'icon_background_color',
    'icon_mask_base_uri',
    'name',
    'opening_hours',
    'photos',
    'place_id',
    'plus_code',
    'rating',
    'reference',
    'types',
    'user_ratings_total'
  ],
  rating: 4.5,
  types: [ 'cafe', 'store', 'food', 'point_of_interest', 'establishment' ]
}
Added fixed appointment to itinerary: Notting Hill Coffee Project at 2025-06-05T09:00:00.000Z
DbStorage (with logging): Creating itinerary (anonymous)
DbStorage (with logging): Error creating itinerary: TypeError: db.insert is not a function
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:137:36)
    at DbStorageWithLogging.createItinerary (/Users/carlos/LondonDayPlanner-1/server/storage.ts:635:34)
    at ItineraryPlanningService.createPlan (/Users/carlos/LondonDayPlanner-1/server/services/ItineraryPlanningService.ts:300:51)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at <anonymous> (/Users/carlos/LondonDayPlanner-1/server/routes.ts:185:25)
Using in-memory fallback for createItinerary due to database error
Successfully created itinerary "Coffee in London" for London with ID: 17
[Weather] Using cached data for 51.51,-0.2
🌤️ [/api/plan] Retrieved weather data for itinerary
🔍 [/api/plan] Place "Notting Hill Coffee Project" details: {
  hasDetails: false,
  detailsKeys: [],
  rating: undefined,
  types: undefined
}
📤 [/api/plan] Sending response with 1 venues
2025-06-05 04:17:04 INFO [API] POST /api/plan 200 (2ms) {
  "statusCode": 200,
  "duration": 2
}
SIGTERM received, shutting down gracefully...
Server closed
